CCS PCM C Compiler, Version 5.015, 5967               19-Thg6-24 19:01

               Filename:   D:\Admin\Documents\TT_HTN\FINAL PROJECT\FINAL_PROJECT_FULL\FINAL_PROJECT_FULL.lst

               ROM used:   6911 words (84%)
                           Largest free fragment is 979
               RAM used:   134 (36%) at main() level
                           158 (43%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  1A
0001:  MOVWF  0A
0002:  GOTO   28E
0003:  NOP
.................... #include <tv_16f887.c> 
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  07
0017:  RETLW  00
0018:  RETLW  07
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  7F
001C:  RETLW  14
001D:  RETLW  7F
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  23
0025:  RETLW  13
0026:  RETLW  08
0027:  RETLW  64
0028:  RETLW  62
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  56
002C:  RETLW  20
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  08
0030:  RETLW  07
0031:  RETLW  03
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  2A
003E:  RETLW  1C
003F:  RETLW  7F
0040:  RETLW  1C
0041:  RETLW  2A
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  80
0049:  RETLW  70
004A:  RETLW  30
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  00
0053:  RETLW  60
0054:  RETLW  60
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  42
0062:  RETLW  7F
0063:  RETLW  40
0064:  RETLW  00
0065:  RETLW  72
0066:  RETLW  49
0067:  RETLW  49
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  21
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  4D
006E:  RETLW  33
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3C
007A:  RETLW  4A
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  31
007E:  RETLW  41
007F:  RETLW  21
0080:  RETLW  11
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  46
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  29
008C:  RETLW  1E
008D:  RETLW  00
008E:  RETLW  00
008F:  RETLW  14
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  40
0094:  RETLW  34
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  00
0098:  RETLW  08
0099:  RETLW  14
009A:  RETLW  22
009B:  RETLW  41
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  59
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  5D
00AE:  RETLW  59
00AF:  RETLW  4E
00B0:  RETLW  7C
00B1:  RETLW  12
00B2:  RETLW  11
00B3:  RETLW  12
00B4:  RETLW  7C
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  51
00D2:  RETLW  73
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  20
00DE:  RETLW  40
00DF:  RETLW  41
00E0:  RETLW  3F
00E1:  RETLW  01
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  1C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  04
00F3:  RETLW  08
00F4:  RETLW  10
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  3E
0101:  RETLW  41
0102:  RETLW  51
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  19
0108:  RETLW  29
0109:  RETLW  46
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  03
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  03
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  3F
0123:  RETLW  40
0124:  RETLW  38
0125:  RETLW  40
0126:  RETLW  3F
0127:  RETLW  63
0128:  RETLW  14
0129:  RETLW  08
012A:  RETLW  14
012B:  RETLW  63
012C:  RETLW  03
012D:  RETLW  04
012E:  RETLW  78
012F:  RETLW  04
0130:  RETLW  03
0131:  RETLW  61
0132:  RETLW  59
0133:  RETLW  49
0134:  RETLW  4D
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  41
013A:  RETLW  41
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  41
0142:  RETLW  41
0143:  RETLW  41
0144:  RETLW  7F
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  03
0151:  RETLW  07
0152:  RETLW  08
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  78
0158:  RETLW  40
0159:  RETLW  7F
015A:  RETLW  28
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  28
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  28
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  00
016E:  RETLW  08
016F:  RETLW  7E
0170:  RETLW  09
0171:  RETLW  02
0172:  RETLW  18
0173:  RETLW  A4
0174:  RETLW  A4
0175:  RETLW  9C
0176:  RETLW  78
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  40
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  FC
01A0:  RETLW  18
01A1:  RETLW  24
01A2:  RETLW  24
01A3:  RETLW  18
01A4:  RETLW  18
01A5:  RETLW  24
01A6:  RETLW  24
01A7:  RETLW  18
01A8:  RETLW  FC
01A9:  RETLW  7C
01AA:  RETLW  08
01AB:  RETLW  04
01AC:  RETLW  04
01AD:  RETLW  08
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  24
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  24
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  4C
01CD:  RETLW  90
01CE:  RETLW  90
01CF:  RETLW  90
01D0:  RETLW  7C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  00
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  77
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  00
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
01EA:  DATA 50,29
01EB:  DATA 4F,25
01EC:  DATA C5,21
01ED:  DATA 54,00
01EE:  DATA C5,26
01EF:  DATA C2,22
01F0:  DATA 44,22
01F1:  DATA 45,22
01F2:  DATA A0,29
01F3:  DATA D9,29
01F4:  DATA D4,22
01F5:  DATA 4D,00
01F6:  DATA 2D,10
01F7:  DATA D4,22
01F8:  DATA 4D,28
01F9:  DATA 45,29
01FA:  DATA 41,2A
01FB:  DATA 55,29
01FC:  DATA 45,1D
01FD:  DATA 20,00
01FE:  DATA 43,00
01FF:  DATA 2D,10
0200:  DATA C8,2A
0201:  DATA CD,24
0202:  DATA C4,24
0203:  DATA D4,2C
0204:  DATA 3A,10
0205:  DATA 00,01
0206:  DATA 25,00
0207:  DATA 2D,10
0208:  DATA D4,24
0209:  DATA CD,22
020A:  DATA 3A,10
020B:  DATA 00,01
020C:  DATA 3A,00
020D:  DATA 3A,00
020E:  DATA 2D,10
020F:  DATA C4,20
0210:  DATA D4,22
0211:  DATA 3A,10
0212:  DATA 00,01
0213:  DATA 2F,00
0214:  DATA 2F,19
0215:  DATA 30,00
0216:  DATA D4,22
0217:  DATA 4D,28
0218:  DATA 45,29
0219:  DATA 41,2A
021A:  DATA 55,29
021B:  DATA 45,10
021C:  DATA CD,20
021D:  DATA 58,1D
021E:  DATA 00,01
021F:  DATA AD,16
0220:  DATA AD,16
0221:  DATA AD,16
0222:  DATA AD,16
0223:  DATA AD,16
0224:  DATA AD,16
0225:  DATA 2D,1F
0226:  DATA 20,10
0227:  DATA 00,01
0228:  DATA 43,00
0229:  DATA C8,2A
022A:  DATA CD,24
022B:  DATA C4,24
022C:  DATA D4,2C
022D:  DATA A0,26
022E:  DATA 41,2C
022F:  DATA 3A,00
0230:  DATA AD,16
0231:  DATA AD,16
0232:  DATA AD,16
0233:  DATA AD,16
0234:  DATA AD,16
0235:  DATA AD,16
0236:  DATA 2D,1F
0237:  DATA 20,10
0238:  DATA 00,01
0239:  DATA 25,00
023A:  DATA D4,22
023B:  DATA 4D,28
023C:  DATA 45,29
023D:  DATA 41,2A
023E:  DATA 55,29
023F:  DATA 45,10
0240:  DATA 55,28
0241:  DATA C4,20
0242:  DATA D4,22
0243:  DATA 44,00
0244:  DATA 2D,1F
0245:  DATA A0,20
0246:  DATA F6,32
0247:  DATA F2,30
0248:  DATA E7,32
0249:  DATA 3A,10
024A:  DATA 00,01
024B:  DATA 43,00
024C:  DATA C8,2A
024D:  DATA CD,24
024E:  DATA C4,24
024F:  DATA D4,2C
0250:  DATA A0,2A
0251:  DATA 50,22
0252:  DATA 41,2A
0253:  DATA 45,22
0254:  DATA 00,01
0255:  DATA 2D,1F
0256:  DATA A0,20
0257:  DATA F6,32
0258:  DATA F2,30
0259:  DATA E7,32
025A:  DATA 3A,10
025B:  DATA 00,01
025C:  DATA 25,00
025D:  DATA 20,10
025E:  DATA 20,2A
025F:  DATA C5,26
0260:  DATA D0,22
0261:  DATA D2,20
0262:  DATA D4,2A
0263:  DATA D2,22
0264:  DATA 20,10
0265:  DATA 20,10
0266:  DATA 20,10
0267:  DATA 00,00
0268:  DATA 20,10
0269:  DATA 20,10
026A:  DATA 20,10
026B:  DATA 20,10
026C:  DATA C8,2A
026D:  DATA CD,24
026E:  DATA C4,24
026F:  DATA D4,2C
0270:  DATA 20,10
0271:  DATA 20,10
0272:  DATA 00,01
0273:  DATA 20,10
0274:  DATA CD,27
0275:  DATA CE,24
0276:  DATA D4,27
0277:  DATA D2,24
0278:  DATA CE,23
0279:  DATA A0,29
027A:  DATA D9,29
027B:  DATA D4,22
027C:  DATA 4D,10
027D:  DATA 00,01
027E:  DATA 20,10
027F:  DATA 20,10
0280:  DATA 20,10
0281:  DATA 20,10
0282:  DATA 20,10
0283:  DATA 20,10
0284:  DATA 20,10
0285:  DATA 20,10
0286:  DATA 20,10
0287:  DATA 20,10
0288:  DATA 00,00
0289:  DATA 3A,00
028A:  DATA 3A,00
028B:  DATA 2C,10
028C:  DATA 00,01
028D:  DATA 2F,00
028E:  DATA 2F,00
028F:  DATA 20,10
0290:  DATA C8,24
0291:  DATA 47,24
0292:  DATA 20,2A
0293:  DATA C5,26
0294:  DATA D0,22
0295:  DATA D2,20
0296:  DATA D4,2A
0297:  DATA D2,22
0298:  DATA 20,10
0299:  DATA 00,01
029A:  DATA 20,10
029B:  DATA 20,10
029C:  DATA 20,10
029D:  DATA 20,10
029E:  DATA 20,10
029F:  DATA 20,10
02A0:  DATA 20,10
02A1:  DATA 20,10
02A2:  DATA 20,10
02A3:  DATA 20,10
02A4:  DATA 00,01
02A5:  DATA AD,16
02A6:  DATA BA,16
02A7:  DATA 2D,1D
02A8:  DATA AD,16
02A9:  DATA 2C,10
02AA:  DATA AD,16
02AB:  DATA AF,16
02AC:  DATA AD,17
02AD:  DATA AD,16
02AE:  DATA 00,01
02AF:  DATA 3E,00
02B0:  DATA 3C,00
02B1:  DATA 3A,00
02B2:  DATA 3A,00
02B3:  DATA 2C,10
02B4:  DATA 00,01
02B5:  DATA 2F,00
02B6:  DATA 2F,00
02B7:  DATA 3A,00
02B8:  DATA 3A,00
02B9:  DATA 2C,10
02BA:  DATA 00,01
02BB:  DATA 2F,00
02BC:  DATA 2F,00
02BD:  DATA 20,10
02BE:  DATA 20,24
02BF:  DATA C9,23
02C0:  DATA 48,10
02C1:  DATA C8,2A
02C2:  DATA CD,24
02C3:  DATA C4,24
02C4:  DATA D4,2C
02C5:  DATA 20,10
02C6:  DATA 20,10
02C7:  DATA 00,01
02C8:  DATA 20,10
02C9:  DATA 20,10
02CA:  DATA 20,10
02CB:  DATA 20,10
02CC:  DATA 20,10
02CD:  DATA 20,10
02CE:  DATA 20,10
02CF:  DATA 20,10
02D0:  DATA 20,10
02D1:  DATA 20,10
02D2:  DATA 00,01
02D3:  DATA AD,16
02D4:  DATA BA,16
02D5:  DATA 2D,1D
02D6:  DATA AD,16
02D7:  DATA 2C,10
02D8:  DATA AD,16
02D9:  DATA AF,16
02DA:  DATA AD,17
02DB:  DATA AD,16
02DC:  DATA 00,01
02DD:  DATA 3C,00
02DE:  DATA 3E,00
02DF:  DATA 3A,00
02E0:  DATA 3A,00
02E1:  DATA 2C,10
02E2:  DATA 00,01
02E3:  DATA 2F,00
02E4:  DATA 2F,00
*
047F:  CLRF   77
0480:  CLRF   78
0481:  BSF    03.5
0482:  MOVF   56,W
0483:  BCF    03.0
0484:  BTFSC  57.0
0485:  ADDWF  77,F
0486:  RRF    77,F
0487:  RRF    78,F
0488:  BTFSC  57.1
0489:  ADDWF  77,F
048A:  RRF    77,F
048B:  RRF    78,F
048C:  BTFSC  57.2
048D:  ADDWF  77,F
048E:  RRF    77,F
048F:  RRF    78,F
0490:  BTFSC  57.3
0491:  ADDWF  77,F
0492:  RRF    77,F
0493:  RRF    78,F
0494:  BTFSC  57.4
0495:  ADDWF  77,F
0496:  RRF    77,F
0497:  RRF    78,F
0498:  BTFSC  57.5
0499:  ADDWF  77,F
049A:  RRF    77,F
049B:  RRF    78,F
049C:  BTFSC  57.6
049D:  ADDWF  77,F
049E:  RRF    77,F
049F:  RRF    78,F
04A0:  BTFSC  57.7
04A1:  ADDWF  77,F
04A2:  RRF    77,F
04A3:  RRF    78,F
04A4:  BCF    03.5
04A5:  RETURN
*
0596:  MOVF   0B,W
0597:  BSF    03.5
0598:  MOVWF  45
0599:  BCF    03.5
059A:  BCF    0B.7
059B:  BSF    03.5
059C:  BSF    03.6
059D:  BSF    0C.7
059E:  BSF    0C.0
059F:  NOP
05A0:  NOP
05A1:  BCF    03.6
05A2:  BTFSS  45.7
05A3:  GOTO   5A7
05A4:  BCF    03.5
05A5:  BSF    0B.7
05A6:  BSF    03.5
05A7:  BCF    03.5
05A8:  BSF    03.6
05A9:  MOVF   0C,W
05AA:  ANDLW  7F
05AB:  BTFSC  03.2
05AC:  GOTO   608
05AD:  BSF    03.5
05AE:  BCF    03.6
05AF:  MOVWF  45
05B0:  BCF    03.5
05B1:  BSF    03.6
05B2:  MOVF   0D,W
05B3:  BSF    03.5
05B4:  BCF    03.6
05B5:  MOVWF  46
05B6:  BCF    03.5
05B7:  BSF    03.6
05B8:  MOVF   0F,W
05B9:  BSF    03.5
05BA:  BCF    03.6
05BB:  MOVWF  47
05BC:  MOVF   45,W
05BD:  MOVWF  48
05BE:  BCF    03.5
05BF:  CALL   58C
05C0:  BSF    03.5
05C1:  MOVF   46,W
05C2:  BCF    03.5
05C3:  BSF    03.6
05C4:  MOVWF  0D
05C5:  BSF    03.5
05C6:  BCF    03.6
05C7:  MOVF   47,W
05C8:  BCF    03.5
05C9:  BSF    03.6
05CA:  MOVWF  0F
05CB:  BCF    03.6
05CC:  MOVF   0B,W
05CD:  BSF    03.5
05CE:  MOVWF  48
05CF:  BCF    03.5
05D0:  BCF    0B.7
05D1:  BSF    03.5
05D2:  BSF    03.6
05D3:  BSF    0C.7
05D4:  BSF    0C.0
05D5:  NOP
05D6:  NOP
05D7:  BCF    03.6
05D8:  BTFSS  48.7
05D9:  GOTO   5DD
05DA:  BCF    03.5
05DB:  BSF    0B.7
05DC:  BSF    03.5
05DD:  BCF    03.5
05DE:  BSF    03.6
05DF:  RLF    0C,W
05E0:  RLF    0E,W
05E1:  ANDLW  7F
05E2:  BTFSC  03.2
05E3:  GOTO   608
05E4:  BSF    03.5
05E5:  BCF    03.6
05E6:  MOVWF  45
05E7:  BCF    03.5
05E8:  BSF    03.6
05E9:  MOVF   0D,W
05EA:  BSF    03.5
05EB:  BCF    03.6
05EC:  MOVWF  46
05ED:  BCF    03.5
05EE:  BSF    03.6
05EF:  MOVF   0F,W
05F0:  BSF    03.5
05F1:  BCF    03.6
05F2:  MOVWF  47
05F3:  MOVF   45,W
05F4:  MOVWF  48
05F5:  BCF    03.5
05F6:  CALL   58C
05F7:  BSF    03.5
05F8:  MOVF   46,W
05F9:  BCF    03.5
05FA:  BSF    03.6
05FB:  MOVWF  0D
05FC:  BSF    03.5
05FD:  BCF    03.6
05FE:  MOVF   47,W
05FF:  BCF    03.5
0600:  BSF    03.6
0601:  MOVWF  0F
0602:  INCF   0D,F
0603:  BTFSC  03.2
0604:  INCF   0F,F
0605:  BCF    03.6
0606:  GOTO   596
0607:  BSF    03.6
0608:  BCF    03.6
0609:  RETURN
*
063D:  BSF    03.5
063E:  MOVF   55,W
063F:  CLRF   78
0640:  SUBWF  54,W
0641:  BTFSC  03.0
0642:  GOTO   646
0643:  MOVF   54,W
0644:  MOVWF  77
0645:  GOTO   652
0646:  CLRF   77
0647:  MOVLW  08
0648:  MOVWF  56
0649:  RLF    54,F
064A:  RLF    77,F
064B:  MOVF   55,W
064C:  SUBWF  77,W
064D:  BTFSC  03.0
064E:  MOVWF  77
064F:  RLF    78,F
0650:  DECFSZ 56,F
0651:  GOTO   649
0652:  BCF    03.5
0653:  RETURN
*
0793:  MOVF   78,W
0794:  BSF    03.5
0795:  MOVF   45,W
0796:  MOVWF  54
0797:  MOVLW  64
0798:  MOVWF  55
0799:  BCF    03.5
079A:  CALL   63D
079B:  MOVF   77,W
079C:  BSF    03.5
079D:  MOVWF  45
079E:  MOVF   78,W
079F:  MOVLW  30
07A0:  BTFSS  03.2
07A1:  GOTO   7A9
07A2:  BTFSS  46.1
07A3:  GOTO   7B4
07A4:  BTFSC  46.3
07A5:  GOTO   7B4
07A6:  BTFSC  46.4
07A7:  MOVLW  20
07A8:  GOTO   7AC
07A9:  BCF    46.3
07AA:  BCF    46.4
07AB:  BSF    46.0
07AC:  ADDWF  78,F
07AD:  MOVF   78,W
07AE:  MOVWF  51
07AF:  BSF    0A.3
07B0:  BCF    03.5
07B1:  CALL   52D
07B2:  BCF    0A.3
07B3:  BSF    03.5
07B4:  MOVF   45,W
07B5:  MOVWF  54
07B6:  MOVLW  0A
07B7:  MOVWF  55
07B8:  BCF    03.5
07B9:  CALL   63D
07BA:  MOVF   77,W
07BB:  BSF    03.5
07BC:  MOVWF  45
07BD:  MOVF   78,W
07BE:  MOVLW  30
07BF:  BTFSS  03.2
07C0:  GOTO   7C7
07C1:  BTFSC  46.3
07C2:  GOTO   7CF
07C3:  BTFSS  46.0
07C4:  GOTO   7CF
07C5:  BTFSC  46.4
07C6:  MOVLW  20
07C7:  ADDWF  78,F
07C8:  MOVF   78,W
07C9:  MOVWF  51
07CA:  BSF    0A.3
07CB:  BCF    03.5
07CC:  CALL   52D
07CD:  BCF    0A.3
07CE:  BSF    03.5
07CF:  MOVLW  30
07D0:  ADDWF  45,F
07D1:  MOVF   45,W
07D2:  MOVWF  51
07D3:  BSF    0A.3
07D4:  BCF    03.5
07D5:  CALL   52D
07D6:  BCF    0A.3
07D7:  RETURN
*
0DE8:  MOVF   0B,W
0DE9:  BSF    03.5
0DEA:  MOVWF  44
0DEB:  BCF    03.5
0DEC:  BCF    0B.7
0DED:  BSF    03.5
0DEE:  BSF    03.6
0DEF:  BSF    0C.7
0DF0:  BSF    0C.0
0DF1:  NOP
0DF2:  NOP
0DF3:  BCF    03.6
0DF4:  BTFSS  44.7
0DF5:  GOTO   5F9
0DF6:  BCF    03.5
0DF7:  BSF    0B.7
0DF8:  BSF    03.5
0DF9:  BCF    03.5
0DFA:  BSF    03.6
0DFB:  MOVF   0C,W
0DFC:  ANDLW  7F
0DFD:  BTFSC  03.2
0DFE:  GOTO   65A
0DFF:  BSF    03.5
0E00:  BCF    03.6
0E01:  MOVWF  44
0E02:  BCF    03.5
0E03:  BSF    03.6
0E04:  MOVF   0D,W
0E05:  BSF    03.5
0E06:  BCF    03.6
0E07:  MOVWF  45
0E08:  BCF    03.5
0E09:  BSF    03.6
0E0A:  MOVF   0F,W
0E0B:  BSF    03.5
0E0C:  BCF    03.6
0E0D:  MOVWF  46
0E0E:  MOVF   44,W
0E0F:  MOVWF  51
0E10:  BCF    03.5
0E11:  CALL   52D
0E12:  BSF    03.5
0E13:  MOVF   45,W
0E14:  BCF    03.5
0E15:  BSF    03.6
0E16:  MOVWF  0D
0E17:  BSF    03.5
0E18:  BCF    03.6
0E19:  MOVF   46,W
0E1A:  BCF    03.5
0E1B:  BSF    03.6
0E1C:  MOVWF  0F
0E1D:  BCF    03.6
0E1E:  MOVF   0B,W
0E1F:  BSF    03.5
0E20:  MOVWF  47
0E21:  BCF    03.5
0E22:  BCF    0B.7
0E23:  BSF    03.5
0E24:  BSF    03.6
0E25:  BSF    0C.7
0E26:  BSF    0C.0
0E27:  NOP
0E28:  NOP
0E29:  BCF    03.6
0E2A:  BTFSS  47.7
0E2B:  GOTO   62F
0E2C:  BCF    03.5
0E2D:  BSF    0B.7
0E2E:  BSF    03.5
0E2F:  BCF    03.5
0E30:  BSF    03.6
0E31:  RLF    0C,W
0E32:  RLF    0E,W
0E33:  ANDLW  7F
0E34:  BTFSC  03.2
0E35:  GOTO   65A
0E36:  BSF    03.5
0E37:  BCF    03.6
0E38:  MOVWF  44
0E39:  BCF    03.5
0E3A:  BSF    03.6
0E3B:  MOVF   0D,W
0E3C:  BSF    03.5
0E3D:  BCF    03.6
0E3E:  MOVWF  45
0E3F:  BCF    03.5
0E40:  BSF    03.6
0E41:  MOVF   0F,W
0E42:  BSF    03.5
0E43:  BCF    03.6
0E44:  MOVWF  46
0E45:  MOVF   44,W
0E46:  MOVWF  51
0E47:  BCF    03.5
0E48:  CALL   52D
0E49:  BSF    03.5
0E4A:  MOVF   45,W
0E4B:  BCF    03.5
0E4C:  BSF    03.6
0E4D:  MOVWF  0D
0E4E:  BSF    03.5
0E4F:  BCF    03.6
0E50:  MOVF   46,W
0E51:  BCF    03.5
0E52:  BSF    03.6
0E53:  MOVWF  0F
0E54:  INCF   0D,F
0E55:  BTFSC  03.2
0E56:  INCF   0F,F
0E57:  BCF    03.6
0E58:  GOTO   5E8
0E59:  BSF    03.6
0E5A:  BCF    03.6
0E5B:  RETURN
*
1300:  MOVLW  8E
1301:  MOVWF  77
1302:  BSF    03.5
1303:  MOVF   4B,W
1304:  MOVWF  78
1305:  MOVF   4A,W
1306:  MOVWF  79
1307:  CLRF   7A
1308:  MOVF   78,F
1309:  BTFSS  03.2
130A:  GOTO   315
130B:  MOVF   79,W
130C:  MOVWF  78
130D:  CLRF   79
130E:  MOVLW  08
130F:  SUBWF  77,F
1310:  MOVF   78,F
1311:  BTFSS  03.2
1312:  GOTO   315
1313:  CLRF   77
1314:  GOTO   31D
1315:  BCF    03.0
1316:  BTFSC  78.7
1317:  GOTO   31C
1318:  RLF    79,F
1319:  RLF    78,F
131A:  DECF   77,F
131B:  GOTO   315
131C:  BCF    78.7
131D:  BCF    03.5
131E:  RETURN
131F:  MOVLW  80
1320:  BTFSS  03.1
1321:  GOTO   325
1322:  BSF    03.5
1323:  XORWF  51,F
1324:  BCF    03.5
1325:  BSF    03.5
1326:  CLRF   56
1327:  CLRF   57
1328:  MOVF   4D,W
1329:  MOVWF  55
132A:  MOVF   51,W
132B:  XORWF  55,F
132C:  MOVF   4C,W
132D:  BTFSC  03.2
132E:  GOTO   413
132F:  MOVWF  54
1330:  MOVWF  77
1331:  MOVF   50,W
1332:  BTFSC  03.2
1333:  GOTO   41C
1334:  SUBWF  54,F
1335:  BTFSC  03.2
1336:  GOTO   3B8
1337:  BTFSS  03.0
1338:  GOTO   376
1339:  MOVF   51,W
133A:  MOVWF  5A
133B:  BSF    5A.7
133C:  MOVF   52,W
133D:  MOVWF  59
133E:  MOVF   53,W
133F:  MOVWF  58
1340:  CLRF   57
1341:  BCF    03.0
1342:  RRF    5A,F
1343:  RRF    59,F
1344:  RRF    58,F
1345:  RRF    57,F
1346:  DECFSZ 54,F
1347:  GOTO   340
1348:  BTFSS  55.7
1349:  GOTO   34D
134A:  BSF    56.0
134B:  GOTO   430
134C:  BCF    56.0
134D:  BCF    54.0
134E:  BSF    56.4
134F:  MOVLW  CF
1350:  MOVWF  04
1351:  BCF    03.7
1352:  GOTO   445
1353:  BCF    56.4
1354:  BTFSC  55.7
1355:  GOTO   360
1356:  BTFSS  54.0
1357:  GOTO   36B
1358:  RRF    5A,F
1359:  RRF    59,F
135A:  RRF    58,F
135B:  RRF    57,F
135C:  INCF   77,F
135D:  BTFSC  03.2
135E:  GOTO   42B
135F:  GOTO   36B
1360:  BTFSC  5A.7
1361:  GOTO   36E
1362:  BCF    03.0
1363:  RLF    57,F
1364:  RLF    58,F
1365:  RLF    59,F
1366:  RLF    5A,F
1367:  DECF   77,F
1368:  BTFSC  03.2
1369:  GOTO   42B
136A:  GOTO   360
136B:  BSF    56.6
136C:  GOTO   3D8
136D:  BCF    56.6
136E:  MOVF   4D,W
136F:  MOVWF  55
1370:  BTFSS  55.7
1371:  GOTO   374
1372:  BSF    5A.7
1373:  GOTO   424
1374:  BCF    5A.7
1375:  GOTO   424
1376:  MOVF   50,W
1377:  MOVWF  54
1378:  MOVWF  77
1379:  MOVF   4C,W
137A:  SUBWF  54,F
137B:  MOVF   4D,W
137C:  MOVWF  5A
137D:  BSF    5A.7
137E:  MOVF   4E,W
137F:  MOVWF  59
1380:  MOVF   4F,W
1381:  MOVWF  58
1382:  CLRF   57
1383:  BCF    03.0
1384:  RRF    5A,F
1385:  RRF    59,F
1386:  RRF    58,F
1387:  RRF    57,F
1388:  DECFSZ 54,F
1389:  GOTO   382
138A:  BTFSS  55.7
138B:  GOTO   38F
138C:  BSF    56.1
138D:  GOTO   430
138E:  BCF    56.1
138F:  BCF    54.0
1390:  BSF    56.5
1391:  MOVLW  D3
1392:  MOVWF  04
1393:  BCF    03.7
1394:  GOTO   445
1395:  BCF    56.5
1396:  BTFSC  55.7
1397:  GOTO   3A2
1398:  BTFSS  54.0
1399:  GOTO   3AD
139A:  RRF    5A,F
139B:  RRF    59,F
139C:  RRF    58,F
139D:  RRF    57,F
139E:  INCF   77,F
139F:  BTFSC  03.2
13A0:  GOTO   42B
13A1:  GOTO   3AD
13A2:  BTFSC  5A.7
13A3:  GOTO   3B0
13A4:  BCF    03.0
13A5:  RLF    57,F
13A6:  RLF    58,F
13A7:  RLF    59,F
13A8:  RLF    5A,F
13A9:  DECF   77,F
13AA:  BTFSC  03.2
13AB:  GOTO   42B
13AC:  GOTO   3A2
13AD:  BSF    56.7
13AE:  GOTO   3D8
13AF:  BCF    56.7
13B0:  MOVF   51,W
13B1:  MOVWF  55
13B2:  BTFSS  55.7
13B3:  GOTO   3B6
13B4:  BSF    5A.7
13B5:  GOTO   424
13B6:  BCF    5A.7
13B7:  GOTO   424
13B8:  MOVF   51,W
13B9:  MOVWF  5A
13BA:  BSF    5A.7
13BB:  MOVF   52,W
13BC:  MOVWF  59
13BD:  MOVF   53,W
13BE:  MOVWF  58
13BF:  BTFSS  55.7
13C0:  GOTO   3C5
13C1:  BCF    5A.7
13C2:  BSF    56.2
13C3:  GOTO   430
13C4:  BCF    56.2
13C5:  CLRF   57
13C6:  BCF    54.0
13C7:  MOVLW  CF
13C8:  MOVWF  04
13C9:  BCF    03.7
13CA:  GOTO   445
13CB:  BTFSC  55.7
13CC:  GOTO   3EE
13CD:  MOVF   4D,W
13CE:  MOVWF  55
13CF:  BTFSS  54.0
13D0:  GOTO   3D8
13D1:  RRF    5A,F
13D2:  RRF    59,F
13D3:  RRF    58,F
13D4:  RRF    57,F
13D5:  INCF   77,F
13D6:  BTFSC  03.2
13D7:  GOTO   42B
13D8:  BTFSS  57.7
13D9:  GOTO   3E9
13DA:  INCF   58,F
13DB:  BTFSS  03.2
13DC:  GOTO   3E9
13DD:  INCF   59,F
13DE:  BTFSS  03.2
13DF:  GOTO   3E9
13E0:  INCF   5A,F
13E1:  BTFSS  03.2
13E2:  GOTO   3E9
13E3:  RRF    5A,F
13E4:  RRF    59,F
13E5:  RRF    58,F
13E6:  INCF   77,F
13E7:  BTFSC  03.2
13E8:  GOTO   42B
13E9:  BTFSC  56.6
13EA:  GOTO   36D
13EB:  BTFSC  56.7
13EC:  GOTO   3AF
13ED:  GOTO   40D
13EE:  MOVLW  80
13EF:  XORWF  5A,F
13F0:  BTFSS  5A.7
13F1:  GOTO   3F6
13F2:  GOTO   430
13F3:  MOVF   51,W
13F4:  MOVWF  55
13F5:  GOTO   403
13F6:  MOVF   4D,W
13F7:  MOVWF  55
13F8:  MOVF   5A,F
13F9:  BTFSS  03.2
13FA:  GOTO   403
13FB:  MOVF   59,F
13FC:  BTFSS  03.2
13FD:  GOTO   403
13FE:  MOVF   58,F
13FF:  BTFSS  03.2
1400:  GOTO   403
1401:  CLRF   77
1402:  GOTO   424
1403:  BTFSC  5A.7
1404:  GOTO   40D
1405:  BCF    03.0
1406:  RLF    57,F
1407:  RLF    58,F
1408:  RLF    59,F
1409:  RLF    5A,F
140A:  DECFSZ 77,F
140B:  GOTO   403
140C:  GOTO   42B
140D:  BTFSS  55.7
140E:  GOTO   411
140F:  BSF    5A.7
1410:  GOTO   424
1411:  BCF    5A.7
1412:  GOTO   424
1413:  MOVF   50,W
1414:  MOVWF  77
1415:  MOVF   51,W
1416:  MOVWF  5A
1417:  MOVF   52,W
1418:  MOVWF  59
1419:  MOVF   53,W
141A:  MOVWF  58
141B:  GOTO   424
141C:  MOVF   4C,W
141D:  MOVWF  77
141E:  MOVF   4D,W
141F:  MOVWF  5A
1420:  MOVF   4E,W
1421:  MOVWF  59
1422:  MOVF   4F,W
1423:  MOVWF  58
1424:  MOVF   5A,W
1425:  MOVWF  78
1426:  MOVF   59,W
1427:  MOVWF  79
1428:  MOVF   58,W
1429:  MOVWF  7A
142A:  GOTO   463
142B:  CLRF   77
142C:  CLRF   78
142D:  CLRF   79
142E:  CLRF   7A
142F:  GOTO   463
1430:  CLRF   57
1431:  COMF   58,F
1432:  COMF   59,F
1433:  COMF   5A,F
1434:  COMF   57,F
1435:  INCF   57,F
1436:  BTFSS  03.2
1437:  GOTO   43E
1438:  INCF   58,F
1439:  BTFSS  03.2
143A:  GOTO   43E
143B:  INCF   59,F
143C:  BTFSC  03.2
143D:  INCF   5A,F
143E:  BTFSC  56.0
143F:  GOTO   34C
1440:  BTFSC  56.1
1441:  GOTO   38E
1442:  BTFSC  56.2
1443:  GOTO   3C4
1444:  GOTO   3F3
1445:  MOVF   00,W
1446:  ADDWF  58,F
1447:  BTFSS  03.0
1448:  GOTO   44F
1449:  INCF   59,F
144A:  BTFSS  03.2
144B:  GOTO   44F
144C:  INCF   5A,F
144D:  BTFSC  03.2
144E:  BSF    54.0
144F:  DECF   04,F
1450:  MOVF   00,W
1451:  ADDWF  59,F
1452:  BTFSS  03.0
1453:  GOTO   457
1454:  INCF   5A,F
1455:  BTFSC  03.2
1456:  BSF    54.0
1457:  DECF   04,F
1458:  MOVF   00,W
1459:  BTFSS  00.7
145A:  XORLW  80
145B:  ADDWF  5A,F
145C:  BTFSC  03.0
145D:  BSF    54.0
145E:  BTFSC  56.4
145F:  GOTO   353
1460:  BTFSC  56.5
1461:  GOTO   395
1462:  GOTO   3CB
1463:  BCF    03.5
1464:  RETURN
1465:  BSF    03.5
1466:  MOVF   44,W
1467:  BTFSC  03.2
1468:  GOTO   52B
1469:  MOVWF  50
146A:  MOVF   48,W
146B:  BTFSC  03.2
146C:  GOTO   52B
146D:  SUBWF  50,F
146E:  BTFSS  03.0
146F:  GOTO   475
1470:  MOVLW  7F
1471:  ADDWF  50,F
1472:  BTFSC  03.0
1473:  GOTO   52B
1474:  GOTO   47B
1475:  MOVLW  81
1476:  SUBWF  50,F
1477:  BTFSS  03.0
1478:  GOTO   52B
1479:  BTFSC  03.2
147A:  GOTO   52B
147B:  MOVF   50,W
147C:  MOVWF  77
147D:  CLRF   78
147E:  CLRF   79
147F:  CLRF   7A
1480:  CLRF   4F
1481:  MOVF   45,W
1482:  MOVWF  4E
1483:  BSF    4E.7
1484:  MOVF   46,W
1485:  MOVWF  4D
1486:  MOVF   47,W
1487:  MOVWF  4C
1488:  MOVLW  19
1489:  MOVWF  50
148A:  MOVF   4B,W
148B:  SUBWF  4C,F
148C:  BTFSC  03.0
148D:  GOTO   49E
148E:  MOVLW  01
148F:  SUBWF  4D,F
1490:  BTFSC  03.0
1491:  GOTO   49E
1492:  SUBWF  4E,F
1493:  BTFSC  03.0
1494:  GOTO   49E
1495:  SUBWF  4F,F
1496:  BTFSC  03.0
1497:  GOTO   49E
1498:  INCF   4F,F
1499:  INCF   4E,F
149A:  INCF   4D,F
149B:  MOVF   4B,W
149C:  ADDWF  4C,F
149D:  GOTO   4D0
149E:  MOVF   4A,W
149F:  SUBWF  4D,F
14A0:  BTFSC  03.0
14A1:  GOTO   4B9
14A2:  MOVLW  01
14A3:  SUBWF  4E,F
14A4:  BTFSC  03.0
14A5:  GOTO   4B9
14A6:  SUBWF  4F,F
14A7:  BTFSC  03.0
14A8:  GOTO   4B9
14A9:  INCF   4F,F
14AA:  INCF   4E,F
14AB:  MOVF   4A,W
14AC:  ADDWF  4D,F
14AD:  MOVF   4B,W
14AE:  ADDWF  4C,F
14AF:  BTFSS  03.0
14B0:  GOTO   4D0
14B1:  INCF   4D,F
14B2:  BTFSS  03.2
14B3:  GOTO   4D0
14B4:  INCF   4E,F
14B5:  BTFSS  03.2
14B6:  GOTO   4D0
14B7:  INCF   4F,F
14B8:  GOTO   4D0
14B9:  MOVF   49,W
14BA:  IORLW  80
14BB:  SUBWF  4E,F
14BC:  BTFSC  03.0
14BD:  GOTO   4CF
14BE:  MOVLW  01
14BF:  SUBWF  4F,F
14C0:  BTFSC  03.0
14C1:  GOTO   4CF
14C2:  INCF   4F,F
14C3:  MOVF   49,W
14C4:  IORLW  80
14C5:  ADDWF  4E,F
14C6:  MOVF   4A,W
14C7:  ADDWF  4D,F
14C8:  BTFSS  03.0
14C9:  GOTO   4AD
14CA:  INCF   4E,F
14CB:  BTFSS  03.2
14CC:  GOTO   4AD
14CD:  INCF   4F,F
14CE:  GOTO   4AD
14CF:  BSF    7A.0
14D0:  DECFSZ 50,F
14D1:  GOTO   4D3
14D2:  GOTO   4DE
14D3:  BCF    03.0
14D4:  RLF    4C,F
14D5:  RLF    4D,F
14D6:  RLF    4E,F
14D7:  RLF    4F,F
14D8:  BCF    03.0
14D9:  RLF    7A,F
14DA:  RLF    79,F
14DB:  RLF    78,F
14DC:  RLF    51,F
14DD:  GOTO   48A
14DE:  BTFSS  51.0
14DF:  GOTO   4E6
14E0:  BCF    03.0
14E1:  RRF    78,F
14E2:  RRF    79,F
14E3:  RRF    7A,F
14E4:  RRF    51,F
14E5:  GOTO   4E9
14E6:  DECF   77,F
14E7:  BTFSC  03.2
14E8:  GOTO   52B
14E9:  BTFSC  51.7
14EA:  GOTO   512
14EB:  BCF    03.0
14EC:  RLF    4C,F
14ED:  RLF    4D,F
14EE:  RLF    4E,F
14EF:  RLF    4F,F
14F0:  MOVF   4B,W
14F1:  SUBWF  4C,F
14F2:  BTFSC  03.0
14F3:  GOTO   4FE
14F4:  MOVLW  01
14F5:  SUBWF  4D,F
14F6:  BTFSC  03.0
14F7:  GOTO   4FE
14F8:  SUBWF  4E,F
14F9:  BTFSC  03.0
14FA:  GOTO   4FE
14FB:  SUBWF  4F,F
14FC:  BTFSS  03.0
14FD:  GOTO   521
14FE:  MOVF   4A,W
14FF:  SUBWF  4D,F
1500:  BTFSC  03.0
1501:  GOTO   509
1502:  MOVLW  01
1503:  SUBWF  4E,F
1504:  BTFSC  03.0
1505:  GOTO   509
1506:  SUBWF  4F,F
1507:  BTFSS  03.0
1508:  GOTO   521
1509:  MOVF   49,W
150A:  IORLW  80
150B:  SUBWF  4E,F
150C:  BTFSC  03.0
150D:  GOTO   512
150E:  MOVLW  01
150F:  SUBWF  4F,F
1510:  BTFSS  03.0
1511:  GOTO   521
1512:  INCF   7A,F
1513:  BTFSS  03.2
1514:  GOTO   521
1515:  INCF   79,F
1516:  BTFSS  03.2
1517:  GOTO   521
1518:  INCF   78,F
1519:  BTFSS  03.2
151A:  GOTO   521
151B:  INCF   77,F
151C:  BTFSC  03.2
151D:  GOTO   52B
151E:  RRF    78,F
151F:  RRF    79,F
1520:  RRF    7A,F
1521:  MOVF   45,W
1522:  MOVWF  50
1523:  MOVF   49,W
1524:  XORWF  50,F
1525:  BTFSS  50.7
1526:  GOTO   529
1527:  BSF    78.7
1528:  GOTO   52F
1529:  BCF    78.7
152A:  GOTO   52F
152B:  CLRF   77
152C:  CLRF   78
152D:  CLRF   79
152E:  CLRF   7A
152F:  BCF    03.5
1530:  RETURN
1531:  BTFSC  03.1
1532:  GOTO   536
1533:  MOVLW  D9
1534:  MOVWF  04
1535:  BCF    03.7
1536:  CLRF   77
1537:  CLRF   78
1538:  CLRF   79
1539:  CLRF   7A
153A:  BSF    03.5
153B:  CLRF   59
153C:  CLRF   5A
153D:  CLRF   5B
153E:  CLRF   5C
153F:  MOVF   58,W
1540:  IORWF  57,W
1541:  IORWF  56,W
1542:  IORWF  55,W
1543:  BTFSC  03.2
1544:  GOTO   575
1545:  MOVLW  20
1546:  MOVWF  5D
1547:  BCF    03.0
1548:  RLF    51,F
1549:  RLF    52,F
154A:  RLF    53,F
154B:  RLF    54,F
154C:  RLF    59,F
154D:  RLF    5A,F
154E:  RLF    5B,F
154F:  RLF    5C,F
1550:  MOVF   58,W
1551:  SUBWF  5C,W
1552:  BTFSS  03.2
1553:  GOTO   55E
1554:  MOVF   57,W
1555:  SUBWF  5B,W
1556:  BTFSS  03.2
1557:  GOTO   55E
1558:  MOVF   56,W
1559:  SUBWF  5A,W
155A:  BTFSS  03.2
155B:  GOTO   55E
155C:  MOVF   55,W
155D:  SUBWF  59,W
155E:  BTFSS  03.0
155F:  GOTO   56F
1560:  MOVF   55,W
1561:  SUBWF  59,F
1562:  MOVF   56,W
1563:  BTFSS  03.0
1564:  INCFSZ 56,W
1565:  SUBWF  5A,F
1566:  MOVF   57,W
1567:  BTFSS  03.0
1568:  INCFSZ 57,W
1569:  SUBWF  5B,F
156A:  MOVF   58,W
156B:  BTFSS  03.0
156C:  INCFSZ 58,W
156D:  SUBWF  5C,F
156E:  BSF    03.0
156F:  RLF    77,F
1570:  RLF    78,F
1571:  RLF    79,F
1572:  RLF    7A,F
1573:  DECFSZ 5D,F
1574:  GOTO   547
1575:  MOVF   59,W
1576:  MOVWF  00
1577:  INCF   04,F
1578:  MOVF   5A,W
1579:  MOVWF  00
157A:  INCF   04,F
157B:  MOVF   5B,W
157C:  MOVWF  00
157D:  INCF   04,F
157E:  MOVF   5C,W
157F:  MOVWF  00
1580:  BCF    03.5
1581:  RETURN
1582:  MOVF   04,W
1583:  BSF    03.5
1584:  MOVWF  49
1585:  MOVF   48,W
1586:  MOVWF  4B
1587:  BTFSC  03.2
1588:  GOTO   615
1589:  MOVF   47,W
158A:  MOVWF  54
158B:  MOVF   46,W
158C:  MOVWF  53
158D:  MOVF   45,W
158E:  MOVWF  52
158F:  MOVF   44,W
1590:  MOVWF  51
1591:  CLRF   58
1592:  CLRF   57
1593:  MOVLW  20
1594:  MOVWF  56
1595:  MOVLW  82
1596:  MOVWF  55
1597:  MOVF   51,W
1598:  BTFSC  03.2
1599:  GOTO   607
159A:  MOVWF  59
159B:  MOVF   55,W
159C:  BTFSC  03.2
159D:  GOTO   607
159E:  ADDWF  59,F
159F:  BTFSC  03.0
15A0:  GOTO   5A8
15A1:  MOVLW  7F
15A2:  SUBWF  59,F
15A3:  BTFSS  03.0
15A4:  GOTO   607
15A5:  BTFSC  03.2
15A6:  GOTO   607
15A7:  GOTO   5AC
15A8:  MOVLW  81
15A9:  ADDWF  59,F
15AA:  BTFSC  03.0
15AB:  GOTO   607
15AC:  MOVF   59,W
15AD:  MOVWF  77
15AE:  CLRF   78
15AF:  CLRF   79
15B0:  CLRF   7A
15B1:  MOVF   52,W
15B2:  MOVWF  5D
15B3:  BSF    5D.7
15B4:  MOVF   53,W
15B5:  MOVWF  5C
15B6:  MOVF   54,W
15B7:  MOVWF  5B
15B8:  MOVLW  18
15B9:  MOVWF  59
15BA:  CLRF   5A
15BB:  BTFSS  5B.0
15BC:  GOTO   5D5
15BD:  MOVF   58,W
15BE:  ADDWF  7A,F
15BF:  BTFSS  03.0
15C0:  GOTO   5C7
15C1:  INCF   79,F
15C2:  BTFSS  03.2
15C3:  GOTO   5C7
15C4:  INCF   78,F
15C5:  BTFSC  03.2
15C6:  BSF    5A.7
15C7:  MOVF   57,W
15C8:  ADDWF  79,F
15C9:  BTFSS  03.0
15CA:  GOTO   5CE
15CB:  INCF   78,F
15CC:  BTFSC  03.2
15CD:  BSF    5A.7
15CE:  MOVF   56,W
15CF:  MOVWF  53
15D0:  BSF    53.7
15D1:  MOVF   53,W
15D2:  ADDWF  78,F
15D3:  BTFSC  03.0
15D4:  BSF    5A.7
15D5:  RLF    5A,F
15D6:  RRF    78,F
15D7:  RRF    79,F
15D8:  RRF    7A,F
15D9:  RRF    5D,F
15DA:  RRF    5C,F
15DB:  RRF    5B,F
15DC:  BCF    03.0
15DD:  DECFSZ 59,F
15DE:  GOTO   5BA
15DF:  MOVLW  01
15E0:  ADDWF  77,F
15E1:  BTFSC  03.0
15E2:  GOTO   607
15E3:  BTFSC  78.7
15E4:  GOTO   5EC
15E5:  RLF    5D,F
15E6:  RLF    7A,F
15E7:  RLF    79,F
15E8:  RLF    78,F
15E9:  DECF   77,F
15EA:  BTFSC  03.2
15EB:  GOTO   607
15EC:  BTFSS  5D.7
15ED:  GOTO   5FD
15EE:  INCF   7A,F
15EF:  BTFSS  03.2
15F0:  GOTO   5FD
15F1:  INCF   79,F
15F2:  BTFSS  03.2
15F3:  GOTO   5FD
15F4:  INCF   78,F
15F5:  BTFSS  03.2
15F6:  GOTO   5FD
15F7:  RRF    78,F
15F8:  RRF    79,F
15F9:  RRF    7A,F
15FA:  INCF   77,F
15FB:  BTFSC  03.2
15FC:  GOTO   607
15FD:  MOVF   52,W
15FE:  MOVWF  5A
15FF:  MOVF   56,W
1600:  XORWF  5A,F
1601:  BTFSS  5A.7
1602:  GOTO   605
1603:  BSF    78.7
1604:  GOTO   60B
1605:  BCF    78.7
1606:  GOTO   60B
1607:  CLRF   77
1608:  CLRF   78
1609:  CLRF   79
160A:  CLRF   7A
160B:  MOVF   7A,W
160C:  MOVWF  47
160D:  MOVF   79,W
160E:  MOVWF  46
160F:  MOVF   78,W
1610:  MOVWF  45
1611:  MOVF   77,W
1612:  MOVWF  44
1613:  DECFSZ 4B,F
1614:  GOTO   589
1615:  MOVF   47,W
1616:  MOVWF  54
1617:  MOVF   46,W
1618:  MOVWF  53
1619:  MOVF   45,W
161A:  MOVWF  52
161B:  MOVF   44,W
161C:  MOVWF  51
161D:  MOVF   51,W
161E:  SUBLW  B6
161F:  MOVWF  51
1620:  CLRF   7A
1621:  MOVF   52,W
1622:  MOVWF  55
1623:  BSF    52.7
1624:  BCF    03.0
1625:  RRF    52,F
1626:  RRF    53,F
1627:  RRF    54,F
1628:  RRF    7A,F
1629:  RRF    79,F
162A:  RRF    78,F
162B:  RRF    77,F
162C:  DECFSZ 51,F
162D:  GOTO   624
162E:  BTFSS  55.7
162F:  GOTO   63B
1630:  COMF   77,F
1631:  COMF   78,F
1632:  COMF   79,F
1633:  COMF   7A,F
1634:  INCF   77,F
1635:  BTFSC  03.2
1636:  INCF   78,F
1637:  BTFSC  03.2
1638:  INCF   79,F
1639:  BTFSC  03.2
163A:  INCF   7A,F
163B:  MOVF   7A,W
163C:  MOVWF  47
163D:  MOVF   79,W
163E:  MOVWF  46
163F:  MOVF   78,W
1640:  MOVWF  45
1641:  MOVF   77,W
1642:  MOVWF  44
1643:  BTFSS  47.7
1644:  GOTO   652
1645:  DECF   49,F
1646:  BSF    49.5
1647:  COMF   44,F
1648:  COMF   45,F
1649:  COMF   46,F
164A:  COMF   47,F
164B:  INCF   44,F
164C:  BTFSC  03.2
164D:  INCF   45,F
164E:  BTFSC  03.2
164F:  INCF   46,F
1650:  BTFSC  03.2
1651:  INCF   47,F
1652:  MOVLW  3B
1653:  MOVWF  50
1654:  MOVLW  9A
1655:  MOVWF  4F
1656:  MOVLW  CA
1657:  MOVWF  4E
1658:  CLRF   4D
1659:  MOVLW  0A
165A:  MOVWF  4B
165B:  MOVF   48,W
165C:  BTFSC  03.2
165D:  INCF   49,F
165E:  BSF    03.1
165F:  MOVLW  C4
1660:  MOVWF  04
1661:  BCF    03.7
1662:  MOVF   47,W
1663:  MOVWF  54
1664:  MOVF   46,W
1665:  MOVWF  53
1666:  MOVF   45,W
1667:  MOVWF  52
1668:  MOVF   44,W
1669:  MOVWF  51
166A:  MOVF   50,W
166B:  MOVWF  58
166C:  MOVF   4F,W
166D:  MOVWF  57
166E:  MOVF   4E,W
166F:  MOVWF  56
1670:  MOVF   4D,W
1671:  MOVWF  55
1672:  BCF    03.5
1673:  CALL   531
1674:  MOVF   78,W
1675:  MOVF   77,F
1676:  BTFSS  03.2
1677:  GOTO   68F
1678:  BSF    03.5
1679:  INCF   48,W
167A:  SUBWF  4B,W
167B:  BTFSS  03.2
167C:  GOTO   67F
167D:  BCF    03.5
167E:  GOTO   68F
167F:  MOVF   49,W
1680:  BTFSC  03.2
1681:  GOTO   692
1682:  ANDLW  0F
1683:  SUBWF  4B,W
1684:  BTFSC  03.2
1685:  GOTO   688
1686:  BTFSC  03.0
1687:  GOTO   6DA
1688:  BTFSC  49.7
1689:  GOTO   6DA
168A:  BTFSC  49.6
168B:  GOTO   692
168C:  MOVLW  20
168D:  GOTO   6D0
168E:  BCF    03.5
168F:  MOVLW  20
1690:  BSF    03.5
1691:  ANDWF  49,F
1692:  BTFSS  49.5
1693:  GOTO   6A6
1694:  BCF    49.5
1695:  MOVF   48,W
1696:  BTFSS  03.2
1697:  DECF   49,F
1698:  MOVF   77,W
1699:  MOVWF  49
169A:  MOVLW  2D
169B:  MOVWF  51
169C:  BCF    0A.4
169D:  BSF    0A.3
169E:  BCF    03.5
169F:  CALL   52D
16A0:  BSF    0A.4
16A1:  BCF    0A.3
16A2:  BSF    03.5
16A3:  MOVF   49,W
16A4:  MOVWF  77
16A5:  CLRF   49
16A6:  MOVF   48,W
16A7:  SUBWF  4B,W
16A8:  BTFSS  03.2
16A9:  GOTO   6BA
16AA:  MOVF   77,W
16AB:  MOVWF  49
16AC:  MOVLW  2E
16AD:  MOVWF  51
16AE:  BCF    0A.4
16AF:  BSF    0A.3
16B0:  BCF    03.5
16B1:  CALL   52D
16B2:  BSF    0A.4
16B3:  BCF    0A.3
16B4:  BSF    03.5
16B5:  MOVF   49,W
16B6:  MOVWF  77
16B7:  MOVLW  20
16B8:  ANDWF  49,F
16B9:  MOVLW  00
16BA:  MOVLW  30
16BB:  BTFSS  49.5
16BC:  GOTO   6D0
16BD:  BCF    49.5
16BE:  MOVF   48,W
16BF:  BTFSS  03.2
16C0:  DECF   49,F
16C1:  MOVF   77,W
16C2:  MOVWF  49
16C3:  MOVLW  2D
16C4:  MOVWF  51
16C5:  BCF    0A.4
16C6:  BSF    0A.3
16C7:  BCF    03.5
16C8:  CALL   52D
16C9:  BSF    0A.4
16CA:  BCF    0A.3
16CB:  BSF    03.5
16CC:  MOVF   49,W
16CD:  MOVWF  77
16CE:  CLRF   49
16CF:  MOVLW  30
16D0:  ADDWF  77,F
16D1:  MOVF   77,W
16D2:  MOVWF  51
16D3:  BCF    0A.4
16D4:  BSF    0A.3
16D5:  BCF    03.5
16D6:  CALL   52D
16D7:  BSF    0A.4
16D8:  BCF    0A.3
16D9:  BSF    03.5
16DA:  BCF    03.1
16DB:  MOVF   50,W
16DC:  MOVWF  54
16DD:  MOVF   4F,W
16DE:  MOVWF  53
16DF:  MOVF   4E,W
16E0:  MOVWF  52
16E1:  MOVF   4D,W
16E2:  MOVWF  51
16E3:  CLRF   58
16E4:  CLRF   57
16E5:  CLRF   56
16E6:  MOVLW  0A
16E7:  MOVWF  55
16E8:  BCF    03.5
16E9:  CALL   531
16EA:  MOVF   7A,W
16EB:  BSF    03.5
16EC:  MOVWF  50
16ED:  MOVF   79,W
16EE:  MOVWF  4F
16EF:  MOVF   78,W
16F0:  MOVWF  4E
16F1:  MOVF   77,W
16F2:  MOVWF  4D
16F3:  DECFSZ 4B,F
16F4:  GOTO   65E
16F5:  BCF    03.5
16F6:  RETURN
....................  
.................... #list 
....................  
.................... #device  ADC=10 
.................... #fuses nowdt, put, hs, noprotect, nolvp, nobrownout, nomclr 
.................... #use delay (clock = 20m) 
*
03D7:  MOVLW  C9
03D8:  MOVWF  04
03D9:  BCF    03.7
03DA:  MOVF   00,W
03DB:  BTFSC  03.2
03DC:  GOTO   3EA
03DD:  MOVLW  06
03DE:  MOVWF  78
03DF:  CLRF   77
03E0:  DECFSZ 77,F
03E1:  GOTO   3E0
03E2:  DECFSZ 78,F
03E3:  GOTO   3DF
03E4:  MOVLW  7B
03E5:  MOVWF  77
03E6:  DECFSZ 77,F
03E7:  GOTO   3E6
03E8:  DECFSZ 00,F
03E9:  GOTO   3DD
03EA:  RETURN
.................... const unsigned char ma7doan [16] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e}; 
....................  
.................... void set_up_ports (unsigned int8 porta, unsigned int8 portb, unsigned int8 portc, unsigned int8 portd, unsigned int8 porte) 
.................... { 
....................    set_tris_a (porta); 
....................    set_tris_b (portb); 
....................    set_tris_c (portc); 
....................    set_tris_d (portd); 
....................    set_tris_e (porte); 
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #use I2C (MASTER, I2C1, FAST = 400000, stream = SSD1306_STREAM) 
*
02E5:  BCF    14.7
02E6:  BCF    0C.3
02E7:  BSF    03.5
02E8:  MOVF   57,W
02E9:  BCF    03.5
02EA:  MOVWF  13
02EB:  MOVLW  02
02EC:  BTFSC  14.7
02ED:  GOTO   2F5
02EE:  BTFSS  0C.3
02EF:  GOTO   2EE
02F0:  MOVLW  00
02F1:  BSF    03.5
02F2:  BTFSC  11.6
02F3:  MOVLW  01
02F4:  BCF    03.5
02F5:  MOVWF  78
02F6:  RETURN
*
0431:  BCF    14.6
0432:  BSF    03.5
0433:  BSF    11.3
0434:  BTFSC  11.3
0435:  GOTO   434
0436:  BTFSC  77.0
0437:  BCF    11.5
0438:  BTFSS  77.0
0439:  BSF    11.5
043A:  BSF    11.4
043B:  BTFSC  11.4
043C:  GOTO   43B
043D:  BCF    03.5
043E:  MOVF   13,W
043F:  MOVWF  78
0440:  RETURN
.................... #include <tv_oled.c> 
.................... /****************************************************************************** 
....................  SSD1306 OLED driver for CCS PIC C compiler (SSD1306.c)                       * 
....................                                                                               * 
....................  The driver is for I2C mode only.                                             * 
....................                                                                               * 
....................  http://simple-circuit.com/                                                   * 
....................                                                                               * 
.................... *******************************************************************************/ 
....................  
....................  
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //------------------------------ Definitions ---------------------------------// 
....................  
.................... #define SSD1306_I2C_ADDRESS   0x7A 
....................  
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16 
.................... #define SSD1306_128_64 
.................... #endif 
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16 
....................   #error "Only one SSD1306 display can be specified at once" 
.................... #endif 
....................  
.................... #if defined SSD1306_128_64 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_32 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            32 
.................... #endif 
.................... #if defined SSD1306_96_16 
....................   #define SSD1306_LCDWIDTH             96 
....................   #define SSD1306_LCDHEIGHT            16 
.................... #endif 
....................  
.................... #define SSD1306_SETCONTRAST          0x81 
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4 
.................... #define SSD1306_DISPLAYALLON         0xA5 
.................... #define SSD1306_NORMALDISPLAY        0xA6 
.................... #define SSD1306_INVERTDISPLAY_       0xA7 
.................... #define SSD1306_DISPLAYOFF           0xAE 
.................... #define SSD1306_DISPLAYON            0xAF 
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3 
.................... #define SSD1306_SETCOMPINS           0xDA 
.................... #define SSD1306_SETVCOMDETECT        0xDB 
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5 
.................... #define SSD1306_SETPRECHARGE         0xD9 
.................... #define SSD1306_SETMULTIPLEX         0xA8 
.................... #define SSD1306_SETLOWCOLUMN         0x00 
.................... #define SSD1306_SETHIGHCOLUMN        0x10 
.................... #define SSD1306_SETSTARTLINE         0x40 
.................... #define SSD1306_MEMORYMODE           0x20 
.................... #define SSD1306_COLUMNADDR           0x21 
.................... #define SSD1306_PAGEADDR             0x22 
.................... #define SSD1306_COMSCANINC           0xC0 
.................... #define SSD1306_COMSCANDEC           0xC8 
.................... #define SSD1306_SEGREMAP             0xA0 
.................... #define SSD1306_CHARGEPUMP           0x8D 
.................... #define SSD1306_EXTERNALVCC          0x01 
.................... #define SSD1306_SWITCHCAPVCC         0x02 
....................  
.................... // Scrolling #defines 
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F 
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E 
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A 
....................  
....................  
.................... uint8_t _i2caddr, _vccstate, x_pos = 1, y_pos = 1; 
....................  
.................... //--------------------------------------------------------------------------// 
....................  
.................... int1 wrap = TRUE; 
.................... char degree[] = {0, 7, 5, 7, 0};    // degree symbol char 
*
1ADF:  BCF    03.6
1AE0:  CLRF   26
1AE1:  MOVLW  07
1AE2:  MOVWF  27
1AE3:  MOVLW  05
1AE4:  MOVWF  28
1AE5:  MOVLW  07
1AE6:  MOVWF  29
1AE7:  CLRF   2A
....................  
.................... const char Font[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x5F, 0x00, 0x00, 
.................... 0x00, 0x07, 0x00, 0x07, 0x00, 
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14, 
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12, 
.................... 0x23, 0x13, 0x08, 0x64, 0x62, 
.................... 0x36, 0x49, 0x56, 0x20, 0x50, 
.................... 0x00, 0x08, 0x07, 0x03, 0x00, 
.................... 0x00, 0x1C, 0x22, 0x41, 0x00, 
.................... 0x00, 0x41, 0x22, 0x1C, 0x00, 
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
.................... 0x08, 0x08, 0x3E, 0x08, 0x08, 
.................... 0x00, 0x80, 0x70, 0x30, 0x00, 
.................... 0x08, 0x08, 0x08, 0x08, 0x08, 
.................... 0x00, 0x00, 0x60, 0x60, 0x00, 
.................... 0x20, 0x10, 0x08, 0x04, 0x02, 
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E, 
.................... 0x00, 0x42, 0x7F, 0x40, 0x00, 
.................... 0x72, 0x49, 0x49, 0x49, 0x46, 
.................... 0x21, 0x41, 0x49, 0x4D, 0x33, 
.................... 0x18, 0x14, 0x12, 0x7F, 0x10, 
.................... 0x27, 0x45, 0x45, 0x45, 0x39, 
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31, 
.................... 0x41, 0x21, 0x11, 0x09, 0x07, 
.................... 0x36, 0x49, 0x49, 0x49, 0x36, 
.................... 0x46, 0x49, 0x49, 0x29, 0x1E, 
.................... 0x00, 0x00, 0x14, 0x00, 0x00, 
.................... 0x00, 0x40, 0x34, 0x00, 0x00, 
.................... 0x00, 0x08, 0x14, 0x22, 0x41, 
.................... 0x14, 0x14, 0x14, 0x14, 0x14, 
.................... 0x00, 0x41, 0x22, 0x14, 0x08, 
.................... 0x02, 0x01, 0x59, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E, 
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x36, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x22, 
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x41, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x01, 
.................... 0x3E, 0x41, 0x41, 0x51, 0x73, 
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F, 
.................... 0x00, 0x41, 0x7F, 0x41, 0x00, 
.................... 0x20, 0x40, 0x41, 0x3F, 0x01, 
.................... 0x7F, 0x08, 0x14, 0x22, 0x41, 
.................... 0x7F, 0x40, 0x40, 0x40, 0x40, 
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E, 
.................... 0x7F, 0x09, 0x19, 0x29, 0x46 
.................... }; 
.................... const char Font2[] = { 
.................... 0x26, 0x49, 0x49, 0x49, 0x32, 
.................... 0x03, 0x01, 0x7F, 0x01, 0x03, 
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F, 
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F, 
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F, 
.................... 0x63, 0x14, 0x08, 0x14, 0x63, 
.................... 0x03, 0x04, 0x78, 0x04, 0x03, 
.................... 0x61, 0x59, 0x49, 0x4D, 0x43, 
.................... 0x00, 0x7F, 0x41, 0x41, 0x41, 
.................... 0x02, 0x04, 0x08, 0x10, 0x20, 
.................... 0x00, 0x41, 0x41, 0x41, 0x7F, 
.................... 0x04, 0x02, 0x01, 0x02, 0x04, 
.................... 0x40, 0x40, 0x40, 0x40, 0x40, 
.................... 0x00, 0x03, 0x07, 0x08, 0x00, 
.................... 0x20, 0x54, 0x54, 0x78, 0x40, 
.................... 0x7F, 0x28, 0x44, 0x44, 0x38, 
.................... 0x38, 0x44, 0x44, 0x44, 0x28, 
.................... 0x38, 0x44, 0x44, 0x28, 0x7F, 
.................... 0x38, 0x54, 0x54, 0x54, 0x18, 
.................... 0x00, 0x08, 0x7E, 0x09, 0x02, 
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
.................... 0x7F, 0x08, 0x04, 0x04, 0x78, 
.................... 0x00, 0x44, 0x7D, 0x40, 0x00, 
.................... 0x20, 0x40, 0x40, 0x3D, 0x00, 
.................... 0x7F, 0x10, 0x28, 0x44, 0x00, 
.................... 0x00, 0x41, 0x7F, 0x40, 0x00, 
.................... 0x7C, 0x04, 0x78, 0x04, 0x78, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x78, 
.................... 0x38, 0x44, 0x44, 0x44, 0x38, 
.................... 0xFC, 0x18, 0x24, 0x24, 0x18, 
.................... 0x18, 0x24, 0x24, 0x18, 0xFC, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x08, 
.................... 0x48, 0x54, 0x54, 0x54, 0x24, 
.................... 0x04, 0x04, 0x3F, 0x44, 0x24, 
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C, 
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C, 
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C, 
.................... 0x44, 0x28, 0x10, 0x28, 0x44, 
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C, 
.................... 0x44, 0x64, 0x54, 0x4C, 0x44, 
.................... 0x00, 0x08, 0x36, 0x41, 0x00, 
.................... 0x00, 0x00, 0x77, 0x00, 0x00, 
.................... 0x00, 0x41, 0x36, 0x08, 0x00, 
.................... 0x02, 0x01, 0x02, 0x04, 0x02 
.................... }; 
....................  
....................  
.................... void ssd1306_command(uint8_t c) { 
*
02F7:  BSF    03.5
02F8:  CLRF   56
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0 
....................     I2C_Start(SSD1306_STREAM); 
02F9:  BSF    11.0
02FA:  BTFSC  11.0
02FB:  GOTO   2FA
....................     I2C_Write(SSD1306_STREAM, _i2caddr); 
02FC:  BCF    03.5
02FD:  MOVF   21,W
02FE:  BSF    03.5
02FF:  MOVWF  57
0300:  BCF    03.5
0301:  CALL   2E5
....................     I2C_Write(SSD1306_STREAM, control); 
0302:  BSF    03.5
0303:  MOVF   56,W
0304:  MOVWF  57
0305:  BCF    03.5
0306:  CALL   2E5
....................     I2C_Write(SSD1306_STREAM, c); 
0307:  BSF    03.5
0308:  MOVF   55,W
0309:  MOVWF  57
030A:  BCF    03.5
030B:  CALL   2E5
....................     I2C_Stop(SSD1306_STREAM); 
030C:  BSF    03.5
030D:  BSF    11.2
030E:  BTFSC  11.2
030F:  GOTO   30E
0310:  BCF    03.5
0311:  RETURN
.................... } 
....................  
.................... void oled_init(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) { 
....................   _vccstate = vccstate; 
0312:  BSF    03.5
0313:  MOVF   44,W
0314:  BCF    03.5
0315:  MOVWF  22
....................   _i2caddr  = i2caddr; 
0316:  BSF    03.5
0317:  MOVF   45,W
0318:  BCF    03.5
0319:  MOVWF  21
....................   #ifdef SSD1306_RST 
....................     output_low(SSD1306_RST); 
....................     output_drive(SSD1306_RST); 
....................     delay_ms(10); 
....................     output_high(SSD1306_RST); 
....................   #endif 
....................   // Init sequence 
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE 
031A:  MOVLW  AE
031B:  BSF    03.5
031C:  MOVWF  55
031D:  BCF    03.5
031E:  CALL   2F7
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5 
031F:  MOVLW  D5
0320:  BSF    03.5
0321:  MOVWF  55
0322:  BCF    03.5
0323:  CALL   2F7
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80 
0324:  MOVLW  80
0325:  BSF    03.5
0326:  MOVWF  55
0327:  BCF    03.5
0328:  CALL   2F7
....................  
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8 
0329:  MOVLW  A8
032A:  BSF    03.5
032B:  MOVWF  55
032C:  BCF    03.5
032D:  CALL   2F7
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1); 
032E:  MOVLW  3F
032F:  BSF    03.5
0330:  MOVWF  55
0331:  BCF    03.5
0332:  CALL   2F7
....................  
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 
0333:  MOVLW  D3
0334:  BSF    03.5
0335:  MOVWF  55
0336:  BCF    03.5
0337:  CALL   2F7
....................   ssd1306_command(0x0);                                   // no offset 
0338:  BSF    03.5
0339:  CLRF   55
033A:  BCF    03.5
033B:  CALL   2F7
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0 
033C:  MOVLW  40
033D:  BSF    03.5
033E:  MOVWF  55
033F:  BCF    03.5
0340:  CALL   2F7
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D 
0341:  MOVLW  8D
0342:  BSF    03.5
0343:  MOVWF  55
0344:  BCF    03.5
0345:  CALL   2F7
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0346:  BSF    03.5
0347:  DECFSZ 44,W
0348:  GOTO   34F
....................     { ssd1306_command(0x10); } 
0349:  MOVLW  10
034A:  MOVWF  55
034B:  BCF    03.5
034C:  CALL   2F7
034D:  GOTO   353
034E:  BSF    03.5
....................   else 
....................     { ssd1306_command(0x14); } 
034F:  MOVLW  14
0350:  MOVWF  55
0351:  BCF    03.5
0352:  CALL   2F7
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20 
0353:  MOVLW  20
0354:  BSF    03.5
0355:  MOVWF  55
0356:  BCF    03.5
0357:  CALL   2F7
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108 
0358:  BSF    03.5
0359:  CLRF   55
035A:  BCF    03.5
035B:  CALL   2F7
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1); 
035C:  MOVLW  A1
035D:  BSF    03.5
035E:  MOVWF  55
035F:  BCF    03.5
0360:  CALL   2F7
....................   ssd1306_command(SSD1306_COMSCANDEC); 
0361:  MOVLW  C8
0362:  BSF    03.5
0363:  MOVWF  55
0364:  BCF    03.5
0365:  CALL   2F7
....................  
....................  #if defined SSD1306_128_32 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x02); 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   ssd1306_command(0x8F); 
....................  
.................... #elif defined SSD1306_128_64 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
0366:  MOVLW  DA
0367:  BSF    03.5
0368:  MOVWF  55
0369:  BCF    03.5
036A:  CALL   2F7
....................   ssd1306_command(0x12); 
036B:  MOVLW  12
036C:  BSF    03.5
036D:  MOVWF  55
036E:  BCF    03.5
036F:  CALL   2F7
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
0370:  MOVLW  81
0371:  BSF    03.5
0372:  MOVWF  55
0373:  BCF    03.5
0374:  CALL   2F7
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0375:  BSF    03.5
0376:  DECFSZ 44,W
0377:  GOTO   37E
....................     { ssd1306_command(0x9F); } 
0378:  MOVLW  9F
0379:  MOVWF  55
037A:  BCF    03.5
037B:  CALL   2F7
037C:  GOTO   382
037D:  BSF    03.5
....................   else 
....................     { ssd1306_command(0xCF); } 
037E:  MOVLW  CF
037F:  MOVWF  55
0380:  BCF    03.5
0381:  CALL   2F7
....................  
.................... #elif defined SSD1306_96_16 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x2);   //ada x12 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   if (vccstate == SSD1306_EXTERNALVCC) 
....................     { ssd1306_command(0x10); } 
....................   else 
....................     { ssd1306_command(0xAF); } 
....................  
.................... #endif 
....................  
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 
0382:  MOVLW  D9
0383:  BSF    03.5
0384:  MOVWF  55
0385:  BCF    03.5
0386:  CALL   2F7
....................   if (vccstate == SSD1306_EXTERNALVCC) 
0387:  BSF    03.5
0388:  DECFSZ 44,W
0389:  GOTO   390
....................     { ssd1306_command(0x22); } 
038A:  MOVLW  22
038B:  MOVWF  55
038C:  BCF    03.5
038D:  CALL   2F7
038E:  GOTO   394
038F:  BSF    03.5
....................   else 
....................     { ssd1306_command(0xF1); } 
0390:  MOVLW  F1
0391:  MOVWF  55
0392:  BCF    03.5
0393:  CALL   2F7
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB 
0394:  MOVLW  DB
0395:  BSF    03.5
0396:  MOVWF  55
0397:  BCF    03.5
0398:  CALL   2F7
....................   ssd1306_command(0x40); 
0399:  MOVLW  40
039A:  BSF    03.5
039B:  MOVWF  55
039C:  BCF    03.5
039D:  CALL   2F7
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 
039E:  MOVLW  A4
039F:  BSF    03.5
03A0:  MOVWF  55
03A1:  BCF    03.5
03A2:  CALL   2F7
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 
03A3:  MOVLW  A6
03A4:  BSF    03.5
03A5:  MOVWF  55
03A6:  BCF    03.5
03A7:  CALL   2F7
....................  
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
03A8:  MOVLW  2E
03A9:  BSF    03.5
03AA:  MOVWF  55
03AB:  BCF    03.5
03AC:  CALL   2F7
....................  
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel 
03AD:  MOVLW  AF
03AE:  BSF    03.5
03AF:  MOVWF  55
03B0:  BCF    03.5
03B1:  CALL   2F7
03B2:  BSF    0A.3
03B3:  BSF    0A.4
03B4:  GOTO   2FA (RETURN)
.................... } 
....................  
.................... void OLED_StartScrollRight(uint8_t start, uint8_t stop) { 
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start);  // start page 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop);   // end page 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollLeft(uint8_t start, uint8_t stop) { 
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollDiagRight(uint8_t start, uint8_t stop) { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StartScrollDiagLeft(uint8_t start, uint8_t stop) { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_StopScroll(void) { 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
.................... } 
....................  
.................... void OLED_Dim(int1 dim) { 
....................   uint8_t contrast; 
....................   if (dim) 
....................     contrast = 0; // Dimmed display 
....................   else { 
....................     if (_vccstate == SSD1306_EXTERNALVCC) 
....................       contrast = 0x9F; 
....................     else 
....................       contrast = 0xCF; 
....................   } 
....................   // the range of contrast to too small to be really useful 
....................   // it is useful to dim the display 
....................   ssd1306_command(SSD1306_SETCONTRAST); 
....................   ssd1306_command(contrast); 
.................... } 
....................  
.................... void OLED_SetTextWrap(int1 w) { 
....................   wrap = w; 
.................... } 
....................  
.................... void OLED_InvertDisplay(int1 i) { 
....................   if (i) 
....................     ssd1306_command(SSD1306_INVERTDISPLAY_); 
....................   else 
....................     ssd1306_command(SSD1306_NORMALDISPLAY); 
.................... } 
....................  
.................... void OLED_Goto_XY(uint8_t x, uint8_t y) { 
....................   if((x > 21) || y > 8) 
*
0780:  BSF    03.5
0781:  MOVF   45,W
0782:  SUBLW  15
0783:  BTFSS  03.0
0784:  GOTO   788
0785:  MOVF   46,W
0786:  SUBLW  08
0787:  BTFSS  03.0
....................     return; 
0788:  GOTO   791
....................   x_pos = x; 
0789:  MOVF   45,W
078A:  BCF    03.5
078B:  MOVWF  23
....................   y_pos = y; 
078C:  BSF    03.5
078D:  MOVF   46,W
078E:  BCF    03.5
078F:  MOVWF  24
0790:  BSF    03.5
0791:  BCF    03.5
0792:  RETURN
.................... } 
....................  
.................... void OLED_printf(uint8_t c) { 
....................   uint8_t font_c; 
....................   if((c < ' ') || (c > '~')) 
*
0D2D:  BSF    03.5
0D2E:  MOVF   51,W
0D2F:  SUBLW  1F
0D30:  BTFSC  03.0
0D31:  GOTO   536
0D32:  MOVF   51,W
0D33:  SUBLW  7E
0D34:  BTFSC  03.0
0D35:  GOTO   538
....................     c = '?'; 
0D36:  MOVLW  3F
0D37:  MOVWF  51
....................   ssd1306_command(SSD1306_COLUMNADDR); 
0D38:  MOVLW  21
0D39:  MOVWF  55
0D3A:  BCF    0A.3
0D3B:  BCF    03.5
0D3C:  CALL   2F7
0D3D:  BSF    0A.3
....................   ssd1306_command(6 * (x_pos - 1)); 
0D3E:  MOVLW  01
0D3F:  SUBWF  23,W
0D40:  BSF    03.5
0D41:  MOVWF  54
0D42:  MOVLW  06
0D43:  MOVWF  56
0D44:  MOVF   54,W
0D45:  MOVWF  57
0D46:  BCF    0A.3
0D47:  BCF    03.5
0D48:  CALL   47F
0D49:  BSF    0A.3
0D4A:  MOVF   78,W
0D4B:  BSF    03.5
0D4C:  MOVWF  54
0D4D:  MOVWF  55
0D4E:  BCF    0A.3
0D4F:  BCF    03.5
0D50:  CALL   2F7
0D51:  BSF    0A.3
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset) 
0D52:  MOVLW  01
0D53:  SUBWF  23,W
0D54:  BSF    03.5
0D55:  MOVWF  54
0D56:  MOVLW  06
0D57:  MOVWF  56
0D58:  MOVF   54,W
0D59:  MOVWF  57
0D5A:  BCF    0A.3
0D5B:  BCF    03.5
0D5C:  CALL   47F
0D5D:  BSF    0A.3
0D5E:  MOVLW  04
0D5F:  ADDWF  78,W
0D60:  BSF    03.5
0D61:  MOVWF  54
0D62:  MOVWF  55
0D63:  BCF    0A.3
0D64:  BCF    03.5
0D65:  CALL   2F7
0D66:  BSF    0A.3
....................  
....................   ssd1306_command(SSD1306_PAGEADDR); 
0D67:  MOVLW  22
0D68:  BSF    03.5
0D69:  MOVWF  55
0D6A:  BCF    0A.3
0D6B:  BCF    03.5
0D6C:  CALL   2F7
0D6D:  BSF    0A.3
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset) 
0D6E:  MOVLW  01
0D6F:  SUBWF  24,W
0D70:  BSF    03.5
0D71:  MOVWF  54
0D72:  MOVWF  55
0D73:  BCF    0A.3
0D74:  BCF    03.5
0D75:  CALL   2F7
0D76:  BSF    0A.3
....................   ssd1306_command(y_pos - 1); // Page end address 
0D77:  MOVLW  01
0D78:  SUBWF  24,W
0D79:  BSF    03.5
0D7A:  MOVWF  54
0D7B:  MOVWF  55
0D7C:  BCF    0A.3
0D7D:  BCF    03.5
0D7E:  CALL   2F7
0D7F:  BSF    0A.3
....................    
....................   I2C_Start(SSD1306_STREAM); 
0D80:  BSF    03.5
0D81:  BSF    11.0
0D82:  BTFSC  11.0
0D83:  GOTO   582
....................   I2C_Write(SSD1306_STREAM, _i2caddr); 
0D84:  BCF    03.5
0D85:  MOVF   21,W
0D86:  BSF    03.5
0D87:  MOVWF  57
0D88:  BCF    0A.3
0D89:  BCF    03.5
0D8A:  CALL   2E5
0D8B:  BSF    0A.3
....................   I2C_Write(SSD1306_STREAM, 0x40); 
0D8C:  MOVLW  40
0D8D:  BSF    03.5
0D8E:  MOVWF  57
0D8F:  BCF    0A.3
0D90:  BCF    03.5
0D91:  CALL   2E5
0D92:  BSF    0A.3
....................    
....................   for(uint8_t i = 0; i < 5; i++ ) { 
0D93:  BSF    03.5
0D94:  CLRF   53
0D95:  MOVF   53,W
0D96:  SUBLW  04
0D97:  BTFSS  03.0
0D98:  GOTO   5CF
....................     if(c < 'S') 
0D99:  MOVF   51,W
0D9A:  SUBLW  52
0D9B:  BTFSS  03.0
0D9C:  GOTO   5B2
....................       font_c = font[(c - 32) * 5 + i]; 
0D9D:  MOVLW  20
0D9E:  SUBWF  51,W
0D9F:  MOVWF  55
0DA0:  MOVWF  56
0DA1:  MOVLW  05
0DA2:  MOVWF  57
0DA3:  BCF    0A.3
0DA4:  BCF    03.5
0DA5:  CALL   47F
0DA6:  BSF    0A.3
0DA7:  BSF    03.5
0DA8:  MOVF   53,W
0DA9:  ADDWF  78,W
0DAA:  BCF    0A.3
0DAB:  BCF    03.5
0DAC:  CALL   004
0DAD:  BSF    0A.3
0DAE:  MOVWF  78
0DAF:  BSF    03.5
0DB0:  MOVWF  52
0DB1:  GOTO   5C6
....................     else 
....................       font_c = font2[(c - 'S') * 5 + i]; 
0DB2:  MOVLW  53
0DB3:  SUBWF  51,W
0DB4:  MOVWF  55
0DB5:  MOVWF  56
0DB6:  MOVLW  05
0DB7:  MOVWF  57
0DB8:  BCF    0A.3
0DB9:  BCF    03.5
0DBA:  CALL   47F
0DBB:  BSF    0A.3
0DBC:  BSF    03.5
0DBD:  MOVF   53,W
0DBE:  ADDWF  78,W
0DBF:  BCF    0A.3
0DC0:  BCF    03.5
0DC1:  CALL   10A
0DC2:  BSF    0A.3
0DC3:  MOVWF  78
0DC4:  BSF    03.5
0DC5:  MOVWF  52
....................    
....................     I2C_Write(SSD1306_STREAM, font_c); 
0DC6:  MOVF   52,W
0DC7:  MOVWF  57
0DC8:  BCF    0A.3
0DC9:  BCF    03.5
0DCA:  CALL   2E5
0DCB:  BSF    0A.3
0DCC:  BSF    03.5
0DCD:  INCF   53,F
0DCE:  GOTO   595
....................   } 
....................   I2C_Stop(SSD1306_STREAM); 
0DCF:  BSF    11.2
0DD0:  BTFSC  11.2
0DD1:  GOTO   5D0
....................  
....................   x_pos = x_pos % 21 + 1; 
0DD2:  BCF    03.5
0DD3:  MOVF   23,W
0DD4:  BSF    03.5
0DD5:  MOVWF  54
0DD6:  MOVLW  15
0DD7:  MOVWF  55
0DD8:  BCF    0A.3
0DD9:  BCF    03.5
0DDA:  CALL   63D
0DDB:  BSF    0A.3
0DDC:  MOVLW  01
0DDD:  ADDWF  77,W
0DDE:  MOVWF  23
....................   if (wrap && (x_pos == 1)) 
0DDF:  BTFSS  25.0
0DE0:  GOTO   5E7
0DE1:  DECFSZ 23,W
0DE2:  GOTO   5E7
....................     y_pos = y_pos % 8 + 1; 
0DE3:  MOVF   24,W
0DE4:  ANDLW  07
0DE5:  ADDLW  01
0DE6:  MOVWF  24
0DE7:  RETURN
....................  
.................... } 
....................  
.................... void OLED_PutCustomC(char *c) { 
....................   uint8_t line; 
....................   ssd1306_command(SSD1306_COLUMNADDR); 
*
0E5C:  MOVLW  21
0E5D:  BSF    03.5
0E5E:  MOVWF  55
0E5F:  BCF    0A.3
0E60:  BCF    03.5
0E61:  CALL   2F7
0E62:  BSF    0A.3
....................   ssd1306_command(6 * (x_pos - 1)); 
0E63:  MOVLW  01
0E64:  SUBWF  23,W
0E65:  BSF    03.5
0E66:  MOVWF  48
0E67:  MOVLW  06
0E68:  MOVWF  56
0E69:  MOVF   48,W
0E6A:  MOVWF  57
0E6B:  BCF    0A.3
0E6C:  BCF    03.5
0E6D:  CALL   47F
0E6E:  BSF    0A.3
0E6F:  MOVF   78,W
0E70:  BSF    03.5
0E71:  MOVWF  48
0E72:  MOVWF  55
0E73:  BCF    0A.3
0E74:  BCF    03.5
0E75:  CALL   2F7
0E76:  BSF    0A.3
....................   ssd1306_command(6 * (x_pos - 1) + 4); // Column end address (127 = reset) 
0E77:  MOVLW  01
0E78:  SUBWF  23,W
0E79:  BSF    03.5
0E7A:  MOVWF  48
0E7B:  MOVLW  06
0E7C:  MOVWF  56
0E7D:  MOVF   48,W
0E7E:  MOVWF  57
0E7F:  BCF    0A.3
0E80:  BCF    03.5
0E81:  CALL   47F
0E82:  BSF    0A.3
0E83:  MOVLW  04
0E84:  ADDWF  78,W
0E85:  BSF    03.5
0E86:  MOVWF  48
0E87:  MOVWF  55
0E88:  BCF    0A.3
0E89:  BCF    03.5
0E8A:  CALL   2F7
0E8B:  BSF    0A.3
....................  
....................   ssd1306_command(SSD1306_PAGEADDR); 
0E8C:  MOVLW  22
0E8D:  BSF    03.5
0E8E:  MOVWF  55
0E8F:  BCF    0A.3
0E90:  BCF    03.5
0E91:  CALL   2F7
0E92:  BSF    0A.3
....................   ssd1306_command(y_pos - 1); // Page start address (0 = reset) 
0E93:  MOVLW  01
0E94:  SUBWF  24,W
0E95:  BSF    03.5
0E96:  MOVWF  48
0E97:  MOVWF  55
0E98:  BCF    0A.3
0E99:  BCF    03.5
0E9A:  CALL   2F7
0E9B:  BSF    0A.3
....................   ssd1306_command(y_pos - 1); // Page end address 
0E9C:  MOVLW  01
0E9D:  SUBWF  24,W
0E9E:  BSF    03.5
0E9F:  MOVWF  48
0EA0:  MOVWF  55
0EA1:  BCF    0A.3
0EA2:  BCF    03.5
0EA3:  CALL   2F7
0EA4:  BSF    0A.3
....................    
....................   I2C_Start(SSD1306_STREAM); 
0EA5:  BSF    03.5
0EA6:  BSF    11.0
0EA7:  BTFSC  11.0
0EA8:  GOTO   6A7
....................   I2C_Write(SSD1306_STREAM, _i2caddr); 
0EA9:  BCF    03.5
0EAA:  MOVF   21,W
0EAB:  BSF    03.5
0EAC:  MOVWF  57
0EAD:  BCF    0A.3
0EAE:  BCF    03.5
0EAF:  CALL   2E5
0EB0:  BSF    0A.3
....................   I2C_Write(SSD1306_STREAM, 0x40); 
0EB1:  MOVLW  40
0EB2:  BSF    03.5
0EB3:  MOVWF  57
0EB4:  BCF    0A.3
0EB5:  BCF    03.5
0EB6:  CALL   2E5
0EB7:  BSF    0A.3
....................    
....................   for(uint8_t i = 0; i < 5; i++ ) { 
0EB8:  BSF    03.5
0EB9:  CLRF   47
0EBA:  MOVF   47,W
0EBB:  SUBLW  04
0EBC:  BTFSS  03.0
0EBD:  GOTO   6CF
....................     line = c[i]; 
0EBE:  MOVF   47,W
0EBF:  ADDWF  44,W
0EC0:  MOVWF  04
0EC1:  BCF    03.7
0EC2:  BTFSC  45.0
0EC3:  BSF    03.7
0EC4:  MOVF   00,W
0EC5:  MOVWF  46
....................     I2C_Write(SSD1306_STREAM, line); 
0EC6:  MOVF   46,W
0EC7:  MOVWF  57
0EC8:  BCF    0A.3
0EC9:  BCF    03.5
0ECA:  CALL   2E5
0ECB:  BSF    0A.3
0ECC:  BSF    03.5
0ECD:  INCF   47,F
0ECE:  GOTO   6BA
....................   } 
....................   I2C_Stop(SSD1306_STREAM); 
0ECF:  BSF    11.2
0ED0:  BTFSC  11.2
0ED1:  GOTO   6D0
....................  
....................   x_pos = x_pos % 21 + 1; 
0ED2:  BCF    03.5
0ED3:  MOVF   23,W
0ED4:  BSF    03.5
0ED5:  MOVWF  54
0ED6:  MOVLW  15
0ED7:  MOVWF  55
0ED8:  BCF    0A.3
0ED9:  BCF    03.5
0EDA:  CALL   63D
0EDB:  BSF    0A.3
0EDC:  MOVLW  01
0EDD:  ADDWF  77,W
0EDE:  MOVWF  23
....................   if (wrap && (x_pos == 1)) 
0EDF:  BTFSS  25.0
0EE0:  GOTO   6E7
0EE1:  DECFSZ 23,W
0EE2:  GOTO   6E7
....................     y_pos = y_pos % 8 + 1; 
0EE3:  MOVF   24,W
0EE4:  ANDLW  07
0EE5:  ADDLW  01
0EE6:  MOVWF  24
0EE7:  RETURN
.................... } 
....................  
.................... void OLED_ClearDisplay() { 
....................  
....................   ssd1306_command(SSD1306_COLUMNADDR); 
*
053B:  MOVLW  21
053C:  BSF    03.5
053D:  MOVWF  55
053E:  BCF    03.5
053F:  CALL   2F7
....................   ssd1306_command(0);    // Column start address 
0540:  BSF    03.5
0541:  CLRF   55
0542:  BCF    03.5
0543:  CALL   2F7
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32 
....................   ssd1306_command(127);  // Column end address 
0544:  MOVLW  7F
0545:  BSF    03.5
0546:  MOVWF  55
0547:  BCF    03.5
0548:  CALL   2F7
....................   #else 
....................     ssd1306_command(95); // Column end address 
....................   #endif 
....................  
....................   ssd1306_command(SSD1306_PAGEADDR); 
0549:  MOVLW  22
054A:  BSF    03.5
054B:  MOVWF  55
054C:  BCF    03.5
054D:  CALL   2F7
....................   ssd1306_command(0);   // Page start address (0 = reset) 
054E:  BSF    03.5
054F:  CLRF   55
0550:  BCF    03.5
0551:  CALL   2F7
....................   #if defined SSD1306_128_64 
....................   ssd1306_command(7);   // Page end address 
0552:  MOVLW  07
0553:  BSF    03.5
0554:  MOVWF  55
0555:  BCF    03.5
0556:  CALL   2F7
....................   #elif defined SSD1306_128_32 
....................   ssd1306_command(3);   // Page end address 
....................   #elif defined SSD1306_96_16 
....................   ssd1306_command(1);   // Page end address 
....................   #endif 
....................  
....................   I2C_Start(SSD1306_STREAM); 
0557:  BSF    03.5
0558:  BSF    11.0
0559:  BTFSC  11.0
055A:  GOTO   559
....................   I2C_Write(SSD1306_STREAM, _i2caddr); 
055B:  BCF    03.5
055C:  MOVF   21,W
055D:  BSF    03.5
055E:  MOVWF  57
055F:  BCF    03.5
0560:  CALL   2E5
....................   I2C_Write(SSD1306_STREAM, 0x40); 
0561:  MOVLW  40
0562:  BSF    03.5
0563:  MOVWF  57
0564:  BCF    03.5
0565:  CALL   2E5
....................  
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ ) 
0566:  BSF    03.5
0567:  CLRF   45
0568:  CLRF   44
0569:  MOVF   45,W
056A:  SUBLW  03
056B:  BTFSS  03.0
056C:  GOTO   575
....................     I2C_Write(SSD1306_STREAM, 0); 
056D:  CLRF   57
056E:  BCF    03.5
056F:  CALL   2E5
0570:  BSF    03.5
0571:  INCF   44,F
0572:  BTFSC  03.2
0573:  INCF   45,F
0574:  GOTO   569
....................  
....................   I2C_Stop(SSD1306_STREAM); 
0575:  BSF    11.2
0576:  BTFSC  11.2
0577:  GOTO   576
0578:  BCF    03.5
....................  
.................... } 
....................  
.................... void OLED_FillScreen() { 
....................  
....................   ssd1306_command(SSD1306_COLUMNADDR); 
....................   ssd1306_command(0);    // Column start address 
....................   #if defined SSD1306_128_64 || defined SSD1306_128_32 
....................   ssd1306_command(127);  // Column end address 
....................   #else 
....................     ssd1306_command(95); // Column end address 
....................   #endif 
....................  
....................   ssd1306_command(SSD1306_PAGEADDR); 
....................   ssd1306_command(0);   // Page start address (0 = reset) 
....................   #if defined SSD1306_128_64 
....................   ssd1306_command(7);   // Page end address 
....................   #elif defined SSD1306_128_32 
....................   ssd1306_command(3);   // Page end address 
....................   #elif defined SSD1306_96_16 
....................   ssd1306_command(1);   // Page end address 
....................   #endif 
....................  
....................   I2C_Start(SSD1306_STREAM); 
....................   I2C_Write(SSD1306_STREAM, _i2caddr); 
....................   I2C_Write(SSD1306_STREAM, 0x40); 
....................  
....................   for(uint16_t i = 0; i < SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8; i++ ) 
....................     I2C_Write(SSD1306_STREAM, 0xFF); 
....................  
....................   I2C_Stop(SSD1306_STREAM); 
....................  
.................... } 
....................  
.................... #include <tv_ds1307.c> 
.................... unsigned int8 second, minute, hour, date, month, year, day; 
....................  
.................... void convert_data() 
.................... { 
....................    second = (second >> 4) * 10 + (second & 0x0F); 
*
04A6:  SWAPF  2B,W
04A7:  MOVWF  77
04A8:  MOVLW  0F
04A9:  ANDWF  77,F
04AA:  MOVF   77,W
04AB:  BSF    03.5
04AC:  MOVWF  45
04AD:  MOVWF  56
04AE:  MOVLW  0A
04AF:  MOVWF  57
04B0:  BCF    03.5
04B1:  CALL   47F
04B2:  MOVF   78,W
04B3:  BSF    03.5
04B4:  MOVWF  44
04B5:  BCF    03.5
04B6:  MOVF   2B,W
04B7:  ANDLW  0F
04B8:  BSF    03.5
04B9:  ADDWF  44,W
04BA:  BCF    03.5
04BB:  MOVWF  2B
....................    minute = (minute >> 4) * 10 + (minute & 0x0F); 
04BC:  SWAPF  2C,W
04BD:  MOVWF  77
04BE:  MOVLW  0F
04BF:  ANDWF  77,F
04C0:  MOVF   77,W
04C1:  BSF    03.5
04C2:  MOVWF  45
04C3:  MOVWF  56
04C4:  MOVLW  0A
04C5:  MOVWF  57
04C6:  BCF    03.5
04C7:  CALL   47F
04C8:  MOVF   78,W
04C9:  BSF    03.5
04CA:  MOVWF  44
04CB:  BCF    03.5
04CC:  MOVF   2C,W
04CD:  ANDLW  0F
04CE:  BSF    03.5
04CF:  ADDWF  44,W
04D0:  BCF    03.5
04D1:  MOVWF  2C
....................    hour = (hour >> 4) * 10 + (hour & 0x0F); 
04D2:  SWAPF  2D,W
04D3:  MOVWF  77
04D4:  MOVLW  0F
04D5:  ANDWF  77,F
04D6:  MOVF   77,W
04D7:  BSF    03.5
04D8:  MOVWF  45
04D9:  MOVWF  56
04DA:  MOVLW  0A
04DB:  MOVWF  57
04DC:  BCF    03.5
04DD:  CALL   47F
04DE:  MOVF   78,W
04DF:  BSF    03.5
04E0:  MOVWF  44
04E1:  BCF    03.5
04E2:  MOVF   2D,W
04E3:  ANDLW  0F
04E4:  BSF    03.5
04E5:  ADDWF  44,W
04E6:  BCF    03.5
04E7:  MOVWF  2D
....................    date = (date >> 4) * 10 + (date & 0x0F); 
04E8:  SWAPF  2E,W
04E9:  MOVWF  77
04EA:  MOVLW  0F
04EB:  ANDWF  77,F
04EC:  MOVF   77,W
04ED:  BSF    03.5
04EE:  MOVWF  45
04EF:  MOVWF  56
04F0:  MOVLW  0A
04F1:  MOVWF  57
04F2:  BCF    03.5
04F3:  CALL   47F
04F4:  MOVF   78,W
04F5:  BSF    03.5
04F6:  MOVWF  44
04F7:  BCF    03.5
04F8:  MOVF   2E,W
04F9:  ANDLW  0F
04FA:  BSF    03.5
04FB:  ADDWF  44,W
04FC:  BCF    03.5
04FD:  MOVWF  2E
....................    month = (month >> 4) * 10 + (month & 0x0F); 
04FE:  SWAPF  2F,W
04FF:  MOVWF  77
0500:  MOVLW  0F
0501:  ANDWF  77,F
0502:  MOVF   77,W
0503:  BSF    03.5
0504:  MOVWF  45
0505:  MOVWF  56
0506:  MOVLW  0A
0507:  MOVWF  57
0508:  BCF    03.5
0509:  CALL   47F
050A:  MOVF   78,W
050B:  BSF    03.5
050C:  MOVWF  44
050D:  BCF    03.5
050E:  MOVF   2F,W
050F:  ANDLW  0F
0510:  BSF    03.5
0511:  ADDWF  44,W
0512:  BCF    03.5
0513:  MOVWF  2F
....................    year = (year >> 4) * 10 + (year & 0x0F); 
0514:  SWAPF  30,W
0515:  MOVWF  77
0516:  MOVLW  0F
0517:  ANDWF  77,F
0518:  MOVF   77,W
0519:  BSF    03.5
051A:  MOVWF  45
051B:  MOVWF  56
051C:  MOVLW  0A
051D:  MOVWF  57
051E:  BCF    03.5
051F:  CALL   47F
0520:  MOVF   78,W
0521:  BSF    03.5
0522:  MOVWF  44
0523:  BCF    03.5
0524:  MOVF   30,W
0525:  ANDLW  0F
0526:  BSF    03.5
0527:  ADDWF  44,W
0528:  BCF    03.5
0529:  MOVWF  30
052A:  BSF    0A.3
052B:  BSF    0A.4
052C:  GOTO   329 (RETURN)
.................... } 
....................  
.................... void ds1307_write(unsigned int8 address, data_) 
.................... { 
....................    i2c_start();                                   // Start I2C protocol 
....................    i2c_write(0xD0);                               // DS1307 address 
....................    i2c_write(address);                            // Send register address 
....................    i2c_write(data_);                              // Write data to the selected register 
....................    i2c_stop();                                    // Stop I2C protocol 
.................... } 
....................  
.................... void i2c_read_data() 
.................... { 
....................    i2c_start();                                  // Start I2C protocol 
*
0441:  BSF    03.5
0442:  BSF    11.0
0443:  BTFSC  11.0
0444:  GOTO   443
....................    i2c_write(0xD0);                              // DS1307 address 
0445:  MOVLW  D0
0446:  MOVWF  57
0447:  BCF    03.5
0448:  CALL   2E5
....................    i2c_write(0);                                 // Send register address 
0449:  BSF    03.5
044A:  CLRF   57
044B:  BCF    03.5
044C:  CALL   2E5
....................    i2c_start();                                  // Restart I2C 
044D:  BSF    03.5
044E:  BSF    11.1
044F:  BTFSC  11.1
0450:  GOTO   44F
....................    i2c_write(0xD1);                              // Initialize data read 
0451:  MOVLW  D1
0452:  MOVWF  57
0453:  BCF    03.5
0454:  CALL   2E5
....................    second = i2c_read(1);                         // Read seconds from register 0 
0455:  MOVLW  01
0456:  MOVWF  77
0457:  CALL   431
0458:  MOVF   78,W
0459:  MOVWF  2B
....................    minute = i2c_read(1);                         // Read minuts from register 1 
045A:  MOVLW  01
045B:  MOVWF  77
045C:  CALL   431
045D:  MOVF   78,W
045E:  MOVWF  2C
....................    hour   = i2c_read(1);                         // Read hour from register 2 
045F:  MOVLW  01
0460:  MOVWF  77
0461:  CALL   431
0462:  MOVF   78,W
0463:  MOVWF  2D
....................    day    = i2c_read(1);                         // Read day from register 3 
0464:  MOVLW  01
0465:  MOVWF  77
0466:  CALL   431
0467:  MOVF   78,W
0468:  MOVWF  31
....................    date   = i2c_read(1);                         // Read date from register 4 
0469:  MOVLW  01
046A:  MOVWF  77
046B:  CALL   431
046C:  MOVF   78,W
046D:  MOVWF  2E
....................    month  = i2c_read(1);                         // Read month from register 5 
046E:  MOVLW  01
046F:  MOVWF  77
0470:  CALL   431
0471:  MOVF   78,W
0472:  MOVWF  2F
....................    year   = i2c_read(0);                         // Read year from register 6 
0473:  CLRF   77
0474:  CALL   431
0475:  MOVF   78,W
0476:  MOVWF  30
....................    i2c_stop();                                   // Stop I2C protocol 
0477:  BSF    03.5
0478:  BSF    11.2
0479:  BTFSC  11.2
047A:  GOTO   479
047B:  BCF    03.5
047C:  BSF    0A.3
047D:  BSF    0A.4
047E:  GOTO   324 (RETURN)
.................... } 
....................  
.................... #include <tv_lcd.c> 
.................... #ifndef     lcd_rs 
.................... #define     lcd_rs         pin_e0                        //(1) 
.................... #endif 
....................  
.................... #ifndef     lcd_rw 
.................... #define     lcd_rw         pin_e1                        //(2) 
.................... #endif 
....................  
.................... #ifndef     lcd_e 
.................... #define     lcd_e          pin_e2                        //(3) 
.................... #endif 
....................  
.................... //co the viet cac dinh nghia tren ngan gon nhu sau: 
.................... // #define     lcd_rs      pin_e0                        <->(1)                    
.................... // #define     lcd_rw      pin_e1                        <->(2) 
.................... // #define     lcd_e       pin_e2                        <->(3) 
....................  
....................  
.................... #ifndef     output_lcd   
.................... #define     output_lcd        output_d 
.................... #endif 
....................  
.................... #define     lcd_function_set        0x38 
.................... #define     lcd_display_control     0x0c 
.................... #define     lcd_clear_display       0x01 
.................... #define     lcd_entry_mode          0x06 
.................... #define     lcd_shift_left          0x18 
.................... #define     lcd_shift_right         0x1c 
.................... #define     lcd_addr_line1          0x80 
.................... #define     lcd_addr_line2          0xc0 
....................  
.................... void lcd_out (unsigned char x) 
.................... { 
....................    output_lcd(x); 
*
03B5:  BSF    03.5
03B6:  CLRF   08
03B7:  MOVF   49,W
03B8:  BCF    03.5
03B9:  MOVWF  08
....................    output_high(lcd_e);     delay_us(10); 
03BA:  BSF    03.5
03BB:  BCF    09.2
03BC:  BCF    03.5
03BD:  BSF    09.2
03BE:  MOVLW  10
03BF:  MOVWF  77
03C0:  DECFSZ 77,F
03C1:  GOTO   3C0
03C2:  NOP
....................    output_low(lcd_e);      delay_us(30); 
03C3:  BSF    03.5
03C4:  BCF    09.2
03C5:  BCF    03.5
03C6:  BCF    09.2
03C7:  MOVLW  31
03C8:  MOVWF  77
03C9:  DECFSZ 77,F
03CA:  GOTO   3C9
03CB:  GOTO   3CC
03CC:  RETURN
.................... } 
....................  
.................... void lcd_command (unsigned char mdk) 
.................... { 
....................    output_low(lcd_rs); 
03CD:  BSF    03.5
03CE:  BCF    09.0
03CF:  BCF    03.5
03D0:  BCF    09.0
....................    lcd_out(mdk); 
03D1:  BSF    03.5
03D2:  MOVF   46,W
03D3:  MOVWF  49
03D4:  BCF    03.5
03D5:  CALL   3B5
03D6:  RETURN
.................... } 
....................  
.................... void lcd_data (unsigned char mht) 
.................... { 
....................    output_high(lcd_rs); 
*
058C:  BSF    03.5
058D:  BCF    09.0
058E:  BCF    03.5
058F:  BSF    09.0
....................    lcd_out(mht); 
0590:  BSF    03.5
0591:  MOVF   48,W
0592:  MOVWF  49
0593:  BCF    03.5
0594:  CALL   3B5
0595:  RETURN
.................... } 
....................  
.................... void lcd_goto_xy (signed int8 x, signed int8 y) 
.................... { 
....................    const unsigned int8 lcd_vitri[] = {0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y); 
.................... } 
....................  
.................... void lcd_setup() 
.................... { 
....................    output_low(lcd_e); 
*
03EB:  BSF    03.5
03EC:  BCF    09.2
03ED:  BCF    03.5
03EE:  BCF    09.2
....................    output_low(lcd_rs); 
03EF:  BSF    03.5
03F0:  BCF    09.0
03F1:  BCF    03.5
03F2:  BCF    09.0
....................    output_low(lcd_rw); 
03F3:  BSF    03.5
03F4:  BCF    09.1
03F5:  BCF    03.5
03F6:  BCF    09.1
....................    lcd_command(lcd_function_set); 
03F7:  MOVLW  38
03F8:  BSF    03.5
03F9:  MOVWF  46
03FA:  BCF    03.5
03FB:  CALL   3CD
....................    lcd_command(lcd_display_control); 
03FC:  MOVLW  0C
03FD:  BSF    03.5
03FE:  MOVWF  46
03FF:  BCF    03.5
0400:  CALL   3CD
....................    lcd_command(lcd_clear_display);           delay_ms(2); 
0401:  MOVLW  01
0402:  BSF    03.5
0403:  MOVWF  46
0404:  BCF    03.5
0405:  CALL   3CD
0406:  MOVLW  02
0407:  BSF    03.5
0408:  MOVWF  49
0409:  BCF    03.5
040A:  CALL   3D7
....................    lcd_command(lcd_entry_mode); 
040B:  MOVLW  06
040C:  BSF    03.5
040D:  MOVWF  46
040E:  BCF    03.5
040F:  CALL   3CD
0410:  BSF    0A.3
0411:  BSF    0A.4
0412:  GOTO   2FF (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... #include <tv_dht11.c> 
.................... #define DHT11_PIN PIN_B0 
....................  
.................... short Time_out = 0; 
.................... unsigned int8 T_ng, T_tp, RH_ng, RH_tp, checksum; 
....................  
.................... void start_signal() 
.................... { 
....................    output_drive(DHT11_PIN); 
*
0677:  BSF    03.5
0678:  BCF    06.0
....................    output_low(DHT11_PIN); 
0679:  BCF    06.0
067A:  BCF    03.5
067B:  BCF    06.0
....................    delay_ms(25); 
067C:  MOVLW  19
067D:  BSF    03.5
067E:  MOVWF  49
067F:  BCF    03.5
0680:  CALL   3D7
....................    output_high(DHT11_PIN); 
0681:  BSF    03.5
0682:  BCF    06.0
0683:  BCF    03.5
0684:  BSF    06.0
....................    delay_us(25); 
0685:  MOVLW  29
0686:  MOVWF  77
0687:  DECFSZ 77,F
0688:  GOTO   687
0689:  NOP
....................    output_float(DHT11_PIN); 
068A:  BSF    03.5
068B:  BSF    06.0
068C:  BCF    03.5
068D:  BSF    0A.3
068E:  BSF    0A.4
068F:  GOTO   35E (RETURN)
.................... } 
....................  
.................... short check_response() 
.................... { 
....................    set_timer1(0); 
0690:  CLRF   0E
0691:  CLRF   0F
0692:  CLRF   0E
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_2); 
0693:  MOVLW  15
0694:  MOVWF  10
....................    while(!input(DHT11_PIN) && get_timer1() < 100); 
0695:  BSF    03.5
0696:  BSF    06.0
0697:  BCF    03.5
0698:  BTFSC  06.0
0699:  GOTO   6B1
069A:  MOVF   0F,W
069B:  MOVWF  7A
069C:  MOVF   0E,W
069D:  MOVWF  77
069E:  MOVF   0F,W
069F:  SUBWF  7A,W
06A0:  BTFSS  03.2
06A1:  GOTO   69A
06A2:  MOVF   77,W
06A3:  BSF    03.5
06A4:  MOVWF  44
06A5:  MOVF   7A,W
06A6:  MOVWF  45
06A7:  MOVF   45,F
06A8:  BTFSC  03.2
06A9:  GOTO   6AC
06AA:  BCF    03.5
06AB:  GOTO   6B1
06AC:  MOVF   44,W
06AD:  SUBLW  63
06AE:  BTFSC  03.0
06AF:  GOTO   696
06B0:  BCF    03.5
....................    if(get_timer1() > 99) 
06B1:  MOVF   0F,W
06B2:  MOVWF  7A
06B3:  MOVF   0E,W
06B4:  MOVWF  77
06B5:  MOVF   0F,W
06B6:  SUBWF  7A,W
06B7:  BTFSS  03.2
06B8:  GOTO   6B1
06B9:  MOVF   77,W
06BA:  BSF    03.5
06BB:  MOVWF  44
06BC:  MOVF   7A,W
06BD:  MOVWF  45
06BE:  MOVF   45,F
06BF:  BTFSS  03.2
06C0:  GOTO   6C5
06C1:  MOVF   44,W
06C2:  SUBLW  63
06C3:  BTFSC  03.0
06C4:  GOTO   6C9
....................       return 0; 
06C5:  MOVLW  00
06C6:  MOVWF  78
06C7:  GOTO   703
06C8:  GOTO   703
....................    else 
....................    { 
....................       set_timer1(0); 
06C9:  BCF    03.5
06CA:  CLRF   0E
06CB:  CLRF   0F
06CC:  CLRF   0E
....................       while(input(DHT11_PIN) && get_timer1() < 100); 
06CD:  BSF    03.5
06CE:  BSF    06.0
06CF:  BCF    03.5
06D0:  BTFSS  06.0
06D1:  GOTO   6E9
06D2:  MOVF   0F,W
06D3:  MOVWF  7A
06D4:  MOVF   0E,W
06D5:  MOVWF  77
06D6:  MOVF   0F,W
06D7:  SUBWF  7A,W
06D8:  BTFSS  03.2
06D9:  GOTO   6D2
06DA:  MOVF   77,W
06DB:  BSF    03.5
06DC:  MOVWF  44
06DD:  MOVF   7A,W
06DE:  MOVWF  45
06DF:  MOVF   45,F
06E0:  BTFSC  03.2
06E1:  GOTO   6E4
06E2:  BCF    03.5
06E3:  GOTO   6E9
06E4:  MOVF   44,W
06E5:  SUBLW  63
06E6:  BTFSC  03.0
06E7:  GOTO   6CE
06E8:  BCF    03.5
....................       if(get_timer1() > 99) 
06E9:  MOVF   0F,W
06EA:  MOVWF  7A
06EB:  MOVF   0E,W
06EC:  MOVWF  77
06ED:  MOVF   0F,W
06EE:  SUBWF  7A,W
06EF:  BTFSS  03.2
06F0:  GOTO   6E9
06F1:  MOVF   77,W
06F2:  BSF    03.5
06F3:  MOVWF  44
06F4:  MOVF   7A,W
06F5:  MOVWF  45
06F6:  MOVF   45,F
06F7:  BTFSS  03.2
06F8:  GOTO   6FD
06F9:  MOVF   44,W
06FA:  SUBLW  63
06FB:  BTFSC  03.0
06FC:  GOTO   701
....................          return 0; 
06FD:  MOVLW  00
06FE:  MOVWF  78
06FF:  GOTO   703
0700:  GOTO   703
....................       else 
....................          return 1; 
0701:  MOVLW  01
0702:  MOVWF  78
....................    } 
0703:  BCF    03.5
0704:  BSF    0A.3
0705:  BSF    0A.4
0706:  GOTO   363 (RETURN)
.................... } 
....................  
.................... unsigned int8 Read_Data() 
0707:  BSF    03.5
0708:  CLRF   45
.................... { 
....................    unsigned int8 i, _data = 0; 
....................    if(Time_out) 
0709:  BCF    03.5
070A:  BTFSS  25.1
070B:  GOTO   70C
....................       break; 
....................    for(i = 0; i < 8; i++) 
070C:  BSF    03.5
070D:  CLRF   44
070E:  MOVF   44,W
070F:  SUBLW  07
0710:  BTFSS  03.0
0711:  GOTO   77C
....................    { 
....................       set_timer1(0); 
0712:  BCF    03.5
0713:  CLRF   0E
0714:  CLRF   0F
0715:  CLRF   0E
....................       while(!input(DHT11_PIN)) 
0716:  BSF    03.5
0717:  BSF    06.0
0718:  BCF    03.5
0719:  BTFSC  06.0
071A:  GOTO   735
....................          if(get_timer1() > 100) 
071B:  MOVF   0F,W
071C:  MOVWF  7A
071D:  MOVF   0E,W
071E:  MOVWF  77
071F:  MOVF   0F,W
0720:  SUBWF  7A,W
0721:  BTFSS  03.2
0722:  GOTO   71B
0723:  MOVF   77,W
0724:  BSF    03.5
0725:  MOVWF  46
0726:  MOVF   7A,W
0727:  MOVWF  47
0728:  MOVF   47,F
0729:  BTFSS  03.2
072A:  GOTO   72F
072B:  MOVF   46,W
072C:  SUBLW  64
072D:  BTFSC  03.0
072E:  GOTO   733
....................          { 
....................             Time_out = 1; 
072F:  BCF    03.5
0730:  BSF    25.1
....................             break; 
0731:  GOTO   735
0732:  BSF    03.5
0733:  GOTO   717
0734:  BCF    03.5
....................          } 
....................       set_timer1(0); 
0735:  CLRF   0E
0736:  CLRF   0F
0737:  CLRF   0E
....................       while(input(DHT11_PIN)) 
0738:  BSF    03.5
0739:  BSF    06.0
073A:  BCF    03.5
073B:  BTFSS  06.0
073C:  GOTO   757
....................          if(get_timer1() > 100) 
073D:  MOVF   0F,W
073E:  MOVWF  7A
073F:  MOVF   0E,W
0740:  MOVWF  77
0741:  MOVF   0F,W
0742:  SUBWF  7A,W
0743:  BTFSS  03.2
0744:  GOTO   73D
0745:  MOVF   77,W
0746:  BSF    03.5
0747:  MOVWF  46
0748:  MOVF   7A,W
0749:  MOVWF  47
074A:  MOVF   47,F
074B:  BTFSS  03.2
074C:  GOTO   751
074D:  MOVF   46,W
074E:  SUBLW  64
074F:  BTFSC  03.0
0750:  GOTO   755
....................          { 
....................             Time_out = 1; 
0751:  BCF    03.5
0752:  BSF    25.1
....................             break; 
0753:  GOTO   757
0754:  BSF    03.5
0755:  GOTO   739
0756:  BCF    03.5
....................          } 
....................          if(get_timer1() > 50) 
0757:  MOVF   0F,W
0758:  MOVWF  7A
0759:  MOVF   0E,W
075A:  MOVWF  77
075B:  MOVF   0F,W
075C:  SUBWF  7A,W
075D:  BTFSS  03.2
075E:  GOTO   757
075F:  MOVF   77,W
0760:  BSF    03.5
0761:  MOVWF  46
0762:  MOVF   7A,W
0763:  MOVWF  47
0764:  MOVF   47,F
0765:  BTFSS  03.2
0766:  GOTO   76B
0767:  MOVF   46,W
0768:  SUBLW  32
0769:  BTFSC  03.0
076A:  GOTO   77A
....................             bit_set(_data, (7 - i)); 
076B:  MOVF   44,W
076C:  SUBLW  07
076D:  MOVWF  46
076E:  MOVLW  01
076F:  MOVWF  77
0770:  MOVF   46,W
0771:  MOVWF  78
0772:  BTFSC  03.2
0773:  GOTO   778
0774:  BCF    03.0
0775:  RLF    77,F
0776:  DECFSZ 78,F
0777:  GOTO   774
0778:  MOVF   77,W
0779:  IORWF  45,F
077A:  INCF   44,F
077B:  GOTO   70E
....................    } 
....................    return _data; 
077C:  MOVF   45,W
077D:  MOVWF  78
077E:  BCF    03.5
077F:  RETURN
.................... } 
....................  
....................  
....................  
.................... #include <tv_eeprom.c> 
.................... void eeprom_write(unsigned int8 address, unsigned int8 data) 
.................... { 
....................     write_eeprom(address, data); 
*
0413:  MOVF   0B,W
0414:  MOVWF  77
0415:  BCF    0B.7
0416:  BSF    03.5
0417:  MOVF   45,W
0418:  BCF    03.5
0419:  BSF    03.6
041A:  MOVWF  0D
041B:  BSF    03.5
041C:  BCF    03.6
041D:  MOVF   46,W
041E:  BCF    03.5
041F:  BSF    03.6
0420:  MOVWF  0C
0421:  BSF    03.5
0422:  BCF    0C.7
0423:  BSF    0C.2
0424:  MOVLW  55
0425:  MOVWF  0D
0426:  MOVLW  AA
0427:  MOVWF  0D
0428:  BSF    0C.1
0429:  BTFSC  0C.1
042A:  GOTO   429
042B:  BCF    0C.2
042C:  MOVF   77,W
042D:  BCF    03.5
042E:  BCF    03.6
042F:  IORWF  0B,F
0430:  RETURN
.................... } 
....................  
.................... unsigned int8 eeprom_read(unsigned int8 address) 
.................... { 
....................     return read_eeprom(address); 
*
07D8:  BSF    03.5
07D9:  MOVF   47,W
07DA:  BCF    03.5
07DB:  BSF    03.6
07DC:  MOVWF  0D
07DD:  BSF    03.5
07DE:  BCF    0C.7
07DF:  BSF    0C.0
07E0:  BCF    03.5
07E1:  MOVF   0C,W
07E2:  MOVWF  78
07E3:  BCF    03.6
07E4:  RETURN
.................... } 
....................  
.................... #use fast_io(B) 
.................... #use fast_io(D) 
....................  
.................... float ao_T, ao_RH; 
.................... unsigned int8 oled_mode = 0, lcd_mode = 0, i = 0; 
.................... unsigned int8 RH_max = 70, T_max = 40; 
.................... unsigned int8 slot_write = 0, slot_read = 0; 
.................... unsigned int8 T_read[32], RH_read[32]; 
.................... unsigned int8 hour_Ts = 0, minute_Ts = 0, second_Ts = 0; 
.................... unsigned int8 date_Ts = 0, month_Ts = 0, year_Ts = 0; 
.................... unsigned int8 hour_Te = 0, minute_Te = 0, second_Te = 0; 
.................... unsigned int8 date_Te = 0, month_Te = 0, year_Te = 0; 
.................... unsigned int8 hour_RHs = 0, minute_RHs = 0, second_RHs = 0; 
.................... unsigned int8 date_RHs = 0, month_RHs = 0, year_RHs = 0; 
.................... unsigned int8 hour_RHe = 0, minute_RHe = 0, second_RHe = 0; 
.................... unsigned int8 date_RHe = 0, month_RHe = 0, year_RHe = 0; 
....................  
.................... void delay(unsigned int16 t) 
.................... { 
....................    for (unsigned int16 j=0; j<t; j++) 
*
0654:  BSF    03.5
0655:  CLRF   48
0656:  CLRF   47
0657:  MOVF   48,W
0658:  SUBWF  46,W
0659:  BTFSS  03.0
065A:  GOTO   675
065B:  BTFSS  03.2
065C:  GOTO   661
065D:  MOVF   45,W
065E:  SUBWF  47,W
065F:  BTFSC  03.0
0660:  GOTO   675
....................    { 
....................       delay_ms(1); 
0661:  MOVLW  01
0662:  MOVWF  49
0663:  BCF    03.5
0664:  CALL   3D7
....................       if ((!input(pin_b7))||(!input(pin_b6))||(!input(pin_b5))||(!input(pin_b4))) 
0665:  BTFSS  06.7
0666:  GOTO   66D
0667:  BTFSS  06.6
0668:  GOTO   66D
0669:  BTFSS  06.5
066A:  GOTO   66D
066B:  BTFSC  06.4
066C:  GOTO   670
....................          break;       
066D:  BSF    03.5
066E:  GOTO   675
066F:  BCF    03.5
0670:  BSF    03.5
0671:  INCF   47,F
0672:  BTFSC  03.2
0673:  INCF   48,F
0674:  GOTO   657
....................    } 
0675:  BCF    03.5
0676:  RETURN
.................... } 
....................  
.................... void eeprom_write_data() 
.................... { 
....................    if(second%3 == 0) 
*
1000:  MOVF   2B,W
1001:  BSF    03.5
1002:  MOVWF  54
1003:  MOVLW  03
1004:  MOVWF  55
1005:  BCF    0A.4
1006:  BCF    03.5
1007:  CALL   63D
1008:  BSF    0A.4
1009:  MOVF   77,F
100A:  BTFSS  03.2
100B:  GOTO   035
....................    { 
....................       if(slot_write < 14) 
100C:  MOVF   44,W
100D:  SUBLW  0D
100E:  BTFSS  03.0
100F:  GOTO   035
....................       { 
....................          eeprom_write(slot_write, T_ng); 
1010:  MOVF   44,W
1011:  BSF    03.5
1012:  MOVWF  45
1013:  BCF    03.5
1014:  MOVF   32,W
1015:  BSF    03.5
1016:  MOVWF  46
1017:  BCF    0A.4
1018:  BCF    03.5
1019:  CALL   413
101A:  BSF    0A.4
....................          eeprom_write(slot_write+32, RH_ng); 
101B:  MOVLW  20
101C:  ADDWF  44,W
101D:  BSF    03.5
101E:  MOVWF  44
101F:  MOVWF  45
1020:  BCF    03.5
1021:  MOVF   34,W
1022:  BSF    03.5
1023:  MOVWF  46
1024:  BCF    0A.4
1025:  BCF    03.5
1026:  CALL   413
1027:  BSF    0A.4
....................          delay(100); 
1028:  BSF    03.5
1029:  CLRF   46
102A:  MOVLW  64
102B:  MOVWF  45
102C:  BCF    0A.4
102D:  BCF    03.5
102E:  CALL   654
102F:  BSF    0A.4
....................          slot_write++; 
1030:  INCF   44,F
....................          if (slot_write == 14)   slot_write = 0; 
1031:  MOVF   44,W
1032:  SUBLW  0E
1033:  BTFSC  03.2
1034:  CLRF   44
....................       } 
....................    } 
1035:  BSF    0A.3
1036:  BSF    0A.4
1037:  GOTO   36D (RETURN)
.................... } 
....................  
.................... void button_return_lcd() 
.................... { 
....................    if (!input(pin_b4)) 
*
057E:  BTFSC  06.4
057F:  GOTO   587
....................    { 
....................       delay_us(10); 
0580:  MOVLW  10
0581:  MOVWF  77
0582:  DECFSZ 77,F
0583:  GOTO   582
0584:  NOP
....................       if (!input(pin_b4)) 
0585:  BTFSS  06.4
....................       { 
....................          lcd_mode = 0; 
0586:  CLRF   40
....................       } 
....................    } while (!input(pin_b4)); 
0587:  BTFSS  06.4
0588:  GOTO   587
0589:  BSF    0A.3
058A:  BSF    0A.4
058B:  GOTO   333 (RETURN)
.................... } 
....................  
.................... void select_mode() 
.................... { 
....................    if(!input(pin_b7)) 
*
052D:  BTFSC  06.7
052E:  GOTO   57B
....................    { 
....................       delay_us(10); 
052F:  MOVLW  10
0530:  MOVWF  77
0531:  DECFSZ 77,F
0532:  GOTO   531
0533:  NOP
....................       if(!input(pin_b7)) 
0534:  BTFSC  06.7
0535:  GOTO   579
....................       { 
....................          oled_mode++; 
0536:  INCF   3F,F
....................          if (oled_mode == 5) 
0537:  MOVF   3F,W
0538:  SUBLW  05
0539:  BTFSC  03.2
....................             oled_mode = 0; 
053A:  CLRF   3F
....................          oled_cleardisplay();    
....................       } 
....................       while(!input(pin_b7)); 
*
0579:  BTFSS  06.7
057A:  GOTO   579
....................    } 
057B:  BSF    0A.3
057C:  BSF    0A.4
057D:  GOTO   32E (RETURN)
.................... } 
....................  
.................... void oled_128x64_mode_0() 
.................... {    
....................    oled_goto_xy(8,1); 
*
0F09:  MOVLW  08
0F0A:  BSF    03.5
0F0B:  MOVWF  45
0F0C:  MOVLW  01
0F0D:  MOVWF  46
0F0E:  BCF    0A.3
0F0F:  BCF    03.5
0F10:  CALL   780
0F11:  BSF    0A.3
....................    oled_printf("PROJECT"); 
0F12:  MOVLW  EA
0F13:  BSF    03.6
0F14:  MOVWF  0D
0F15:  MOVLW  01
0F16:  MOVWF  0F
0F17:  BCF    03.6
0F18:  CALL   5E8
....................    oled_goto_xy(4,2); 
0F19:  MOVLW  04
0F1A:  BSF    03.5
0F1B:  MOVWF  45
0F1C:  MOVLW  02
0F1D:  MOVWF  46
0F1E:  BCF    0A.3
0F1F:  BCF    03.5
0F20:  CALL   780
0F21:  BSF    0A.3
....................    oled_printf("EMBEDDED SYSTEM"); 
0F22:  MOVLW  EE
0F23:  BSF    03.6
0F24:  MOVWF  0D
0F25:  MOVLW  01
0F26:  MOVWF  0F
0F27:  BCF    03.6
0F28:  CALL   5E8
....................     
....................    oled_goto_xy(1,4); 
0F29:  MOVLW  01
0F2A:  BSF    03.5
0F2B:  MOVWF  45
0F2C:  MOVLW  04
0F2D:  MOVWF  46
0F2E:  BCF    0A.3
0F2F:  BCF    03.5
0F30:  CALL   780
0F31:  BSF    0A.3
....................    oled_printf("- TEMPERATURE: ");   
0F32:  MOVLW  F6
0F33:  BSF    03.6
0F34:  MOVWF  0D
0F35:  MOVLW  01
0F36:  MOVWF  0F
0F37:  BCF    03.6
0F38:  CALL   5E8
....................    oled_goto_xy(17,4); 
0F39:  MOVLW  11
0F3A:  BSF    03.5
0F3B:  MOVWF  45
0F3C:  MOVLW  04
0F3D:  MOVWF  46
0F3E:  BCF    0A.3
0F3F:  BCF    03.5
0F40:  CALL   780
0F41:  BSF    0A.3
....................    printf(oled_printf, "%2u", T_ng); 
0F42:  MOVF   32,W
0F43:  BSF    03.5
0F44:  MOVWF  45
0F45:  MOVLW  11
0F46:  MOVWF  46
0F47:  BCF    0A.3
0F48:  BCF    03.5
0F49:  CALL   793
0F4A:  BSF    0A.3
....................    OLED_PutCustomC(degree); 
0F4B:  BSF    03.5
0F4C:  CLRF   45
0F4D:  MOVLW  26
0F4E:  MOVWF  44
0F4F:  BCF    03.5
0F50:  CALL   65C
....................    oled_printf("C"); 
0F51:  MOVLW  FE
0F52:  BSF    03.6
0F53:  MOVWF  0D
0F54:  MOVLW  01
0F55:  MOVWF  0F
0F56:  BCF    03.6
0F57:  CALL   5E8
....................     
....................    oled_goto_xy(1,5); 
0F58:  MOVLW  01
0F59:  BSF    03.5
0F5A:  MOVWF  45
0F5B:  MOVLW  05
0F5C:  MOVWF  46
0F5D:  BCF    0A.3
0F5E:  BCF    03.5
0F5F:  CALL   780
0F60:  BSF    0A.3
....................    oled_printf("- HUMIDITY: "); 
0F61:  MOVLW  FF
0F62:  BSF    03.6
0F63:  MOVWF  0D
0F64:  MOVLW  01
0F65:  MOVWF  0F
0F66:  BCF    03.6
0F67:  CALL   5E8
....................    oled_goto_xy(17,5); 
0F68:  MOVLW  11
0F69:  BSF    03.5
0F6A:  MOVWF  45
0F6B:  MOVLW  05
0F6C:  MOVWF  46
0F6D:  BCF    0A.3
0F6E:  BCF    03.5
0F6F:  CALL   780
0F70:  BSF    0A.3
....................    printf(oled_printf, "%2u", RH_ng); 
0F71:  MOVF   34,W
0F72:  BSF    03.5
0F73:  MOVWF  45
0F74:  MOVLW  11
0F75:  MOVWF  46
0F76:  BCF    0A.3
0F77:  BCF    03.5
0F78:  CALL   793
0F79:  BSF    0A.3
....................    oled_printf("%"); 
0F7A:  MOVLW  06
0F7B:  BSF    03.6
0F7C:  MOVWF  0D
0F7D:  MOVLW  02
0F7E:  MOVWF  0F
0F7F:  BCF    03.6
0F80:  CALL   5E8
....................     
....................    oled_goto_xy(1,7); 
0F81:  MOVLW  01
0F82:  BSF    03.5
0F83:  MOVWF  45
0F84:  MOVLW  07
0F85:  MOVWF  46
0F86:  BCF    0A.3
0F87:  BCF    03.5
0F88:  CALL   780
0F89:  BSF    0A.3
....................    oled_printf("- TIME: "); 
0F8A:  MOVLW  07
0F8B:  BSF    03.6
0F8C:  MOVWF  0D
0F8D:  MOVLW  02
0F8E:  MOVWF  0F
0F8F:  BCF    03.6
0F90:  CALL   5E8
....................    printf(oled_printf, "%02u", hour); 
0F91:  MOVF   2D,W
0F92:  BSF    03.5
0F93:  MOVWF  45
0F94:  MOVLW  01
0F95:  MOVWF  46
0F96:  BCF    0A.3
0F97:  BCF    03.5
0F98:  CALL   793
0F99:  BSF    0A.3
....................    oled_printf(":"); 
0F9A:  MOVLW  0C
0F9B:  BSF    03.6
0F9C:  MOVWF  0D
0F9D:  MOVLW  02
0F9E:  MOVWF  0F
0F9F:  BCF    03.6
0FA0:  CALL   5E8
....................    printf(oled_printf, "%02u", minute); 
0FA1:  MOVF   2C,W
0FA2:  BSF    03.5
0FA3:  MOVWF  45
0FA4:  MOVLW  01
0FA5:  MOVWF  46
0FA6:  BCF    0A.3
0FA7:  BCF    03.5
0FA8:  CALL   793
0FA9:  BSF    0A.3
....................    oled_printf(":"); 
0FAA:  MOVLW  0D
0FAB:  BSF    03.6
0FAC:  MOVWF  0D
0FAD:  MOVLW  02
0FAE:  MOVWF  0F
0FAF:  BCF    03.6
0FB0:  CALL   5E8
....................    printf(oled_printf, "%02u", second); 
0FB1:  MOVF   2B,W
0FB2:  BSF    03.5
0FB3:  MOVWF  45
0FB4:  MOVLW  01
0FB5:  MOVWF  46
0FB6:  BCF    0A.3
0FB7:  BCF    03.5
0FB8:  CALL   793
0FB9:  BSF    0A.3
....................     
....................    oled_goto_xy(1,8); 
0FBA:  MOVLW  01
0FBB:  BSF    03.5
0FBC:  MOVWF  45
0FBD:  MOVLW  08
0FBE:  MOVWF  46
0FBF:  BCF    0A.3
0FC0:  BCF    03.5
0FC1:  CALL   780
0FC2:  BSF    0A.3
....................    oled_printf("- DATE: "); 
0FC3:  MOVLW  0E
0FC4:  BSF    03.6
0FC5:  MOVWF  0D
0FC6:  MOVLW  02
0FC7:  MOVWF  0F
0FC8:  BCF    03.6
0FC9:  CALL   5E8
....................    printf(oled_printf, "%02u", date); 
0FCA:  MOVF   2E,W
0FCB:  BSF    03.5
0FCC:  MOVWF  45
0FCD:  MOVLW  01
0FCE:  MOVWF  46
0FCF:  BCF    0A.3
0FD0:  BCF    03.5
0FD1:  CALL   793
0FD2:  BSF    0A.3
....................    oled_printf("/"); 
0FD3:  MOVLW  13
0FD4:  BSF    03.6
0FD5:  MOVWF  0D
0FD6:  MOVLW  02
0FD7:  MOVWF  0F
0FD8:  BCF    03.6
0FD9:  CALL   5E8
....................    printf(oled_printf, "%02u", month); 
0FDA:  MOVF   2F,W
0FDB:  BSF    03.5
0FDC:  MOVWF  45
0FDD:  MOVLW  01
0FDE:  MOVWF  46
0FDF:  BCF    0A.3
0FE0:  BCF    03.5
0FE1:  CALL   793
0FE2:  BSF    0A.3
....................    oled_printf("/20"); 
0FE3:  MOVLW  14
0FE4:  BSF    03.6
0FE5:  MOVWF  0D
0FE6:  MOVLW  02
0FE7:  MOVWF  0F
0FE8:  BCF    03.6
0FE9:  CALL   5E8
....................    printf(oled_printf, "%02u", year); 
0FEA:  MOVF   30,W
0FEB:  BSF    03.5
0FEC:  MOVWF  45
0FED:  MOVLW  01
0FEE:  MOVWF  46
0FEF:  BCF    0A.3
0FF0:  BCF    03.5
0FF1:  CALL   793
0FF2:  BSF    0A.3
.................... } 
....................  
.................... void oled_128x64_mode_1() 
.................... { 
....................    oled_goto_xy(1,1); 
*
1253:  MOVLW  01
1254:  BSF    03.5
1255:  MOVWF  45
1256:  MOVWF  46
1257:  BCF    0A.4
1258:  BCF    03.5
1259:  CALL   780
125A:  BSF    0A.4
....................    oled_printf("TEMPERATURE MAX:"); 
125B:  MOVLW  16
125C:  BSF    03.6
125D:  MOVWF  0D
125E:  MOVLW  02
125F:  MOVWF  0F
1260:  BCF    0A.4
1261:  BSF    0A.3
1262:  BCF    03.6
1263:  CALL   5E8
1264:  BSF    0A.4
1265:  BCF    0A.3
....................    oled_goto_xy(1,3); 
1266:  MOVLW  01
1267:  BSF    03.5
1268:  MOVWF  45
1269:  MOVLW  03
126A:  MOVWF  46
126B:  BCF    0A.4
126C:  BCF    03.5
126D:  CALL   780
126E:  BSF    0A.4
....................    oled_printf("------------->  "); 
126F:  MOVLW  1F
1270:  BSF    03.6
1271:  MOVWF  0D
1272:  MOVLW  02
1273:  MOVWF  0F
1274:  BCF    0A.4
1275:  BSF    0A.3
1276:  BCF    03.6
1277:  CALL   5E8
1278:  BSF    0A.4
1279:  BCF    0A.3
....................    printf(oled_printf, "%2u", T_max); 
127A:  MOVF   43,W
127B:  BSF    03.5
127C:  MOVWF  45
127D:  MOVLW  11
127E:  MOVWF  46
127F:  BCF    0A.4
1280:  BCF    03.5
1281:  CALL   793
1282:  BSF    0A.4
....................    OLED_PutCustomC(degree); 
1283:  BSF    03.5
1284:  CLRF   45
1285:  MOVLW  26
1286:  MOVWF  44
1287:  BCF    0A.4
1288:  BSF    0A.3
1289:  BCF    03.5
128A:  CALL   65C
128B:  BSF    0A.4
128C:  BCF    0A.3
....................    oled_printf("C"); 
128D:  MOVLW  28
128E:  BSF    03.6
128F:  MOVWF  0D
1290:  MOVLW  02
1291:  MOVWF  0F
1292:  BCF    0A.4
1293:  BSF    0A.3
1294:  BCF    03.6
1295:  CALL   5E8
1296:  BSF    0A.4
1297:  BCF    0A.3
1298:  BSF    0A.3
1299:  BSF    0A.4
129A:  GOTO   37C (RETURN)
.................... } 
....................  
.................... void setting_high_T_mode_1() 
.................... { 
....................    if(!input(pin_b5)) 
*
122C:  BTFSC  06.5
122D:  GOTO   23E
....................    { 
....................       delay_us(10); 
122E:  MOVLW  10
122F:  MOVWF  77
1230:  DECFSZ 77,F
1231:  GOTO   230
1232:  NOP
....................       if(!input(pin_b5)) 
1233:  BTFSC  06.5
1234:  GOTO   23C
....................       { 
....................          T_max++; 
1235:  INCF   43,F
....................          if(T_max == 51) 
1236:  MOVF   43,W
1237:  SUBLW  33
1238:  BTFSS  03.2
1239:  GOTO   23C
....................             T_max = 30; 
123A:  MOVLW  1E
123B:  MOVWF  43
....................       } 
....................       while(!input(pin_b5)); 
123C:  BTFSS  06.5
123D:  GOTO   23C
....................    } 
....................     
....................    if(!input(pin_b6)) 
123E:  BTFSC  06.6
123F:  GOTO   250
....................    { 
....................       delay_us(10); 
1240:  MOVLW  10
1241:  MOVWF  77
1242:  DECFSZ 77,F
1243:  GOTO   242
1244:  NOP
....................       if(!input(pin_b6)) 
1245:  BTFSC  06.6
1246:  GOTO   24E
....................       { 
....................          T_max--; 
1247:  DECF   43,F
....................          if(T_max == 29) 
1248:  MOVF   43,W
1249:  SUBLW  1D
124A:  BTFSS  03.2
124B:  GOTO   24E
....................             T_max = 50; 
124C:  MOVLW  32
124D:  MOVWF  43
....................       } 
....................       while(!input(pin_b6)); 
124E:  BTFSS  06.6
124F:  GOTO   24E
....................    } 
1250:  BSF    0A.3
1251:  BSF    0A.4
1252:  GOTO   379 (RETURN)
.................... } 
....................  
.................... void oled_128x64_mode_2() 
.................... { 
....................    oled_goto_xy(1,1); 
*
12C2:  MOVLW  01
12C3:  BSF    03.5
12C4:  MOVWF  45
12C5:  MOVWF  46
12C6:  BCF    0A.4
12C7:  BCF    03.5
12C8:  CALL   780
12C9:  BSF    0A.4
....................    oled_printf("HUMIDITY MAX:"); 
12CA:  MOVLW  29
12CB:  BSF    03.6
12CC:  MOVWF  0D
12CD:  MOVLW  02
12CE:  MOVWF  0F
12CF:  BCF    0A.4
12D0:  BSF    0A.3
12D1:  BCF    03.6
12D2:  CALL   5E8
12D3:  BSF    0A.4
12D4:  BCF    0A.3
....................    oled_goto_xy(1,3); 
12D5:  MOVLW  01
12D6:  BSF    03.5
12D7:  MOVWF  45
12D8:  MOVLW  03
12D9:  MOVWF  46
12DA:  BCF    0A.4
12DB:  BCF    03.5
12DC:  CALL   780
12DD:  BSF    0A.4
....................    oled_printf("------------->  "); 
12DE:  MOVLW  30
12DF:  BSF    03.6
12E0:  MOVWF  0D
12E1:  MOVLW  02
12E2:  MOVWF  0F
12E3:  BCF    0A.4
12E4:  BSF    0A.3
12E5:  BCF    03.6
12E6:  CALL   5E8
12E7:  BSF    0A.4
12E8:  BCF    0A.3
....................    printf(oled_printf, "%2u", RH_max); 
12E9:  MOVF   42,W
12EA:  BSF    03.5
12EB:  MOVWF  45
12EC:  MOVLW  11
12ED:  MOVWF  46
12EE:  BCF    0A.4
12EF:  BCF    03.5
12F0:  CALL   793
12F1:  BSF    0A.4
....................    oled_printf("%");        
12F2:  MOVLW  39
12F3:  BSF    03.6
12F4:  MOVWF  0D
12F5:  MOVLW  02
12F6:  MOVWF  0F
12F7:  BCF    0A.4
12F8:  BSF    0A.3
12F9:  BCF    03.6
12FA:  CALL   5E8
12FB:  BSF    0A.4
12FC:  BCF    0A.3
12FD:  BSF    0A.3
12FE:  BSF    0A.4
12FF:  GOTO   387 (RETURN)
.................... } 
....................  
.................... void setting_high_RH_mode_2() 
.................... { 
....................    if(!input(pin_b5)) 
*
129B:  BTFSC  06.5
129C:  GOTO   2AD
....................    { 
....................       delay_us(10); 
129D:  MOVLW  10
129E:  MOVWF  77
129F:  DECFSZ 77,F
12A0:  GOTO   29F
12A1:  NOP
....................       if(!input(pin_b5)) 
12A2:  BTFSC  06.5
12A3:  GOTO   2AB
....................       { 
....................          RH_max++; 
12A4:  INCF   42,F
....................          if(RH_max == 81) 
12A5:  MOVF   42,W
12A6:  SUBLW  51
12A7:  BTFSS  03.2
12A8:  GOTO   2AB
....................             RH_max = 60; 
12A9:  MOVLW  3C
12AA:  MOVWF  42
....................       } 
....................       while(!input(pin_b5)); 
12AB:  BTFSS  06.5
12AC:  GOTO   2AB
....................    } 
....................     
....................    if(!input(pin_b6)) 
12AD:  BTFSC  06.6
12AE:  GOTO   2BF
....................    { 
....................       delay_us(10); 
12AF:  MOVLW  10
12B0:  MOVWF  77
12B1:  DECFSZ 77,F
12B2:  GOTO   2B1
12B3:  NOP
....................       if(!input(pin_b6)) 
12B4:  BTFSC  06.6
12B5:  GOTO   2BD
....................       { 
....................          RH_max--; 
12B6:  DECF   42,F
....................          if(RH_max == 59) 
12B7:  MOVF   42,W
12B8:  SUBLW  3B
12B9:  BTFSS  03.2
12BA:  GOTO   2BD
....................             RH_max = 80; 
12BB:  MOVLW  50
12BC:  MOVWF  42
....................       } 
....................       while(!input(pin_b6)); 
12BD:  BTFSS  06.6
12BE:  GOTO   2BD
....................    }   
12BF:  BSF    0A.3
12C0:  BSF    0A.4
12C1:  GOTO   384 (RETURN)
.................... } 
....................  
.................... void mang_nhiet_do_oled_mode_3() 
.................... {    
....................    ao_T = 0; 
*
1800:  CLRF   3A
1801:  CLRF   39
1802:  CLRF   38
1803:  CLRF   37
....................    oled_goto_xy(2,1); 
1804:  MOVLW  02
1805:  BSF    03.5
1806:  MOVWF  45
1807:  MOVLW  01
1808:  MOVWF  46
1809:  BCF    0A.4
180A:  BCF    0A.3
180B:  BCF    03.5
180C:  CALL   780
180D:  BSF    0A.4
180E:  BSF    0A.3
....................    oled_printf("TEMPERATURE UPDATED"); 
180F:  MOVLW  3A
1810:  BSF    03.6
1811:  MOVWF  0D
1812:  MOVLW  02
1813:  MOVWF  0F
1814:  BCF    0A.4
1815:  BCF    03.6
1816:  CALL   5E8
1817:  BSF    0A.4
....................    for (i = 0; i<7; i++) 
1818:  CLRF   41
1819:  MOVF   41,W
181A:  SUBLW  06
181B:  BTFSS  03.0
181C:  GOTO   0EB
....................    { 
....................       oled_goto_xy(3*i+1, 3); 
181D:  MOVLW  03
181E:  BSF    03.5
181F:  MOVWF  56
1820:  BCF    03.5
1821:  MOVF   41,W
1822:  BSF    03.5
1823:  MOVWF  57
1824:  BCF    0A.4
1825:  BCF    0A.3
1826:  BCF    03.5
1827:  CALL   47F
1828:  BSF    0A.4
1829:  BSF    0A.3
182A:  MOVLW  01
182B:  ADDWF  78,W
182C:  BSF    03.5
182D:  MOVWF  44
182E:  MOVWF  45
182F:  MOVLW  03
1830:  MOVWF  46
1831:  BCF    0A.4
1832:  BCF    0A.3
1833:  BCF    03.5
1834:  CALL   780
1835:  BSF    0A.4
1836:  BSF    0A.3
....................       printf(oled_printf, "%u", T_read[i]); 
1837:  MOVLW  46
1838:  ADDWF  41,W
1839:  MOVWF  04
183A:  BCF    03.7
183B:  MOVF   00,W
183C:  BSF    03.5
183D:  MOVWF  44
183E:  MOVWF  45
183F:  MOVLW  1B
1840:  MOVWF  46
1841:  BCF    0A.4
1842:  BCF    0A.3
1843:  BCF    03.5
1844:  CALL   793
1845:  BSF    0A.4
1846:  BSF    0A.3
....................        
....................       oled_goto_xy(3*i+1, 5); 
1847:  MOVLW  03
1848:  BSF    03.5
1849:  MOVWF  56
184A:  BCF    03.5
184B:  MOVF   41,W
184C:  BSF    03.5
184D:  MOVWF  57
184E:  BCF    0A.4
184F:  BCF    0A.3
1850:  BCF    03.5
1851:  CALL   47F
1852:  BSF    0A.4
1853:  BSF    0A.3
1854:  MOVLW  01
1855:  ADDWF  78,W
1856:  BSF    03.5
1857:  MOVWF  44
1858:  MOVWF  45
1859:  MOVLW  05
185A:  MOVWF  46
185B:  BCF    0A.4
185C:  BCF    0A.3
185D:  BCF    03.5
185E:  CALL   780
185F:  BSF    0A.4
1860:  BSF    0A.3
....................       printf(oled_printf, "%u", T_read[i+7]); 
1861:  MOVLW  07
1862:  ADDWF  41,W
1863:  ADDLW  46
1864:  MOVWF  04
1865:  BCF    03.7
1866:  MOVF   00,W
1867:  BSF    03.5
1868:  MOVWF  44
1869:  MOVWF  45
186A:  MOVLW  1B
186B:  MOVWF  46
186C:  BCF    0A.4
186D:  BCF    0A.3
186E:  BCF    03.5
186F:  CALL   793
1870:  BSF    0A.4
1871:  BSF    0A.3
....................        
....................       ao_T = ao_T + T_read[i] + T_read[i+7]; 
1872:  MOVLW  46
1873:  ADDWF  41,W
1874:  MOVWF  04
1875:  BCF    03.7
1876:  MOVF   00,W
1877:  BSF    03.5
1878:  CLRF   4B
1879:  MOVWF  4A
187A:  BCF    0A.3
187B:  BCF    03.5
187C:  CALL   300
187D:  BSF    0A.3
187E:  BSF    03.5
187F:  CLRF   45
1880:  MOVF   04,W
1881:  MOVWF  44
1882:  BCF    45.0
1883:  BTFSC  03.7
1884:  BSF    45.0
1885:  BCF    03.1
1886:  BCF    03.5
1887:  MOVF   3A,W
1888:  BSF    03.5
1889:  MOVWF  4F
188A:  BCF    03.5
188B:  MOVF   39,W
188C:  BSF    03.5
188D:  MOVWF  4E
188E:  BCF    03.5
188F:  MOVF   38,W
1890:  BSF    03.5
1891:  MOVWF  4D
1892:  BCF    03.5
1893:  MOVF   37,W
1894:  BSF    03.5
1895:  MOVWF  4C
1896:  MOVF   7A,W
1897:  MOVWF  53
1898:  MOVF   79,W
1899:  MOVWF  52
189A:  MOVF   78,W
189B:  MOVWF  51
189C:  MOVF   77,W
189D:  MOVWF  50
189E:  BCF    0A.3
189F:  BCF    03.5
18A0:  CALL   31F
18A1:  BSF    0A.3
18A2:  BSF    03.5
18A3:  MOVF   44,W
18A4:  MOVWF  04
18A5:  BCF    03.7
18A6:  BTFSC  45.0
18A7:  BSF    03.7
18A8:  MOVF   7A,W
18A9:  MOVWF  49
18AA:  MOVF   79,W
18AB:  MOVWF  48
18AC:  MOVF   78,W
18AD:  MOVWF  47
18AE:  MOVF   77,W
18AF:  MOVWF  46
18B0:  MOVLW  07
18B1:  BCF    03.5
18B2:  ADDWF  41,W
18B3:  ADDLW  46
18B4:  MOVWF  04
18B5:  BCF    03.7
18B6:  MOVF   00,W
18B7:  BSF    03.5
18B8:  CLRF   4B
18B9:  MOVWF  4A
18BA:  BCF    0A.3
18BB:  BCF    03.5
18BC:  CALL   300
18BD:  BSF    0A.3
18BE:  BSF    03.5
18BF:  CLRF   4B
18C0:  MOVF   04,W
18C1:  MOVWF  4A
18C2:  BCF    4B.0
18C3:  BTFSC  03.7
18C4:  BSF    4B.0
18C5:  BCF    03.1
18C6:  MOVF   49,W
18C7:  MOVWF  4F
18C8:  MOVF   48,W
18C9:  MOVWF  4E
18CA:  MOVF   47,W
18CB:  MOVWF  4D
18CC:  MOVF   46,W
18CD:  MOVWF  4C
18CE:  MOVF   7A,W
18CF:  MOVWF  53
18D0:  MOVF   79,W
18D1:  MOVWF  52
18D2:  MOVF   78,W
18D3:  MOVWF  51
18D4:  MOVF   77,W
18D5:  MOVWF  50
18D6:  BCF    0A.3
18D7:  BCF    03.5
18D8:  CALL   31F
18D9:  BSF    0A.3
18DA:  BSF    03.5
18DB:  MOVF   4A,W
18DC:  MOVWF  04
18DD:  BCF    03.7
18DE:  BTFSC  4B.0
18DF:  BSF    03.7
18E0:  MOVF   7A,W
18E1:  BCF    03.5
18E2:  MOVWF  3A
18E3:  MOVF   79,W
18E4:  MOVWF  39
18E5:  MOVF   78,W
18E6:  MOVWF  38
18E7:  MOVF   77,W
18E8:  MOVWF  37
18E9:  INCF   41,F
18EA:  GOTO   019
....................    } 
....................    ao_T /= 14; 
18EB:  MOVF   3A,W
18EC:  BSF    03.5
18ED:  MOVWF  47
18EE:  BCF    03.5
18EF:  MOVF   39,W
18F0:  BSF    03.5
18F1:  MOVWF  46
18F2:  BCF    03.5
18F3:  MOVF   38,W
18F4:  BSF    03.5
18F5:  MOVWF  45
18F6:  BCF    03.5
18F7:  MOVF   37,W
18F8:  BSF    03.5
18F9:  MOVWF  44
18FA:  CLRF   4B
18FB:  CLRF   4A
18FC:  MOVLW  60
18FD:  MOVWF  49
18FE:  MOVLW  82
18FF:  MOVWF  48
1900:  BCF    0A.3
1901:  BCF    03.5
1902:  CALL   465
1903:  BSF    0A.3
1904:  MOVF   7A,W
1905:  MOVWF  3A
1906:  MOVF   79,W
1907:  MOVWF  39
1908:  MOVF   78,W
1909:  MOVWF  38
190A:  MOVF   77,W
190B:  MOVWF  37
....................    oled_goto_xy(1, 7); 
190C:  MOVLW  01
190D:  BSF    03.5
190E:  MOVWF  45
190F:  MOVLW  07
1910:  MOVWF  46
1911:  BCF    0A.4
1912:  BCF    0A.3
1913:  BCF    03.5
1914:  CALL   780
1915:  BSF    0A.4
1916:  BSF    0A.3
....................    oled_printf("-> Average: "); 
1917:  MOVLW  44
1918:  BSF    03.6
1919:  MOVWF  0D
191A:  MOVLW  02
191B:  MOVWF  0F
191C:  BCF    0A.4
191D:  BCF    03.6
191E:  CALL   5E8
191F:  BSF    0A.4
....................    printf(oled_printf, "%.2f", ao_T); 
1920:  MOVLW  89
1921:  MOVWF  04
1922:  MOVF   3A,W
1923:  BSF    03.5
1924:  MOVWF  47
1925:  BCF    03.5
1926:  MOVF   39,W
1927:  BSF    03.5
1928:  MOVWF  46
1929:  BCF    03.5
192A:  MOVF   38,W
192B:  BSF    03.5
192C:  MOVWF  45
192D:  BCF    03.5
192E:  MOVF   37,W
192F:  BSF    03.5
1930:  MOVWF  44
1931:  MOVLW  02
1932:  MOVWF  48
1933:  BCF    0A.3
1934:  BCF    03.5
1935:  CALL   582
1936:  BSF    0A.3
....................    OLED_PutCustomC(degree); 
1937:  BSF    03.5
1938:  CLRF   45
1939:  MOVLW  26
193A:  MOVWF  44
193B:  BCF    0A.4
193C:  BCF    03.5
193D:  CALL   65C
193E:  BSF    0A.4
....................    oled_printf("C"); 
193F:  MOVLW  4B
1940:  BSF    03.6
1941:  MOVWF  0D
1942:  MOVLW  02
1943:  MOVWF  0F
1944:  BCF    0A.4
1945:  BCF    03.6
1946:  CALL   5E8
1947:  BSF    0A.4
1948:  BSF    0A.3
1949:  BSF    0A.4
194A:  GOTO   38E (RETURN)
.................... } 
....................  
.................... void mang_do_am_oled_mode_4() 
.................... { 
....................    ao_RH = 0; 
194B:  CLRF   3E
194C:  CLRF   3D
194D:  CLRF   3C
194E:  CLRF   3B
....................    oled_goto_xy(3,1); 
194F:  MOVLW  03
1950:  BSF    03.5
1951:  MOVWF  45
1952:  MOVLW  01
1953:  MOVWF  46
1954:  BCF    0A.4
1955:  BCF    0A.3
1956:  BCF    03.5
1957:  CALL   780
1958:  BSF    0A.4
1959:  BSF    0A.3
....................    oled_printf("HUMIDITY UPDATED"); 
195A:  MOVLW  4C
195B:  BSF    03.6
195C:  MOVWF  0D
195D:  MOVLW  02
195E:  MOVWF  0F
195F:  BCF    0A.4
1960:  BCF    03.6
1961:  CALL   5E8
1962:  BSF    0A.4
....................    for (i = 0; i<7; i++) 
1963:  CLRF   41
1964:  MOVF   41,W
1965:  SUBLW  06
1966:  BTFSS  03.0
1967:  GOTO   236
....................    { 
....................       oled_goto_xy(3*i+1, 3); 
1968:  MOVLW  03
1969:  BSF    03.5
196A:  MOVWF  56
196B:  BCF    03.5
196C:  MOVF   41,W
196D:  BSF    03.5
196E:  MOVWF  57
196F:  BCF    0A.4
1970:  BCF    0A.3
1971:  BCF    03.5
1972:  CALL   47F
1973:  BSF    0A.4
1974:  BSF    0A.3
1975:  MOVLW  01
1976:  ADDWF  78,W
1977:  BSF    03.5
1978:  MOVWF  44
1979:  MOVWF  45
197A:  MOVLW  03
197B:  MOVWF  46
197C:  BCF    0A.4
197D:  BCF    0A.3
197E:  BCF    03.5
197F:  CALL   780
1980:  BSF    0A.4
1981:  BSF    0A.3
....................       printf(oled_printf, "%u", RH_read[i]); 
1982:  MOVLW  A0
1983:  ADDWF  41,W
1984:  MOVWF  04
1985:  BCF    03.7
1986:  MOVF   00,W
1987:  BSF    03.5
1988:  MOVWF  44
1989:  MOVWF  45
198A:  MOVLW  1B
198B:  MOVWF  46
198C:  BCF    0A.4
198D:  BCF    0A.3
198E:  BCF    03.5
198F:  CALL   793
1990:  BSF    0A.4
1991:  BSF    0A.3
....................        
....................       oled_goto_xy(3*i+1, 5); 
1992:  MOVLW  03
1993:  BSF    03.5
1994:  MOVWF  56
1995:  BCF    03.5
1996:  MOVF   41,W
1997:  BSF    03.5
1998:  MOVWF  57
1999:  BCF    0A.4
199A:  BCF    0A.3
199B:  BCF    03.5
199C:  CALL   47F
199D:  BSF    0A.4
199E:  BSF    0A.3
199F:  MOVLW  01
19A0:  ADDWF  78,W
19A1:  BSF    03.5
19A2:  MOVWF  44
19A3:  MOVWF  45
19A4:  MOVLW  05
19A5:  MOVWF  46
19A6:  BCF    0A.4
19A7:  BCF    0A.3
19A8:  BCF    03.5
19A9:  CALL   780
19AA:  BSF    0A.4
19AB:  BSF    0A.3
....................       printf(oled_printf, "%u", RH_read[i+7]); 
19AC:  MOVLW  07
19AD:  ADDWF  41,W
19AE:  ADDLW  A0
19AF:  MOVWF  04
19B0:  BCF    03.7
19B1:  MOVF   00,W
19B2:  BSF    03.5
19B3:  MOVWF  44
19B4:  MOVWF  45
19B5:  MOVLW  1B
19B6:  MOVWF  46
19B7:  BCF    0A.4
19B8:  BCF    0A.3
19B9:  BCF    03.5
19BA:  CALL   793
19BB:  BSF    0A.4
19BC:  BSF    0A.3
....................         
....................       ao_RH = ao_RH + RH_read[i] + RH_read[i+7]; 
19BD:  MOVLW  A0
19BE:  ADDWF  41,W
19BF:  MOVWF  04
19C0:  BCF    03.7
19C1:  MOVF   00,W
19C2:  BSF    03.5
19C3:  CLRF   4B
19C4:  MOVWF  4A
19C5:  BCF    0A.3
19C6:  BCF    03.5
19C7:  CALL   300
19C8:  BSF    0A.3
19C9:  BSF    03.5
19CA:  CLRF   45
19CB:  MOVF   04,W
19CC:  MOVWF  44
19CD:  BCF    45.0
19CE:  BTFSC  03.7
19CF:  BSF    45.0
19D0:  BCF    03.1
19D1:  BCF    03.5
19D2:  MOVF   3E,W
19D3:  BSF    03.5
19D4:  MOVWF  4F
19D5:  BCF    03.5
19D6:  MOVF   3D,W
19D7:  BSF    03.5
19D8:  MOVWF  4E
19D9:  BCF    03.5
19DA:  MOVF   3C,W
19DB:  BSF    03.5
19DC:  MOVWF  4D
19DD:  BCF    03.5
19DE:  MOVF   3B,W
19DF:  BSF    03.5
19E0:  MOVWF  4C
19E1:  MOVF   7A,W
19E2:  MOVWF  53
19E3:  MOVF   79,W
19E4:  MOVWF  52
19E5:  MOVF   78,W
19E6:  MOVWF  51
19E7:  MOVF   77,W
19E8:  MOVWF  50
19E9:  BCF    0A.3
19EA:  BCF    03.5
19EB:  CALL   31F
19EC:  BSF    0A.3
19ED:  BSF    03.5
19EE:  MOVF   44,W
19EF:  MOVWF  04
19F0:  BCF    03.7
19F1:  BTFSC  45.0
19F2:  BSF    03.7
19F3:  MOVF   7A,W
19F4:  MOVWF  49
19F5:  MOVF   79,W
19F6:  MOVWF  48
19F7:  MOVF   78,W
19F8:  MOVWF  47
19F9:  MOVF   77,W
19FA:  MOVWF  46
19FB:  MOVLW  07
19FC:  BCF    03.5
19FD:  ADDWF  41,W
19FE:  ADDLW  A0
19FF:  MOVWF  04
1A00:  BCF    03.7
1A01:  MOVF   00,W
1A02:  BSF    03.5
1A03:  CLRF   4B
1A04:  MOVWF  4A
1A05:  BCF    0A.3
1A06:  BCF    03.5
1A07:  CALL   300
1A08:  BSF    0A.3
1A09:  BSF    03.5
1A0A:  CLRF   4B
1A0B:  MOVF   04,W
1A0C:  MOVWF  4A
1A0D:  BCF    4B.0
1A0E:  BTFSC  03.7
1A0F:  BSF    4B.0
1A10:  BCF    03.1
1A11:  MOVF   49,W
1A12:  MOVWF  4F
1A13:  MOVF   48,W
1A14:  MOVWF  4E
1A15:  MOVF   47,W
1A16:  MOVWF  4D
1A17:  MOVF   46,W
1A18:  MOVWF  4C
1A19:  MOVF   7A,W
1A1A:  MOVWF  53
1A1B:  MOVF   79,W
1A1C:  MOVWF  52
1A1D:  MOVF   78,W
1A1E:  MOVWF  51
1A1F:  MOVF   77,W
1A20:  MOVWF  50
1A21:  BCF    0A.3
1A22:  BCF    03.5
1A23:  CALL   31F
1A24:  BSF    0A.3
1A25:  BSF    03.5
1A26:  MOVF   4A,W
1A27:  MOVWF  04
1A28:  BCF    03.7
1A29:  BTFSC  4B.0
1A2A:  BSF    03.7
1A2B:  MOVF   7A,W
1A2C:  BCF    03.5
1A2D:  MOVWF  3E
1A2E:  MOVF   79,W
1A2F:  MOVWF  3D
1A30:  MOVF   78,W
1A31:  MOVWF  3C
1A32:  MOVF   77,W
1A33:  MOVWF  3B
1A34:  INCF   41,F
1A35:  GOTO   164
....................    } 
....................    ao_RH /= 14; 
1A36:  MOVF   3E,W
1A37:  BSF    03.5
1A38:  MOVWF  47
1A39:  BCF    03.5
1A3A:  MOVF   3D,W
1A3B:  BSF    03.5
1A3C:  MOVWF  46
1A3D:  BCF    03.5
1A3E:  MOVF   3C,W
1A3F:  BSF    03.5
1A40:  MOVWF  45
1A41:  BCF    03.5
1A42:  MOVF   3B,W
1A43:  BSF    03.5
1A44:  MOVWF  44
1A45:  CLRF   4B
1A46:  CLRF   4A
1A47:  MOVLW  60
1A48:  MOVWF  49
1A49:  MOVLW  82
1A4A:  MOVWF  48
1A4B:  BCF    0A.3
1A4C:  BCF    03.5
1A4D:  CALL   465
1A4E:  BSF    0A.3
1A4F:  MOVF   7A,W
1A50:  MOVWF  3E
1A51:  MOVF   79,W
1A52:  MOVWF  3D
1A53:  MOVF   78,W
1A54:  MOVWF  3C
1A55:  MOVF   77,W
1A56:  MOVWF  3B
....................    oled_goto_xy(1, 7); 
1A57:  MOVLW  01
1A58:  BSF    03.5
1A59:  MOVWF  45
1A5A:  MOVLW  07
1A5B:  MOVWF  46
1A5C:  BCF    0A.4
1A5D:  BCF    0A.3
1A5E:  BCF    03.5
1A5F:  CALL   780
1A60:  BSF    0A.4
1A61:  BSF    0A.3
....................    oled_printf("-> Average: "); 
1A62:  MOVLW  55
1A63:  BSF    03.6
1A64:  MOVWF  0D
1A65:  MOVLW  02
1A66:  MOVWF  0F
1A67:  BCF    0A.4
1A68:  BCF    03.6
1A69:  CALL   5E8
1A6A:  BSF    0A.4
....................    printf(oled_printf, "%.2f", ao_RH); 
1A6B:  MOVLW  89
1A6C:  MOVWF  04
1A6D:  MOVF   3E,W
1A6E:  BSF    03.5
1A6F:  MOVWF  47
1A70:  BCF    03.5
1A71:  MOVF   3D,W
1A72:  BSF    03.5
1A73:  MOVWF  46
1A74:  BCF    03.5
1A75:  MOVF   3C,W
1A76:  BSF    03.5
1A77:  MOVWF  45
1A78:  BCF    03.5
1A79:  MOVF   3B,W
1A7A:  BSF    03.5
1A7B:  MOVWF  44
1A7C:  MOVLW  02
1A7D:  MOVWF  48
1A7E:  BCF    0A.3
1A7F:  BCF    03.5
1A80:  CALL   582
1A81:  BSF    0A.3
....................    oled_printf("%"); 
1A82:  MOVLW  5C
1A83:  BSF    03.6
1A84:  MOVWF  0D
1A85:  MOVLW  02
1A86:  MOVWF  0F
1A87:  BCF    0A.4
1A88:  BCF    03.6
1A89:  CALL   5E8
1A8A:  BSF    0A.4
1A8B:  BSF    0A.3
1A8C:  BSF    0A.4
1A8D:  GOTO   3BB (RETURN)
.................... } 
....................  
.................... void dht11_read() 
.................... { 
....................    RH_ng = read_data(); 
*
0EE8:  BCF    0A.3
0EE9:  CALL   707
0EEA:  BSF    0A.3
0EEB:  MOVF   78,W
0EEC:  MOVWF  34
....................    RH_tp = read_data();          
0EED:  BCF    0A.3
0EEE:  CALL   707
0EEF:  BSF    0A.3
0EF0:  MOVF   78,W
0EF1:  MOVWF  35
....................    T_ng = read_data(); 
0EF2:  BCF    0A.3
0EF3:  CALL   707
0EF4:  BSF    0A.3
0EF5:  MOVF   78,W
0EF6:  MOVWF  32
....................    T_tp  = read_data();        
0EF7:  BCF    0A.3
0EF8:  CALL   707
0EF9:  BSF    0A.3
0EFA:  MOVF   78,W
0EFB:  MOVWF  33
....................    Checksum = read_data(); 
0EFC:  BCF    0A.3
0EFD:  CALL   707
0EFE:  BSF    0A.3
0EFF:  MOVF   78,W
0F00:  MOVWF  36
....................    setup_timer_1(T1_DISABLED); 
0F01:  CLRF   10
....................           
....................    if(CheckSum == ((RH_ng + RH_tp + T_ng + T_tp) & 0xFF)) 
0F02:  MOVF   35,W
0F03:  ADDWF  34,W
0F04:  ADDWF  32,W
0F05:  ADDWF  33,W
0F06:  SUBWF  36,W
0F07:  BTFSS  03.2
0F08:  GOTO   7F3
....................    { 
....................       oled_128x64_mode_0(); 
....................    } 
*
0FF3:  BSF    0A.3
0FF4:  BSF    0A.4
0FF5:  GOTO   36A (RETURN)
.................... } 
....................  
.................... void nhiet_do_vuot_nguong() 
.................... { 
....................    if (T_ng <= T_max) 
*
1038:  MOVF   32,W
1039:  SUBWF  43,W
103A:  BTFSS  03.0
103B:  GOTO   0B5
....................    { 
....................       eeprom_write(64, hour); 
103C:  MOVLW  40
103D:  BSF    03.5
103E:  MOVWF  45
103F:  BCF    03.5
1040:  MOVF   2D,W
1041:  BSF    03.5
1042:  MOVWF  46
1043:  BCF    0A.4
1044:  BCF    03.5
1045:  CALL   413
1046:  BSF    0A.4
....................       eeprom_write(65, minute); 
1047:  MOVLW  41
1048:  BSF    03.5
1049:  MOVWF  45
104A:  BCF    03.5
104B:  MOVF   2C,W
104C:  BSF    03.5
104D:  MOVWF  46
104E:  BCF    0A.4
104F:  BCF    03.5
1050:  CALL   413
1051:  BSF    0A.4
....................       eeprom_write(66, second); 
1052:  MOVLW  42
1053:  BSF    03.5
1054:  MOVWF  45
1055:  BCF    03.5
1056:  MOVF   2B,W
1057:  BSF    03.5
1058:  MOVWF  46
1059:  BCF    0A.4
105A:  BCF    03.5
105B:  CALL   413
105C:  BSF    0A.4
....................       eeprom_write(67, date); 
105D:  MOVLW  43
105E:  BSF    03.5
105F:  MOVWF  45
1060:  BCF    03.5
1061:  MOVF   2E,W
1062:  BSF    03.5
1063:  MOVWF  46
1064:  BCF    0A.4
1065:  BCF    03.5
1066:  CALL   413
1067:  BSF    0A.4
....................       eeprom_write(68, month); 
1068:  MOVLW  44
1069:  BSF    03.5
106A:  MOVWF  45
106B:  BCF    03.5
106C:  MOVF   2F,W
106D:  BSF    03.5
106E:  MOVWF  46
106F:  BCF    0A.4
1070:  BCF    03.5
1071:  CALL   413
1072:  BSF    0A.4
....................       eeprom_write(69, year); 
1073:  MOVLW  45
1074:  BSF    03.5
1075:  MOVWF  45
1076:  BCF    03.5
1077:  MOVF   30,W
1078:  BSF    03.5
1079:  MOVWF  46
107A:  BCF    0A.4
107B:  BCF    03.5
107C:  CALL   413
107D:  BSF    0A.4
....................        
....................       hour_Te = eeprom_read(72); 
107E:  MOVLW  48
107F:  BSF    03.5
1080:  MOVWF  47
1081:  BCF    0A.4
1082:  BCF    03.5
1083:  CALL   7D8
1084:  BSF    0A.4
1085:  MOVF   78,W
1086:  MOVWF  6C
....................       minute_Te = eeprom_read(73); 
1087:  MOVLW  49
1088:  BSF    03.5
1089:  MOVWF  47
108A:  BCF    0A.4
108B:  BCF    03.5
108C:  CALL   7D8
108D:  BSF    0A.4
108E:  MOVF   78,W
108F:  MOVWF  6D
....................       second_Te = eeprom_read(74); 
1090:  MOVLW  4A
1091:  BSF    03.5
1092:  MOVWF  47
1093:  BCF    0A.4
1094:  BCF    03.5
1095:  CALL   7D8
1096:  BSF    0A.4
1097:  MOVF   78,W
1098:  MOVWF  6E
....................       date_Te = eeprom_read(75); 
1099:  MOVLW  4B
109A:  BSF    03.5
109B:  MOVWF  47
109C:  BCF    0A.4
109D:  BCF    03.5
109E:  CALL   7D8
109F:  BSF    0A.4
10A0:  MOVF   78,W
10A1:  MOVWF  6F
....................       month_Te = eeprom_read(76); 
10A2:  MOVLW  4C
10A3:  BSF    03.5
10A4:  MOVWF  47
10A5:  BCF    0A.4
10A6:  BCF    03.5
10A7:  CALL   7D8
10A8:  BSF    0A.4
10A9:  MOVF   78,W
10AA:  MOVWF  70
....................       year_Te = eeprom_read(77); 
10AB:  MOVLW  4D
10AC:  BSF    03.5
10AD:  MOVWF  47
10AE:  BCF    0A.4
10AF:  BCF    03.5
10B0:  CALL   7D8
10B1:  BSF    0A.4
10B2:  MOVF   78,W
10B3:  MOVWF  71
....................    } 
10B4:  GOTO   12D
....................    else 
....................    { 
....................       eeprom_write(72, hour); 
10B5:  MOVLW  48
10B6:  BSF    03.5
10B7:  MOVWF  45
10B8:  BCF    03.5
10B9:  MOVF   2D,W
10BA:  BSF    03.5
10BB:  MOVWF  46
10BC:  BCF    0A.4
10BD:  BCF    03.5
10BE:  CALL   413
10BF:  BSF    0A.4
....................       eeprom_write(73, minute); 
10C0:  MOVLW  49
10C1:  BSF    03.5
10C2:  MOVWF  45
10C3:  BCF    03.5
10C4:  MOVF   2C,W
10C5:  BSF    03.5
10C6:  MOVWF  46
10C7:  BCF    0A.4
10C8:  BCF    03.5
10C9:  CALL   413
10CA:  BSF    0A.4
....................       eeprom_write(74, second); 
10CB:  MOVLW  4A
10CC:  BSF    03.5
10CD:  MOVWF  45
10CE:  BCF    03.5
10CF:  MOVF   2B,W
10D0:  BSF    03.5
10D1:  MOVWF  46
10D2:  BCF    0A.4
10D3:  BCF    03.5
10D4:  CALL   413
10D5:  BSF    0A.4
....................       eeprom_write(75, date); 
10D6:  MOVLW  4B
10D7:  BSF    03.5
10D8:  MOVWF  45
10D9:  BCF    03.5
10DA:  MOVF   2E,W
10DB:  BSF    03.5
10DC:  MOVWF  46
10DD:  BCF    0A.4
10DE:  BCF    03.5
10DF:  CALL   413
10E0:  BSF    0A.4
....................       eeprom_write(76, month); 
10E1:  MOVLW  4C
10E2:  BSF    03.5
10E3:  MOVWF  45
10E4:  BCF    03.5
10E5:  MOVF   2F,W
10E6:  BSF    03.5
10E7:  MOVWF  46
10E8:  BCF    0A.4
10E9:  BCF    03.5
10EA:  CALL   413
10EB:  BSF    0A.4
....................       eeprom_write(77, year); 
10EC:  MOVLW  4D
10ED:  BSF    03.5
10EE:  MOVWF  45
10EF:  BCF    03.5
10F0:  MOVF   30,W
10F1:  BSF    03.5
10F2:  MOVWF  46
10F3:  BCF    0A.4
10F4:  BCF    03.5
10F5:  CALL   413
10F6:  BSF    0A.4
....................        
....................       hour_Ts = eeprom_read(64); 
10F7:  MOVLW  40
10F8:  BSF    03.5
10F9:  MOVWF  47
10FA:  BCF    0A.4
10FB:  BCF    03.5
10FC:  CALL   7D8
10FD:  BSF    0A.4
10FE:  MOVF   78,W
10FF:  MOVWF  66
....................       minute_Ts = eeprom_read(65); 
1100:  MOVLW  41
1101:  BSF    03.5
1102:  MOVWF  47
1103:  BCF    0A.4
1104:  BCF    03.5
1105:  CALL   7D8
1106:  BSF    0A.4
1107:  MOVF   78,W
1108:  MOVWF  67
....................       second_Ts = eeprom_read(66); 
1109:  MOVLW  42
110A:  BSF    03.5
110B:  MOVWF  47
110C:  BCF    0A.4
110D:  BCF    03.5
110E:  CALL   7D8
110F:  BSF    0A.4
1110:  MOVF   78,W
1111:  MOVWF  68
....................       date_Ts = eeprom_read(67); 
1112:  MOVLW  43
1113:  BSF    03.5
1114:  MOVWF  47
1115:  BCF    0A.4
1116:  BCF    03.5
1117:  CALL   7D8
1118:  BSF    0A.4
1119:  MOVF   78,W
111A:  MOVWF  69
....................       month_Ts = eeprom_read(68); 
111B:  MOVLW  44
111C:  BSF    03.5
111D:  MOVWF  47
111E:  BCF    0A.4
111F:  BCF    03.5
1120:  CALL   7D8
1121:  BSF    0A.4
1122:  MOVF   78,W
1123:  MOVWF  6A
....................       year_Ts = eeprom_read(69); 
1124:  MOVLW  45
1125:  BSF    03.5
1126:  MOVWF  47
1127:  BCF    0A.4
1128:  BCF    03.5
1129:  CALL   7D8
112A:  BSF    0A.4
112B:  MOVF   78,W
112C:  MOVWF  6B
....................    } 
112D:  BSF    0A.3
112E:  BSF    0A.4
112F:  GOTO   370 (RETURN)
.................... } 
....................  
.................... void do_am_vuot_nguong() 
.................... { 
....................    if (RH_ng <= RH_max) 
1130:  MOVF   34,W
1131:  SUBWF  42,W
1132:  BTFSS  03.0
1133:  GOTO   1AF
....................    { 
....................       eeprom_write(80, hour); 
1134:  MOVLW  50
1135:  BSF    03.5
1136:  MOVWF  45
1137:  BCF    03.5
1138:  MOVF   2D,W
1139:  BSF    03.5
113A:  MOVWF  46
113B:  BCF    0A.4
113C:  BCF    03.5
113D:  CALL   413
113E:  BSF    0A.4
....................       eeprom_write(81, minute); 
113F:  MOVLW  51
1140:  BSF    03.5
1141:  MOVWF  45
1142:  BCF    03.5
1143:  MOVF   2C,W
1144:  BSF    03.5
1145:  MOVWF  46
1146:  BCF    0A.4
1147:  BCF    03.5
1148:  CALL   413
1149:  BSF    0A.4
....................       eeprom_write(82, second); 
114A:  MOVLW  52
114B:  BSF    03.5
114C:  MOVWF  45
114D:  BCF    03.5
114E:  MOVF   2B,W
114F:  BSF    03.5
1150:  MOVWF  46
1151:  BCF    0A.4
1152:  BCF    03.5
1153:  CALL   413
1154:  BSF    0A.4
....................       eeprom_write(83, date); 
1155:  MOVLW  53
1156:  BSF    03.5
1157:  MOVWF  45
1158:  BCF    03.5
1159:  MOVF   2E,W
115A:  BSF    03.5
115B:  MOVWF  46
115C:  BCF    0A.4
115D:  BCF    03.5
115E:  CALL   413
115F:  BSF    0A.4
....................       eeprom_write(84, month); 
1160:  MOVLW  54
1161:  BSF    03.5
1162:  MOVWF  45
1163:  BCF    03.5
1164:  MOVF   2F,W
1165:  BSF    03.5
1166:  MOVWF  46
1167:  BCF    0A.4
1168:  BCF    03.5
1169:  CALL   413
116A:  BSF    0A.4
....................       eeprom_write(85, year); 
116B:  MOVLW  55
116C:  BSF    03.5
116D:  MOVWF  45
116E:  BCF    03.5
116F:  MOVF   30,W
1170:  BSF    03.5
1171:  MOVWF  46
1172:  BCF    0A.4
1173:  BCF    03.5
1174:  CALL   413
1175:  BSF    0A.4
....................        
....................       hour_RHe = eeprom_read(88); 
1176:  MOVLW  58
1177:  BSF    03.5
1178:  MOVWF  47
1179:  BCF    0A.4
117A:  BCF    03.5
117B:  CALL   7D8
117C:  BSF    0A.4
117D:  MOVF   78,W
117E:  MOVWF  7C
....................       minute_RHe = eeprom_read(89); 
117F:  MOVLW  59
1180:  BSF    03.5
1181:  MOVWF  47
1182:  BCF    0A.4
1183:  BCF    03.5
1184:  CALL   7D8
1185:  BSF    0A.4
1186:  MOVF   78,W
1187:  MOVWF  7D
....................       second_RHe = eeprom_read(90); 
1188:  MOVLW  5A
1189:  BSF    03.5
118A:  MOVWF  47
118B:  BCF    0A.4
118C:  BCF    03.5
118D:  CALL   7D8
118E:  BSF    0A.4
118F:  MOVF   78,W
1190:  MOVWF  7E
....................       date_RHe = eeprom_read(91); 
1191:  MOVLW  5B
1192:  BSF    03.5
1193:  MOVWF  47
1194:  BCF    0A.4
1195:  BCF    03.5
1196:  CALL   7D8
1197:  BSF    0A.4
1198:  MOVF   78,W
1199:  BSF    03.5
119A:  MOVWF  40
....................       month_RHe = eeprom_read(92); 
119B:  MOVLW  5C
119C:  MOVWF  47
119D:  BCF    0A.4
119E:  BCF    03.5
119F:  CALL   7D8
11A0:  BSF    0A.4
11A1:  MOVF   78,W
11A2:  BSF    03.5
11A3:  MOVWF  41
....................       year_RHe = eeprom_read(93); 
11A4:  MOVLW  5D
11A5:  MOVWF  47
11A6:  BCF    0A.4
11A7:  BCF    03.5
11A8:  CALL   7D8
11A9:  BSF    0A.4
11AA:  MOVF   78,W
11AB:  BSF    03.5
11AC:  MOVWF  42
....................    } 
11AD:  GOTO   228
11AE:  BCF    03.5
....................    else 
....................    { 
....................       eeprom_write(88, hour); 
11AF:  MOVLW  58
11B0:  BSF    03.5
11B1:  MOVWF  45
11B2:  BCF    03.5
11B3:  MOVF   2D,W
11B4:  BSF    03.5
11B5:  MOVWF  46
11B6:  BCF    0A.4
11B7:  BCF    03.5
11B8:  CALL   413
11B9:  BSF    0A.4
....................       eeprom_write(89, minute); 
11BA:  MOVLW  59
11BB:  BSF    03.5
11BC:  MOVWF  45
11BD:  BCF    03.5
11BE:  MOVF   2C,W
11BF:  BSF    03.5
11C0:  MOVWF  46
11C1:  BCF    0A.4
11C2:  BCF    03.5
11C3:  CALL   413
11C4:  BSF    0A.4
....................       eeprom_write(90, second); 
11C5:  MOVLW  5A
11C6:  BSF    03.5
11C7:  MOVWF  45
11C8:  BCF    03.5
11C9:  MOVF   2B,W
11CA:  BSF    03.5
11CB:  MOVWF  46
11CC:  BCF    0A.4
11CD:  BCF    03.5
11CE:  CALL   413
11CF:  BSF    0A.4
....................       eeprom_write(91, date); 
11D0:  MOVLW  5B
11D1:  BSF    03.5
11D2:  MOVWF  45
11D3:  BCF    03.5
11D4:  MOVF   2E,W
11D5:  BSF    03.5
11D6:  MOVWF  46
11D7:  BCF    0A.4
11D8:  BCF    03.5
11D9:  CALL   413
11DA:  BSF    0A.4
....................       eeprom_write(92, month); 
11DB:  MOVLW  5C
11DC:  BSF    03.5
11DD:  MOVWF  45
11DE:  BCF    03.5
11DF:  MOVF   2F,W
11E0:  BSF    03.5
11E1:  MOVWF  46
11E2:  BCF    0A.4
11E3:  BCF    03.5
11E4:  CALL   413
11E5:  BSF    0A.4
....................       eeprom_write(93, year); 
11E6:  MOVLW  5D
11E7:  BSF    03.5
11E8:  MOVWF  45
11E9:  BCF    03.5
11EA:  MOVF   30,W
11EB:  BSF    03.5
11EC:  MOVWF  46
11ED:  BCF    0A.4
11EE:  BCF    03.5
11EF:  CALL   413
11F0:  BSF    0A.4
....................        
....................       hour_RHs = eeprom_read(80); 
11F1:  MOVLW  50
11F2:  BSF    03.5
11F3:  MOVWF  47
11F4:  BCF    0A.4
11F5:  BCF    03.5
11F6:  CALL   7D8
11F7:  BSF    0A.4
11F8:  MOVF   78,W
11F9:  MOVWF  72
....................       minute_RHs = eeprom_read(81); 
11FA:  MOVLW  51
11FB:  BSF    03.5
11FC:  MOVWF  47
11FD:  BCF    0A.4
11FE:  BCF    03.5
11FF:  CALL   7D8
1200:  BSF    0A.4
1201:  MOVF   78,W
1202:  MOVWF  73
....................       second_RHs = eeprom_read(82); 
1203:  MOVLW  52
1204:  BSF    03.5
1205:  MOVWF  47
1206:  BCF    0A.4
1207:  BCF    03.5
1208:  CALL   7D8
1209:  BSF    0A.4
120A:  MOVF   78,W
120B:  MOVWF  74
....................       date_RHs = eeprom_read(83); 
120C:  MOVLW  53
120D:  BSF    03.5
120E:  MOVWF  47
120F:  BCF    0A.4
1210:  BCF    03.5
1211:  CALL   7D8
1212:  BSF    0A.4
1213:  MOVF   78,W
1214:  MOVWF  75
....................       month_RHs = eeprom_read(84); 
1215:  MOVLW  54
1216:  BSF    03.5
1217:  MOVWF  47
1218:  BCF    0A.4
1219:  BCF    03.5
121A:  CALL   7D8
121B:  BSF    0A.4
121C:  MOVF   78,W
121D:  MOVWF  76
....................       year_RHs = eeprom_read(85); 
121E:  MOVLW  55
121F:  BSF    03.5
1220:  MOVWF  47
1221:  BCF    0A.4
1222:  BCF    03.5
1223:  CALL   7D8
1224:  BSF    0A.4
1225:  MOVF   78,W
1226:  MOVWF  7B
1227:  BSF    03.5
....................    } 
1228:  BCF    03.5
1229:  BSF    0A.3
122A:  BSF    0A.4
122B:  GOTO   373 (RETURN)
.................... } 
....................  
.................... void lcd_20x04_8bit_mode_0() 
.................... { 
....................    lcd_command(0x80); 
*
060A:  MOVLW  80
060B:  BSF    03.5
060C:  MOVWF  46
060D:  BCF    03.5
060E:  CALL   3CD
....................    lcd_data("   TEMPERATURE      "); 
060F:  MOVLW  5D
0610:  BSF    03.6
0611:  MOVWF  0D
0612:  MOVLW  02
0613:  MOVWF  0F
0614:  BCF    03.6
0615:  CALL   596
....................    lcd_command(0xc0); 
0616:  MOVLW  C0
0617:  BSF    03.5
0618:  MOVWF  46
0619:  BCF    03.5
061A:  CALL   3CD
....................    lcd_data("        HUMIDITY    "); 
061B:  MOVLW  68
061C:  BSF    03.6
061D:  MOVWF  0D
061E:  MOVLW  02
061F:  MOVWF  0F
0620:  BCF    03.6
0621:  CALL   596
....................    lcd_command(0x94); 
0622:  MOVLW  94
0623:  BSF    03.5
0624:  MOVWF  46
0625:  BCF    03.5
0626:  CALL   3CD
....................    lcd_data("  MONITORING SYSTEM "); 
0627:  MOVLW  73
0628:  BSF    03.6
0629:  MOVWF  0D
062A:  MOVLW  02
062B:  MOVWF  0F
062C:  BCF    03.6
062D:  CALL   596
....................    lcd_command(0xd4); 
062E:  MOVLW  D4
062F:  BSF    03.5
0630:  MOVWF  46
0631:  BCF    03.5
0632:  CALL   3CD
....................    lcd_data("                    "); 
0633:  MOVLW  7E
0634:  BSF    03.6
0635:  MOVWF  0D
0636:  MOVLW  02
0637:  MOVWF  0F
0638:  BCF    03.6
0639:  CALL   596
063A:  BSF    0A.3
063B:  BSF    0A.4
063C:  GOTO   357 (RETURN)
.................... } 
....................  
.................... void lcd_20x04_8bit_mode_1() 
.................... { 
....................    lcd_command(0x96); 
*
0800:  MOVLW  96
0801:  BSF    03.5
0802:  MOVWF  46
0803:  BCF    0A.3
0804:  BCF    03.5
0805:  CALL   3CD
0806:  BSF    0A.3
....................    lcd_data(hour_Ts/10+48); 
0807:  MOVF   66,W
0808:  BSF    03.5
0809:  MOVWF  54
080A:  MOVLW  0A
080B:  MOVWF  55
080C:  BCF    0A.3
080D:  BCF    03.5
080E:  CALL   63D
080F:  BSF    0A.3
0810:  MOVLW  30
0811:  ADDWF  78,W
0812:  BSF    03.5
0813:  MOVWF  45
0814:  MOVWF  48
0815:  BCF    0A.3
0816:  BCF    03.5
0817:  CALL   58C
0818:  BSF    0A.3
....................    lcd_data(hour_Ts%10+48); 
0819:  MOVF   66,W
081A:  BSF    03.5
081B:  MOVWF  54
081C:  MOVLW  0A
081D:  MOVWF  55
081E:  BCF    0A.3
081F:  BCF    03.5
0820:  CALL   63D
0821:  BSF    0A.3
0822:  MOVLW  30
0823:  ADDWF  77,W
0824:  BSF    03.5
0825:  MOVWF  45
0826:  MOVWF  48
0827:  BCF    0A.3
0828:  BCF    03.5
0829:  CALL   58C
082A:  BSF    0A.3
....................    lcd_data(":"); 
082B:  MOVLW  89
082C:  BSF    03.6
082D:  MOVWF  0D
082E:  MOVLW  02
082F:  MOVWF  0F
0830:  BCF    0A.3
0831:  BCF    03.6
0832:  CALL   596
0833:  BSF    0A.3
....................    lcd_data(minute_Ts/10+48); 
0834:  MOVF   67,W
0835:  BSF    03.5
0836:  MOVWF  54
0837:  MOVLW  0A
0838:  MOVWF  55
0839:  BCF    0A.3
083A:  BCF    03.5
083B:  CALL   63D
083C:  BSF    0A.3
083D:  MOVLW  30
083E:  ADDWF  78,W
083F:  BSF    03.5
0840:  MOVWF  45
0841:  MOVWF  48
0842:  BCF    0A.3
0843:  BCF    03.5
0844:  CALL   58C
0845:  BSF    0A.3
....................    lcd_data(minute_Ts%10+48); 
0846:  MOVF   67,W
0847:  BSF    03.5
0848:  MOVWF  54
0849:  MOVLW  0A
084A:  MOVWF  55
084B:  BCF    0A.3
084C:  BCF    03.5
084D:  CALL   63D
084E:  BSF    0A.3
084F:  MOVLW  30
0850:  ADDWF  77,W
0851:  BSF    03.5
0852:  MOVWF  45
0853:  MOVWF  48
0854:  BCF    0A.3
0855:  BCF    03.5
0856:  CALL   58C
0857:  BSF    0A.3
....................    lcd_data(":"); 
0858:  MOVLW  8A
0859:  BSF    03.6
085A:  MOVWF  0D
085B:  MOVLW  02
085C:  MOVWF  0F
085D:  BCF    0A.3
085E:  BCF    03.6
085F:  CALL   596
0860:  BSF    0A.3
....................    lcd_data(second_Ts/10+48); 
0861:  MOVF   68,W
0862:  BSF    03.5
0863:  MOVWF  54
0864:  MOVLW  0A
0865:  MOVWF  55
0866:  BCF    0A.3
0867:  BCF    03.5
0868:  CALL   63D
0869:  BSF    0A.3
086A:  MOVLW  30
086B:  ADDWF  78,W
086C:  BSF    03.5
086D:  MOVWF  45
086E:  MOVWF  48
086F:  BCF    0A.3
0870:  BCF    03.5
0871:  CALL   58C
0872:  BSF    0A.3
....................    lcd_data(second_Ts%10+48); 
0873:  MOVF   68,W
0874:  BSF    03.5
0875:  MOVWF  54
0876:  MOVLW  0A
0877:  MOVWF  55
0878:  BCF    0A.3
0879:  BCF    03.5
087A:  CALL   63D
087B:  BSF    0A.3
087C:  MOVLW  30
087D:  ADDWF  77,W
087E:  BSF    03.5
087F:  MOVWF  45
0880:  MOVWF  48
0881:  BCF    0A.3
0882:  BCF    03.5
0883:  CALL   58C
0884:  BSF    0A.3
....................    lcd_data(", "); 
0885:  MOVLW  8B
0886:  BSF    03.6
0887:  MOVWF  0D
0888:  MOVLW  02
0889:  MOVWF  0F
088A:  BCF    0A.3
088B:  BCF    03.6
088C:  CALL   596
088D:  BSF    0A.3
....................    lcd_data(date_Ts/10+48); 
088E:  MOVF   69,W
088F:  BSF    03.5
0890:  MOVWF  54
0891:  MOVLW  0A
0892:  MOVWF  55
0893:  BCF    0A.3
0894:  BCF    03.5
0895:  CALL   63D
0896:  BSF    0A.3
0897:  MOVLW  30
0898:  ADDWF  78,W
0899:  BSF    03.5
089A:  MOVWF  45
089B:  MOVWF  48
089C:  BCF    0A.3
089D:  BCF    03.5
089E:  CALL   58C
089F:  BSF    0A.3
....................    lcd_data(date_Ts%10+48); 
08A0:  MOVF   69,W
08A1:  BSF    03.5
08A2:  MOVWF  54
08A3:  MOVLW  0A
08A4:  MOVWF  55
08A5:  BCF    0A.3
08A6:  BCF    03.5
08A7:  CALL   63D
08A8:  BSF    0A.3
08A9:  MOVLW  30
08AA:  ADDWF  77,W
08AB:  BSF    03.5
08AC:  MOVWF  45
08AD:  MOVWF  48
08AE:  BCF    0A.3
08AF:  BCF    03.5
08B0:  CALL   58C
08B1:  BSF    0A.3
....................    lcd_data("/"); 
08B2:  MOVLW  8D
08B3:  BSF    03.6
08B4:  MOVWF  0D
08B5:  MOVLW  02
08B6:  MOVWF  0F
08B7:  BCF    0A.3
08B8:  BCF    03.6
08B9:  CALL   596
08BA:  BSF    0A.3
....................    lcd_data(month_Ts/10+48); 
08BB:  MOVF   6A,W
08BC:  BSF    03.5
08BD:  MOVWF  54
08BE:  MOVLW  0A
08BF:  MOVWF  55
08C0:  BCF    0A.3
08C1:  BCF    03.5
08C2:  CALL   63D
08C3:  BSF    0A.3
08C4:  MOVLW  30
08C5:  ADDWF  78,W
08C6:  BSF    03.5
08C7:  MOVWF  45
08C8:  MOVWF  48
08C9:  BCF    0A.3
08CA:  BCF    03.5
08CB:  CALL   58C
08CC:  BSF    0A.3
....................    lcd_data(month_Ts%10+48); 
08CD:  MOVF   6A,W
08CE:  BSF    03.5
08CF:  MOVWF  54
08D0:  MOVLW  0A
08D1:  MOVWF  55
08D2:  BCF    0A.3
08D3:  BCF    03.5
08D4:  CALL   63D
08D5:  BSF    0A.3
08D6:  MOVLW  30
08D7:  ADDWF  77,W
08D8:  BSF    03.5
08D9:  MOVWF  45
08DA:  MOVWF  48
08DB:  BCF    0A.3
08DC:  BCF    03.5
08DD:  CALL   58C
08DE:  BSF    0A.3
....................    lcd_data("/"); 
08DF:  MOVLW  8E
08E0:  BSF    03.6
08E1:  MOVWF  0D
08E2:  MOVLW  02
08E3:  MOVWF  0F
08E4:  BCF    0A.3
08E5:  BCF    03.6
08E6:  CALL   596
08E7:  BSF    0A.3
....................    lcd_data(year_Ts/10+48); 
08E8:  MOVF   6B,W
08E9:  BSF    03.5
08EA:  MOVWF  54
08EB:  MOVLW  0A
08EC:  MOVWF  55
08ED:  BCF    0A.3
08EE:  BCF    03.5
08EF:  CALL   63D
08F0:  BSF    0A.3
08F1:  MOVLW  30
08F2:  ADDWF  78,W
08F3:  BSF    03.5
08F4:  MOVWF  45
08F5:  MOVWF  48
08F6:  BCF    0A.3
08F7:  BCF    03.5
08F8:  CALL   58C
08F9:  BSF    0A.3
....................    lcd_data(year_Ts%10+48); 
08FA:  MOVF   6B,W
08FB:  BSF    03.5
08FC:  MOVWF  54
08FD:  MOVLW  0A
08FE:  MOVWF  55
08FF:  BCF    0A.3
0900:  BCF    03.5
0901:  CALL   63D
0902:  BSF    0A.3
0903:  MOVLW  30
0904:  ADDWF  77,W
0905:  BSF    03.5
0906:  MOVWF  45
0907:  MOVWF  48
0908:  BCF    0A.3
0909:  BCF    03.5
090A:  CALL   58C
090B:  BSF    0A.3
....................    lcd_command(0xd4); 
090C:  MOVLW  D4
090D:  BSF    03.5
090E:  MOVWF  46
090F:  BCF    0A.3
0910:  BCF    03.5
0911:  CALL   3CD
0912:  BSF    0A.3
....................    lcd_data(0x7e); 
0913:  MOVLW  7E
0914:  BSF    03.5
0915:  MOVWF  48
0916:  BCF    0A.3
0917:  BCF    03.5
0918:  CALL   58C
0919:  BSF    0A.3
....................     
....................    if (T_ng > T_max) 
091A:  MOVF   32,W
091B:  SUBWF  43,W
091C:  BTFSC  03.0
091D:  GOTO   183
....................    { 
....................       lcd_command(0x80); 
091E:  MOVLW  80
091F:  BSF    03.5
0920:  MOVWF  46
0921:  BCF    0A.3
0922:  BCF    03.5
0923:  CALL   3CD
0924:  BSF    0A.3
....................       lcd_data("  HIGH TEMPERATURE  "); 
0925:  MOVLW  8F
0926:  BSF    03.6
0927:  MOVWF  0D
0928:  MOVLW  02
0929:  MOVWF  0F
092A:  BCF    0A.3
092B:  BCF    03.6
092C:  CALL   596
092D:  BSF    0A.3
....................       lcd_command(0xc0); 
092E:  MOVLW  C0
092F:  BSF    03.5
0930:  MOVWF  46
0931:  BCF    0A.3
0932:  BCF    03.5
0933:  CALL   3CD
0934:  BSF    0A.3
....................       lcd_data("                    "); 
0935:  MOVLW  9A
0936:  BSF    03.6
0937:  MOVWF  0D
0938:  MOVLW  02
0939:  MOVWF  0F
093A:  BCF    0A.3
093B:  BCF    03.6
093C:  CALL   596
093D:  BSF    0A.3
....................       lcd_command(0xd6); 
093E:  MOVLW  D6
093F:  BSF    03.5
0940:  MOVWF  46
0941:  BCF    0A.3
0942:  BCF    03.5
0943:  CALL   3CD
0944:  BSF    0A.3
....................       lcd_data("--:--:--, --/--/--"); 
0945:  MOVLW  A5
0946:  BSF    03.6
0947:  MOVWF  0D
0948:  MOVLW  02
0949:  MOVWF  0F
094A:  BCF    0A.3
094B:  BCF    03.6
094C:  CALL   596
094D:  BSF    0A.3
....................       for (int m = 0; m < 7; m++) 
094E:  BSF    03.5
094F:  CLRF   44
0950:  MOVF   44,W
0951:  SUBLW  06
0952:  BTFSS  03.0
0953:  GOTO   182
....................       { 
....................          lcd_command(0xc3+m); 
0954:  MOVLW  C3
0955:  ADDWF  44,W
0956:  MOVWF  45
0957:  MOVWF  46
0958:  BCF    0A.3
0959:  BCF    03.5
095A:  CALL   3CD
095B:  BSF    0A.3
....................          lcd_data(">"); 
095C:  MOVLW  AF
095D:  BSF    03.6
095E:  MOVWF  0D
095F:  MOVLW  02
0960:  MOVWF  0F
0961:  BCF    0A.3
0962:  BCF    03.6
0963:  CALL   596
0964:  BSF    0A.3
....................          lcd_command(0xc0+16-m); 
0965:  BSF    03.5
0966:  MOVF   44,W
0967:  SUBLW  D0
0968:  MOVWF  45
0969:  MOVWF  46
096A:  BCF    0A.3
096B:  BCF    03.5
096C:  CALL   3CD
096D:  BSF    0A.3
....................          lcd_data("<"); 
096E:  MOVLW  B0
096F:  BSF    03.6
0970:  MOVWF  0D
0971:  MOVLW  02
0972:  MOVWF  0F
0973:  BCF    0A.3
0974:  BCF    03.6
0975:  CALL   596
0976:  BSF    0A.3
....................          delay(20); 
0977:  BSF    03.5
0978:  CLRF   46
0979:  MOVLW  14
097A:  MOVWF  45
097B:  BCF    0A.3
097C:  BCF    03.5
097D:  CALL   654
097E:  BSF    0A.3
097F:  BSF    03.5
0980:  INCF   44,F
0981:  GOTO   150
0982:  BCF    03.5
....................       } 
....................    } 
....................        
....................    if (T_ng <= T_max) 
0983:  MOVF   32,W
0984:  SUBWF  43,W
0985:  BTFSS  03.0
0986:  GOTO   293
....................    { 
....................       lcd_command(0xd6); 
0987:  MOVLW  D6
0988:  BSF    03.5
0989:  MOVWF  46
098A:  BCF    0A.3
098B:  BCF    03.5
098C:  CALL   3CD
098D:  BSF    0A.3
....................       lcd_data(hour_Te/10+48); 
098E:  MOVF   6C,W
098F:  BSF    03.5
0990:  MOVWF  54
0991:  MOVLW  0A
0992:  MOVWF  55
0993:  BCF    0A.3
0994:  BCF    03.5
0995:  CALL   63D
0996:  BSF    0A.3
0997:  MOVLW  30
0998:  ADDWF  78,W
0999:  BSF    03.5
099A:  MOVWF  45
099B:  MOVWF  48
099C:  BCF    0A.3
099D:  BCF    03.5
099E:  CALL   58C
099F:  BSF    0A.3
....................       lcd_data(hour_Te%10+48); 
09A0:  MOVF   6C,W
09A1:  BSF    03.5
09A2:  MOVWF  54
09A3:  MOVLW  0A
09A4:  MOVWF  55
09A5:  BCF    0A.3
09A6:  BCF    03.5
09A7:  CALL   63D
09A8:  BSF    0A.3
09A9:  MOVLW  30
09AA:  ADDWF  77,W
09AB:  BSF    03.5
09AC:  MOVWF  45
09AD:  MOVWF  48
09AE:  BCF    0A.3
09AF:  BCF    03.5
09B0:  CALL   58C
09B1:  BSF    0A.3
....................       lcd_data(":"); 
09B2:  MOVLW  B1
09B3:  BSF    03.6
09B4:  MOVWF  0D
09B5:  MOVLW  02
09B6:  MOVWF  0F
09B7:  BCF    0A.3
09B8:  BCF    03.6
09B9:  CALL   596
09BA:  BSF    0A.3
....................       lcd_data(minute_Te/10+48); 
09BB:  MOVF   6D,W
09BC:  BSF    03.5
09BD:  MOVWF  54
09BE:  MOVLW  0A
09BF:  MOVWF  55
09C0:  BCF    0A.3
09C1:  BCF    03.5
09C2:  CALL   63D
09C3:  BSF    0A.3
09C4:  MOVLW  30
09C5:  ADDWF  78,W
09C6:  BSF    03.5
09C7:  MOVWF  45
09C8:  MOVWF  48
09C9:  BCF    0A.3
09CA:  BCF    03.5
09CB:  CALL   58C
09CC:  BSF    0A.3
....................       lcd_data(minute_Te%10+48); 
09CD:  MOVF   6D,W
09CE:  BSF    03.5
09CF:  MOVWF  54
09D0:  MOVLW  0A
09D1:  MOVWF  55
09D2:  BCF    0A.3
09D3:  BCF    03.5
09D4:  CALL   63D
09D5:  BSF    0A.3
09D6:  MOVLW  30
09D7:  ADDWF  77,W
09D8:  BSF    03.5
09D9:  MOVWF  45
09DA:  MOVWF  48
09DB:  BCF    0A.3
09DC:  BCF    03.5
09DD:  CALL   58C
09DE:  BSF    0A.3
....................       lcd_data(":"); 
09DF:  MOVLW  B2
09E0:  BSF    03.6
09E1:  MOVWF  0D
09E2:  MOVLW  02
09E3:  MOVWF  0F
09E4:  BCF    0A.3
09E5:  BCF    03.6
09E6:  CALL   596
09E7:  BSF    0A.3
....................       lcd_data(second_Te/10+48); 
09E8:  MOVF   6E,W
09E9:  BSF    03.5
09EA:  MOVWF  54
09EB:  MOVLW  0A
09EC:  MOVWF  55
09ED:  BCF    0A.3
09EE:  BCF    03.5
09EF:  CALL   63D
09F0:  BSF    0A.3
09F1:  MOVLW  30
09F2:  ADDWF  78,W
09F3:  BSF    03.5
09F4:  MOVWF  45
09F5:  MOVWF  48
09F6:  BCF    0A.3
09F7:  BCF    03.5
09F8:  CALL   58C
09F9:  BSF    0A.3
....................       lcd_data(second_Te%10+48); 
09FA:  MOVF   6E,W
09FB:  BSF    03.5
09FC:  MOVWF  54
09FD:  MOVLW  0A
09FE:  MOVWF  55
09FF:  BCF    0A.3
0A00:  BCF    03.5
0A01:  CALL   63D
0A02:  BSF    0A.3
0A03:  MOVLW  30
0A04:  ADDWF  77,W
0A05:  BSF    03.5
0A06:  MOVWF  45
0A07:  MOVWF  48
0A08:  BCF    0A.3
0A09:  BCF    03.5
0A0A:  CALL   58C
0A0B:  BSF    0A.3
....................       lcd_data(", "); 
0A0C:  MOVLW  B3
0A0D:  BSF    03.6
0A0E:  MOVWF  0D
0A0F:  MOVLW  02
0A10:  MOVWF  0F
0A11:  BCF    0A.3
0A12:  BCF    03.6
0A13:  CALL   596
0A14:  BSF    0A.3
....................       lcd_data(date_Te/10+48); 
0A15:  MOVF   6F,W
0A16:  BSF    03.5
0A17:  MOVWF  54
0A18:  MOVLW  0A
0A19:  MOVWF  55
0A1A:  BCF    0A.3
0A1B:  BCF    03.5
0A1C:  CALL   63D
0A1D:  BSF    0A.3
0A1E:  MOVLW  30
0A1F:  ADDWF  78,W
0A20:  BSF    03.5
0A21:  MOVWF  45
0A22:  MOVWF  48
0A23:  BCF    0A.3
0A24:  BCF    03.5
0A25:  CALL   58C
0A26:  BSF    0A.3
....................       lcd_data(date_Te%10+48); 
0A27:  MOVF   6F,W
0A28:  BSF    03.5
0A29:  MOVWF  54
0A2A:  MOVLW  0A
0A2B:  MOVWF  55
0A2C:  BCF    0A.3
0A2D:  BCF    03.5
0A2E:  CALL   63D
0A2F:  BSF    0A.3
0A30:  MOVLW  30
0A31:  ADDWF  77,W
0A32:  BSF    03.5
0A33:  MOVWF  45
0A34:  MOVWF  48
0A35:  BCF    0A.3
0A36:  BCF    03.5
0A37:  CALL   58C
0A38:  BSF    0A.3
....................       lcd_data("/"); 
0A39:  MOVLW  B5
0A3A:  BSF    03.6
0A3B:  MOVWF  0D
0A3C:  MOVLW  02
0A3D:  MOVWF  0F
0A3E:  BCF    0A.3
0A3F:  BCF    03.6
0A40:  CALL   596
0A41:  BSF    0A.3
....................       lcd_data(month_Te/10+48); 
0A42:  MOVF   70,W
0A43:  BSF    03.5
0A44:  MOVWF  54
0A45:  MOVLW  0A
0A46:  MOVWF  55
0A47:  BCF    0A.3
0A48:  BCF    03.5
0A49:  CALL   63D
0A4A:  BSF    0A.3
0A4B:  MOVLW  30
0A4C:  ADDWF  78,W
0A4D:  BSF    03.5
0A4E:  MOVWF  45
0A4F:  MOVWF  48
0A50:  BCF    0A.3
0A51:  BCF    03.5
0A52:  CALL   58C
0A53:  BSF    0A.3
....................       lcd_data(month_Te%10+48); 
0A54:  MOVF   70,W
0A55:  BSF    03.5
0A56:  MOVWF  54
0A57:  MOVLW  0A
0A58:  MOVWF  55
0A59:  BCF    0A.3
0A5A:  BCF    03.5
0A5B:  CALL   63D
0A5C:  BSF    0A.3
0A5D:  MOVLW  30
0A5E:  ADDWF  77,W
0A5F:  BSF    03.5
0A60:  MOVWF  45
0A61:  MOVWF  48
0A62:  BCF    0A.3
0A63:  BCF    03.5
0A64:  CALL   58C
0A65:  BSF    0A.3
....................       lcd_data("/"); 
0A66:  MOVLW  B6
0A67:  BSF    03.6
0A68:  MOVWF  0D
0A69:  MOVLW  02
0A6A:  MOVWF  0F
0A6B:  BCF    0A.3
0A6C:  BCF    03.6
0A6D:  CALL   596
0A6E:  BSF    0A.3
....................       lcd_data(year_Te/10+48); 
0A6F:  MOVF   71,W
0A70:  BSF    03.5
0A71:  MOVWF  54
0A72:  MOVLW  0A
0A73:  MOVWF  55
0A74:  BCF    0A.3
0A75:  BCF    03.5
0A76:  CALL   63D
0A77:  BSF    0A.3
0A78:  MOVLW  30
0A79:  ADDWF  78,W
0A7A:  BSF    03.5
0A7B:  MOVWF  45
0A7C:  MOVWF  48
0A7D:  BCF    0A.3
0A7E:  BCF    03.5
0A7F:  CALL   58C
0A80:  BSF    0A.3
....................       lcd_data(year_Te%10+48); 
0A81:  MOVF   71,W
0A82:  BSF    03.5
0A83:  MOVWF  54
0A84:  MOVLW  0A
0A85:  MOVWF  55
0A86:  BCF    0A.3
0A87:  BCF    03.5
0A88:  CALL   63D
0A89:  BSF    0A.3
0A8A:  MOVLW  30
0A8B:  ADDWF  77,W
0A8C:  BSF    03.5
0A8D:  MOVWF  45
0A8E:  MOVWF  48
0A8F:  BCF    0A.3
0A90:  BCF    03.5
0A91:  CALL   58C
0A92:  BSF    0A.3
....................    } 
0A93:  BSF    0A.3
0A94:  BSF    0A.4
0A95:  GOTO   357 (RETURN)
.................... } 
....................  
.................... void lcd_20x04_8bit_mode_2() 
.................... { 
....................    lcd_command(0x96); 
0A96:  MOVLW  96
0A97:  BSF    03.5
0A98:  MOVWF  46
0A99:  BCF    0A.3
0A9A:  BCF    03.5
0A9B:  CALL   3CD
0A9C:  BSF    0A.3
....................    lcd_data(hour_RHs/10+48); 
0A9D:  MOVF   72,W
0A9E:  BSF    03.5
0A9F:  MOVWF  54
0AA0:  MOVLW  0A
0AA1:  MOVWF  55
0AA2:  BCF    0A.3
0AA3:  BCF    03.5
0AA4:  CALL   63D
0AA5:  BSF    0A.3
0AA6:  MOVLW  30
0AA7:  ADDWF  78,W
0AA8:  BSF    03.5
0AA9:  MOVWF  45
0AAA:  MOVWF  48
0AAB:  BCF    0A.3
0AAC:  BCF    03.5
0AAD:  CALL   58C
0AAE:  BSF    0A.3
....................    lcd_data(hour_RHs%10+48); 
0AAF:  MOVF   72,W
0AB0:  BSF    03.5
0AB1:  MOVWF  54
0AB2:  MOVLW  0A
0AB3:  MOVWF  55
0AB4:  BCF    0A.3
0AB5:  BCF    03.5
0AB6:  CALL   63D
0AB7:  BSF    0A.3
0AB8:  MOVLW  30
0AB9:  ADDWF  77,W
0ABA:  BSF    03.5
0ABB:  MOVWF  45
0ABC:  MOVWF  48
0ABD:  BCF    0A.3
0ABE:  BCF    03.5
0ABF:  CALL   58C
0AC0:  BSF    0A.3
....................    lcd_data(":"); 
0AC1:  MOVLW  B7
0AC2:  BSF    03.6
0AC3:  MOVWF  0D
0AC4:  MOVLW  02
0AC5:  MOVWF  0F
0AC6:  BCF    0A.3
0AC7:  BCF    03.6
0AC8:  CALL   596
0AC9:  BSF    0A.3
....................    lcd_data(minute_RHs/10+48); 
0ACA:  MOVF   73,W
0ACB:  BSF    03.5
0ACC:  MOVWF  54
0ACD:  MOVLW  0A
0ACE:  MOVWF  55
0ACF:  BCF    0A.3
0AD0:  BCF    03.5
0AD1:  CALL   63D
0AD2:  BSF    0A.3
0AD3:  MOVLW  30
0AD4:  ADDWF  78,W
0AD5:  BSF    03.5
0AD6:  MOVWF  45
0AD7:  MOVWF  48
0AD8:  BCF    0A.3
0AD9:  BCF    03.5
0ADA:  CALL   58C
0ADB:  BSF    0A.3
....................    lcd_data(minute_RHs%10+48); 
0ADC:  MOVF   73,W
0ADD:  BSF    03.5
0ADE:  MOVWF  54
0ADF:  MOVLW  0A
0AE0:  MOVWF  55
0AE1:  BCF    0A.3
0AE2:  BCF    03.5
0AE3:  CALL   63D
0AE4:  BSF    0A.3
0AE5:  MOVLW  30
0AE6:  ADDWF  77,W
0AE7:  BSF    03.5
0AE8:  MOVWF  45
0AE9:  MOVWF  48
0AEA:  BCF    0A.3
0AEB:  BCF    03.5
0AEC:  CALL   58C
0AED:  BSF    0A.3
....................    lcd_data(":"); 
0AEE:  MOVLW  B8
0AEF:  BSF    03.6
0AF0:  MOVWF  0D
0AF1:  MOVLW  02
0AF2:  MOVWF  0F
0AF3:  BCF    0A.3
0AF4:  BCF    03.6
0AF5:  CALL   596
0AF6:  BSF    0A.3
....................    lcd_data(second_RHs/10+48); 
0AF7:  MOVF   74,W
0AF8:  BSF    03.5
0AF9:  MOVWF  54
0AFA:  MOVLW  0A
0AFB:  MOVWF  55
0AFC:  BCF    0A.3
0AFD:  BCF    03.5
0AFE:  CALL   63D
0AFF:  BSF    0A.3
0B00:  MOVLW  30
0B01:  ADDWF  78,W
0B02:  BSF    03.5
0B03:  MOVWF  45
0B04:  MOVWF  48
0B05:  BCF    0A.3
0B06:  BCF    03.5
0B07:  CALL   58C
0B08:  BSF    0A.3
....................    lcd_data(second_RHs%10+48); 
0B09:  MOVF   74,W
0B0A:  BSF    03.5
0B0B:  MOVWF  54
0B0C:  MOVLW  0A
0B0D:  MOVWF  55
0B0E:  BCF    0A.3
0B0F:  BCF    03.5
0B10:  CALL   63D
0B11:  BSF    0A.3
0B12:  MOVLW  30
0B13:  ADDWF  77,W
0B14:  BSF    03.5
0B15:  MOVWF  45
0B16:  MOVWF  48
0B17:  BCF    0A.3
0B18:  BCF    03.5
0B19:  CALL   58C
0B1A:  BSF    0A.3
....................    lcd_data(", "); 
0B1B:  MOVLW  B9
0B1C:  BSF    03.6
0B1D:  MOVWF  0D
0B1E:  MOVLW  02
0B1F:  MOVWF  0F
0B20:  BCF    0A.3
0B21:  BCF    03.6
0B22:  CALL   596
0B23:  BSF    0A.3
....................    lcd_data(date_RHs/10+48); 
0B24:  MOVF   75,W
0B25:  BSF    03.5
0B26:  MOVWF  54
0B27:  MOVLW  0A
0B28:  MOVWF  55
0B29:  BCF    0A.3
0B2A:  BCF    03.5
0B2B:  CALL   63D
0B2C:  BSF    0A.3
0B2D:  MOVLW  30
0B2E:  ADDWF  78,W
0B2F:  BSF    03.5
0B30:  MOVWF  45
0B31:  MOVWF  48
0B32:  BCF    0A.3
0B33:  BCF    03.5
0B34:  CALL   58C
0B35:  BSF    0A.3
....................    lcd_data(date_RHs%10+48); 
0B36:  MOVF   75,W
0B37:  BSF    03.5
0B38:  MOVWF  54
0B39:  MOVLW  0A
0B3A:  MOVWF  55
0B3B:  BCF    0A.3
0B3C:  BCF    03.5
0B3D:  CALL   63D
0B3E:  BSF    0A.3
0B3F:  MOVLW  30
0B40:  ADDWF  77,W
0B41:  BSF    03.5
0B42:  MOVWF  45
0B43:  MOVWF  48
0B44:  BCF    0A.3
0B45:  BCF    03.5
0B46:  CALL   58C
0B47:  BSF    0A.3
....................    lcd_data("/"); 
0B48:  MOVLW  BB
0B49:  BSF    03.6
0B4A:  MOVWF  0D
0B4B:  MOVLW  02
0B4C:  MOVWF  0F
0B4D:  BCF    0A.3
0B4E:  BCF    03.6
0B4F:  CALL   596
0B50:  BSF    0A.3
....................    lcd_data(month_RHs/10+48); 
0B51:  MOVF   76,W
0B52:  BSF    03.5
0B53:  MOVWF  54
0B54:  MOVLW  0A
0B55:  MOVWF  55
0B56:  BCF    0A.3
0B57:  BCF    03.5
0B58:  CALL   63D
0B59:  BSF    0A.3
0B5A:  MOVLW  30
0B5B:  ADDWF  78,W
0B5C:  BSF    03.5
0B5D:  MOVWF  45
0B5E:  MOVWF  48
0B5F:  BCF    0A.3
0B60:  BCF    03.5
0B61:  CALL   58C
0B62:  BSF    0A.3
....................    lcd_data(month_RHs%10+48); 
0B63:  MOVF   76,W
0B64:  BSF    03.5
0B65:  MOVWF  54
0B66:  MOVLW  0A
0B67:  MOVWF  55
0B68:  BCF    0A.3
0B69:  BCF    03.5
0B6A:  CALL   63D
0B6B:  BSF    0A.3
0B6C:  MOVLW  30
0B6D:  ADDWF  77,W
0B6E:  BSF    03.5
0B6F:  MOVWF  45
0B70:  MOVWF  48
0B71:  BCF    0A.3
0B72:  BCF    03.5
0B73:  CALL   58C
0B74:  BSF    0A.3
....................    lcd_data("/"); 
0B75:  MOVLW  BC
0B76:  BSF    03.6
0B77:  MOVWF  0D
0B78:  MOVLW  02
0B79:  MOVWF  0F
0B7A:  BCF    0A.3
0B7B:  BCF    03.6
0B7C:  CALL   596
0B7D:  BSF    0A.3
....................    lcd_data(year_RHs/10+48); 
0B7E:  MOVF   7B,W
0B7F:  BSF    03.5
0B80:  MOVWF  54
0B81:  MOVLW  0A
0B82:  MOVWF  55
0B83:  BCF    0A.3
0B84:  BCF    03.5
0B85:  CALL   63D
0B86:  BSF    0A.3
0B87:  MOVLW  30
0B88:  ADDWF  78,W
0B89:  BSF    03.5
0B8A:  MOVWF  45
0B8B:  MOVWF  48
0B8C:  BCF    0A.3
0B8D:  BCF    03.5
0B8E:  CALL   58C
0B8F:  BSF    0A.3
....................    lcd_data(year_RHs%10+48); 
0B90:  MOVF   7B,W
0B91:  BSF    03.5
0B92:  MOVWF  54
0B93:  MOVLW  0A
0B94:  MOVWF  55
0B95:  BCF    0A.3
0B96:  BCF    03.5
0B97:  CALL   63D
0B98:  BSF    0A.3
0B99:  MOVLW  30
0B9A:  ADDWF  77,W
0B9B:  BSF    03.5
0B9C:  MOVWF  45
0B9D:  MOVWF  48
0B9E:  BCF    0A.3
0B9F:  BCF    03.5
0BA0:  CALL   58C
0BA1:  BSF    0A.3
....................    lcd_command(0xd4); 
0BA2:  MOVLW  D4
0BA3:  BSF    03.5
0BA4:  MOVWF  46
0BA5:  BCF    0A.3
0BA6:  BCF    03.5
0BA7:  CALL   3CD
0BA8:  BSF    0A.3
....................    lcd_data(0x7e); 
0BA9:  MOVLW  7E
0BAA:  BSF    03.5
0BAB:  MOVWF  48
0BAC:  BCF    0A.3
0BAD:  BCF    03.5
0BAE:  CALL   58C
0BAF:  BSF    0A.3
....................     
....................    if (RH_ng > RH_max) 
0BB0:  MOVF   34,W
0BB1:  SUBWF  42,W
0BB2:  BTFSC  03.0
0BB3:  GOTO   41A
....................    { 
....................       lcd_command(0x80); 
0BB4:  MOVLW  80
0BB5:  BSF    03.5
0BB6:  MOVWF  46
0BB7:  BCF    0A.3
0BB8:  BCF    03.5
0BB9:  CALL   3CD
0BBA:  BSF    0A.3
....................       lcd_data("   HIGH HUMIDITY    "); 
0BBB:  MOVLW  BD
0BBC:  BSF    03.6
0BBD:  MOVWF  0D
0BBE:  MOVLW  02
0BBF:  MOVWF  0F
0BC0:  BCF    0A.3
0BC1:  BCF    03.6
0BC2:  CALL   596
0BC3:  BSF    0A.3
....................       lcd_command(0xc0); 
0BC4:  MOVLW  C0
0BC5:  BSF    03.5
0BC6:  MOVWF  46
0BC7:  BCF    0A.3
0BC8:  BCF    03.5
0BC9:  CALL   3CD
0BCA:  BSF    0A.3
....................       lcd_data("                    "); 
0BCB:  MOVLW  C8
0BCC:  BSF    03.6
0BCD:  MOVWF  0D
0BCE:  MOVLW  02
0BCF:  MOVWF  0F
0BD0:  BCF    0A.3
0BD1:  BCF    03.6
0BD2:  CALL   596
0BD3:  BSF    0A.3
....................       lcd_command(0xd6); 
0BD4:  MOVLW  D6
0BD5:  BSF    03.5
0BD6:  MOVWF  46
0BD7:  BCF    0A.3
0BD8:  BCF    03.5
0BD9:  CALL   3CD
0BDA:  BSF    0A.3
....................       lcd_data("--:--:--, --/--/--"); 
0BDB:  MOVLW  D3
0BDC:  BSF    03.6
0BDD:  MOVWF  0D
0BDE:  MOVLW  02
0BDF:  MOVWF  0F
0BE0:  BCF    0A.3
0BE1:  BCF    03.6
0BE2:  CALL   596
0BE3:  BSF    0A.3
....................       for (int m = 0; m < 7; m++) 
0BE4:  BSF    03.5
0BE5:  CLRF   44
0BE6:  MOVF   44,W
0BE7:  SUBLW  06
0BE8:  BTFSS  03.0
0BE9:  GOTO   419
....................       { 
....................          lcd_command(0xc0+(9-m)); 
0BEA:  MOVF   44,W
0BEB:  SUBLW  09
0BEC:  ADDLW  C0
0BED:  MOVWF  45
0BEE:  MOVWF  46
0BEF:  BCF    0A.3
0BF0:  BCF    03.5
0BF1:  CALL   3CD
0BF2:  BSF    0A.3
....................          lcd_data("<"); 
0BF3:  MOVLW  DD
0BF4:  BSF    03.6
0BF5:  MOVWF  0D
0BF6:  MOVLW  02
0BF7:  MOVWF  0F
0BF8:  BCF    0A.3
0BF9:  BCF    03.6
0BFA:  CALL   596
0BFB:  BSF    0A.3
....................          lcd_command(0xc0+10+m); 
0BFC:  MOVLW  CA
0BFD:  BSF    03.5
0BFE:  ADDWF  44,W
0BFF:  MOVWF  45
0C00:  MOVWF  46
0C01:  BCF    0A.3
0C02:  BCF    03.5
0C03:  CALL   3CD
0C04:  BSF    0A.3
....................          lcd_data(">"); 
0C05:  MOVLW  DE
0C06:  BSF    03.6
0C07:  MOVWF  0D
0C08:  MOVLW  02
0C09:  MOVWF  0F
0C0A:  BCF    0A.3
0C0B:  BCF    03.6
0C0C:  CALL   596
0C0D:  BSF    0A.3
....................          delay(20); 
0C0E:  BSF    03.5
0C0F:  CLRF   46
0C10:  MOVLW  14
0C11:  MOVWF  45
0C12:  BCF    0A.3
0C13:  BCF    03.5
0C14:  CALL   654
0C15:  BSF    0A.3
0C16:  BSF    03.5
0C17:  INCF   44,F
0C18:  GOTO   3E6
0C19:  BCF    03.5
....................       } 
....................    } 
....................     
....................    if (RH_ng <= RH_max) 
0C1A:  MOVF   34,W
0C1B:  SUBWF  42,W
0C1C:  BTFSS  03.0
0C1D:  GOTO   52A
....................    { 
....................       lcd_command(0xd6); 
0C1E:  MOVLW  D6
0C1F:  BSF    03.5
0C20:  MOVWF  46
0C21:  BCF    0A.3
0C22:  BCF    03.5
0C23:  CALL   3CD
0C24:  BSF    0A.3
....................       lcd_data(hour_RHe/10+48); 
0C25:  MOVF   7C,W
0C26:  BSF    03.5
0C27:  MOVWF  54
0C28:  MOVLW  0A
0C29:  MOVWF  55
0C2A:  BCF    0A.3
0C2B:  BCF    03.5
0C2C:  CALL   63D
0C2D:  BSF    0A.3
0C2E:  MOVLW  30
0C2F:  ADDWF  78,W
0C30:  BSF    03.5
0C31:  MOVWF  45
0C32:  MOVWF  48
0C33:  BCF    0A.3
0C34:  BCF    03.5
0C35:  CALL   58C
0C36:  BSF    0A.3
....................       lcd_data(hour_RHe%10+48); 
0C37:  MOVF   7C,W
0C38:  BSF    03.5
0C39:  MOVWF  54
0C3A:  MOVLW  0A
0C3B:  MOVWF  55
0C3C:  BCF    0A.3
0C3D:  BCF    03.5
0C3E:  CALL   63D
0C3F:  BSF    0A.3
0C40:  MOVLW  30
0C41:  ADDWF  77,W
0C42:  BSF    03.5
0C43:  MOVWF  45
0C44:  MOVWF  48
0C45:  BCF    0A.3
0C46:  BCF    03.5
0C47:  CALL   58C
0C48:  BSF    0A.3
....................       lcd_data(":"); 
0C49:  MOVLW  DF
0C4A:  BSF    03.6
0C4B:  MOVWF  0D
0C4C:  MOVLW  02
0C4D:  MOVWF  0F
0C4E:  BCF    0A.3
0C4F:  BCF    03.6
0C50:  CALL   596
0C51:  BSF    0A.3
....................       lcd_data(minute_RHe/10+48); 
0C52:  MOVF   7D,W
0C53:  BSF    03.5
0C54:  MOVWF  54
0C55:  MOVLW  0A
0C56:  MOVWF  55
0C57:  BCF    0A.3
0C58:  BCF    03.5
0C59:  CALL   63D
0C5A:  BSF    0A.3
0C5B:  MOVLW  30
0C5C:  ADDWF  78,W
0C5D:  BSF    03.5
0C5E:  MOVWF  45
0C5F:  MOVWF  48
0C60:  BCF    0A.3
0C61:  BCF    03.5
0C62:  CALL   58C
0C63:  BSF    0A.3
....................       lcd_data(minute_RHe%10+48); 
0C64:  MOVF   7D,W
0C65:  BSF    03.5
0C66:  MOVWF  54
0C67:  MOVLW  0A
0C68:  MOVWF  55
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  CALL   63D
0C6C:  BSF    0A.3
0C6D:  MOVLW  30
0C6E:  ADDWF  77,W
0C6F:  BSF    03.5
0C70:  MOVWF  45
0C71:  MOVWF  48
0C72:  BCF    0A.3
0C73:  BCF    03.5
0C74:  CALL   58C
0C75:  BSF    0A.3
....................       lcd_data(":"); 
0C76:  MOVLW  E0
0C77:  BSF    03.6
0C78:  MOVWF  0D
0C79:  MOVLW  02
0C7A:  MOVWF  0F
0C7B:  BCF    0A.3
0C7C:  BCF    03.6
0C7D:  CALL   596
0C7E:  BSF    0A.3
....................       lcd_data(second_RHe/10+48); 
0C7F:  MOVF   7E,W
0C80:  BSF    03.5
0C81:  MOVWF  54
0C82:  MOVLW  0A
0C83:  MOVWF  55
0C84:  BCF    0A.3
0C85:  BCF    03.5
0C86:  CALL   63D
0C87:  BSF    0A.3
0C88:  MOVLW  30
0C89:  ADDWF  78,W
0C8A:  BSF    03.5
0C8B:  MOVWF  45
0C8C:  MOVWF  48
0C8D:  BCF    0A.3
0C8E:  BCF    03.5
0C8F:  CALL   58C
0C90:  BSF    0A.3
....................       lcd_data(second_RHe%10+48); 
0C91:  MOVF   7E,W
0C92:  BSF    03.5
0C93:  MOVWF  54
0C94:  MOVLW  0A
0C95:  MOVWF  55
0C96:  BCF    0A.3
0C97:  BCF    03.5
0C98:  CALL   63D
0C99:  BSF    0A.3
0C9A:  MOVLW  30
0C9B:  ADDWF  77,W
0C9C:  BSF    03.5
0C9D:  MOVWF  45
0C9E:  MOVWF  48
0C9F:  BCF    0A.3
0CA0:  BCF    03.5
0CA1:  CALL   58C
0CA2:  BSF    0A.3
....................       lcd_data(", "); 
0CA3:  MOVLW  E1
0CA4:  BSF    03.6
0CA5:  MOVWF  0D
0CA6:  MOVLW  02
0CA7:  MOVWF  0F
0CA8:  BCF    0A.3
0CA9:  BCF    03.6
0CAA:  CALL   596
0CAB:  BSF    0A.3
....................       lcd_data(date_RHe/10+48); 
0CAC:  BSF    03.5
0CAD:  MOVF   40,W
0CAE:  MOVWF  54
0CAF:  MOVLW  0A
0CB0:  MOVWF  55
0CB1:  BCF    0A.3
0CB2:  BCF    03.5
0CB3:  CALL   63D
0CB4:  BSF    0A.3
0CB5:  MOVLW  30
0CB6:  ADDWF  78,W
0CB7:  BSF    03.5
0CB8:  MOVWF  45
0CB9:  MOVWF  48
0CBA:  BCF    0A.3
0CBB:  BCF    03.5
0CBC:  CALL   58C
0CBD:  BSF    0A.3
....................       lcd_data(date_RHe%10+48); 
0CBE:  BSF    03.5
0CBF:  MOVF   40,W
0CC0:  MOVWF  54
0CC1:  MOVLW  0A
0CC2:  MOVWF  55
0CC3:  BCF    0A.3
0CC4:  BCF    03.5
0CC5:  CALL   63D
0CC6:  BSF    0A.3
0CC7:  MOVLW  30
0CC8:  ADDWF  77,W
0CC9:  BSF    03.5
0CCA:  MOVWF  45
0CCB:  MOVWF  48
0CCC:  BCF    0A.3
0CCD:  BCF    03.5
0CCE:  CALL   58C
0CCF:  BSF    0A.3
....................       lcd_data("/"); 
0CD0:  MOVLW  E3
0CD1:  BSF    03.6
0CD2:  MOVWF  0D
0CD3:  MOVLW  02
0CD4:  MOVWF  0F
0CD5:  BCF    0A.3
0CD6:  BCF    03.6
0CD7:  CALL   596
0CD8:  BSF    0A.3
....................       lcd_data(month_RHe/10+48); 
0CD9:  BSF    03.5
0CDA:  MOVF   41,W
0CDB:  MOVWF  54
0CDC:  MOVLW  0A
0CDD:  MOVWF  55
0CDE:  BCF    0A.3
0CDF:  BCF    03.5
0CE0:  CALL   63D
0CE1:  BSF    0A.3
0CE2:  MOVLW  30
0CE3:  ADDWF  78,W
0CE4:  BSF    03.5
0CE5:  MOVWF  45
0CE6:  MOVWF  48
0CE7:  BCF    0A.3
0CE8:  BCF    03.5
0CE9:  CALL   58C
0CEA:  BSF    0A.3
....................       lcd_data(month_RHe%10+48); 
0CEB:  BSF    03.5
0CEC:  MOVF   41,W
0CED:  MOVWF  54
0CEE:  MOVLW  0A
0CEF:  MOVWF  55
0CF0:  BCF    0A.3
0CF1:  BCF    03.5
0CF2:  CALL   63D
0CF3:  BSF    0A.3
0CF4:  MOVLW  30
0CF5:  ADDWF  77,W
0CF6:  BSF    03.5
0CF7:  MOVWF  45
0CF8:  MOVWF  48
0CF9:  BCF    0A.3
0CFA:  BCF    03.5
0CFB:  CALL   58C
0CFC:  BSF    0A.3
....................       lcd_data("/"); 
0CFD:  MOVLW  E4
0CFE:  BSF    03.6
0CFF:  MOVWF  0D
0D00:  MOVLW  02
0D01:  MOVWF  0F
0D02:  BCF    0A.3
0D03:  BCF    03.6
0D04:  CALL   596
0D05:  BSF    0A.3
....................       lcd_data(year_RHe/10+48); 
0D06:  BSF    03.5
0D07:  MOVF   42,W
0D08:  MOVWF  54
0D09:  MOVLW  0A
0D0A:  MOVWF  55
0D0B:  BCF    0A.3
0D0C:  BCF    03.5
0D0D:  CALL   63D
0D0E:  BSF    0A.3
0D0F:  MOVLW  30
0D10:  ADDWF  78,W
0D11:  BSF    03.5
0D12:  MOVWF  45
0D13:  MOVWF  48
0D14:  BCF    0A.3
0D15:  BCF    03.5
0D16:  CALL   58C
0D17:  BSF    0A.3
....................       lcd_data(year_RHe%10+48); 
0D18:  BSF    03.5
0D19:  MOVF   42,W
0D1A:  MOVWF  54
0D1B:  MOVLW  0A
0D1C:  MOVWF  55
0D1D:  BCF    0A.3
0D1E:  BCF    03.5
0D1F:  CALL   63D
0D20:  BSF    0A.3
0D21:  MOVLW  30
0D22:  ADDWF  77,W
0D23:  BSF    03.5
0D24:  MOVWF  45
0D25:  MOVWF  48
0D26:  BCF    0A.3
0D27:  BCF    03.5
0D28:  CALL   58C
0D29:  BSF    0A.3
....................    } 
0D2A:  BSF    0A.3
0D2B:  BSF    0A.4
0D2C:  GOTO   356 (RETURN)
.................... } 
....................  
.................... void main() 
*
1A8E:  MOVF   03,W
1A8F:  ANDLW  1F
1A90:  MOVWF  03
1A91:  MOVLW  FF
1A92:  MOVWF  20
1A93:  BSF    20.3
1A94:  MOVF   20,W
1A95:  BSF    03.5
1A96:  MOVWF  07
1A97:  BCF    03.5
1A98:  BSF    20.4
1A99:  MOVF   20,W
1A9A:  BSF    03.5
1A9B:  MOVWF  07
1A9C:  MOVLW  0C
1A9D:  MOVWF  13
1A9E:  MOVLW  29
1A9F:  BCF    03.5
1AA0:  MOVWF  14
1AA1:  BSF    03.5
1AA2:  BCF    14.7
1AA3:  BCF    14.6
1AA4:  MOVLW  FF
1AA5:  MOVWF  13
1AA6:  MOVLW  28
1AA7:  BCF    03.5
1AA8:  MOVWF  14
1AA9:  MOVLW  01
1AAA:  MOVWF  23
1AAB:  MOVWF  24
1AAC:  BSF    25.0
1AAD:  BCF    25.1
1AAE:  CLRF   3F
1AAF:  CLRF   40
1AB0:  CLRF   41
1AB1:  MOVLW  46
1AB2:  MOVWF  42
1AB3:  MOVLW  28
1AB4:  MOVWF  43
1AB5:  CLRF   44
1AB6:  CLRF   45
1AB7:  CLRF   66
1AB8:  CLRF   67
1AB9:  CLRF   68
1ABA:  CLRF   69
1ABB:  CLRF   6A
1ABC:  CLRF   6B
1ABD:  CLRF   6C
1ABE:  CLRF   6D
1ABF:  CLRF   6E
1AC0:  CLRF   6F
1AC1:  CLRF   70
1AC2:  CLRF   71
1AC3:  CLRF   72
1AC4:  CLRF   73
1AC5:  CLRF   74
1AC6:  CLRF   75
1AC7:  CLRF   76
1AC8:  CLRF   7B
1AC9:  CLRF   7C
1ACA:  CLRF   7D
1ACB:  CLRF   7E
1ACC:  BSF    03.5
1ACD:  CLRF   40
1ACE:  CLRF   41
1ACF:  CLRF   42
1AD0:  BSF    03.6
1AD1:  MOVF   09,W
1AD2:  ANDLW  C0
1AD3:  MOVWF  09
1AD4:  BCF    03.6
1AD5:  BCF    1F.4
1AD6:  BCF    1F.5
1AD7:  MOVLW  00
1AD8:  BSF    03.6
1AD9:  MOVWF  08
1ADA:  BCF    03.5
1ADB:  CLRF   07
1ADC:  CLRF   08
1ADD:  CLRF   09
1ADE:  BCF    03.7
.................... {    
....................    setup_oscillator(OSC_8MHZ); 
*
1AE8:  MOVLW  71
1AE9:  BSF    03.5
1AEA:  MOVWF  0F
1AEB:  MOVF   0F,W
....................    setup_timer_1(t1_disabled); 
1AEC:  BCF    03.5
1AED:  CLRF   10
....................    port_b_pullups(0xf0); 
1AEE:  MOVLW  F0
1AEF:  BSF    03.5
1AF0:  MOVWF  15
1AF1:  BCF    01.7
....................    oled_init(ssd1306_switchcapvcc, ssd1306_i2c_address); 
1AF2:  MOVLW  02
1AF3:  MOVWF  44
1AF4:  MOVLW  7A
1AF5:  MOVWF  45
1AF6:  BCF    0A.4
1AF7:  BCF    0A.3
1AF8:  BCF    03.5
1AF9:  GOTO   312
1AFA:  BSF    0A.4
1AFB:  BSF    0A.3
....................    lcd_setup(); 
1AFC:  BCF    0A.4
1AFD:  BCF    0A.3
1AFE:  GOTO   3EB
1AFF:  BSF    0A.4
1B00:  BSF    0A.3
....................  
....................    for (int k = 72; k < 78; k++) 
1B01:  MOVLW  48
1B02:  BSF    03.5
1B03:  MOVWF  43
1B04:  MOVF   43,W
1B05:  SUBLW  4D
1B06:  BTFSS  03.0
1B07:  GOTO   320
....................    { 
....................       eeprom_write(k, 0); 
1B08:  MOVF   43,W
1B09:  MOVWF  45
1B0A:  CLRF   46
1B0B:  BCF    0A.4
1B0C:  BCF    0A.3
1B0D:  BCF    03.5
1B0E:  CALL   413
1B0F:  BSF    0A.4
1B10:  BSF    0A.3
....................       eeprom_write(k+16, 0); 
1B11:  MOVLW  10
1B12:  BSF    03.5
1B13:  ADDWF  43,W
1B14:  MOVWF  44
1B15:  MOVWF  45
1B16:  CLRF   46
1B17:  BCF    0A.4
1B18:  BCF    0A.3
1B19:  BCF    03.5
1B1A:  CALL   413
1B1B:  BSF    0A.4
1B1C:  BSF    0A.3
1B1D:  BSF    03.5
1B1E:  INCF   43,F
1B1F:  GOTO   304
....................    } 
....................     
....................    while(TRUE) 
....................    {   
....................       i2c_read_data();       
1B20:  BCF    0A.4
1B21:  BCF    0A.3
1B22:  BCF    03.5
1B23:  GOTO   441
1B24:  BSF    0A.4
1B25:  BSF    0A.3
....................       convert_data(); 
1B26:  BCF    0A.4
1B27:  BCF    0A.3
1B28:  GOTO   4A6
1B29:  BSF    0A.4
1B2A:  BSF    0A.3
....................       select_mode(); 
1B2B:  BCF    0A.4
1B2C:  BCF    0A.3
1B2D:  GOTO   52D
1B2E:  BSF    0A.4
1B2F:  BSF    0A.3
....................       button_return_lcd(); 
1B30:  BCF    0A.4
1B31:  BCF    0A.3
1B32:  GOTO   57E
1B33:  BSF    0A.4
1B34:  BSF    0A.3
....................  
....................       if (T_ng > T_max) 
1B35:  MOVF   32,W
1B36:  SUBWF  43,W
1B37:  BTFSC  03.0
1B38:  GOTO   33B
....................          lcd_mode = 1; 
1B39:  MOVLW  01
1B3A:  MOVWF  40
....................       if (RH_ng > RH_max) 
1B3B:  MOVF   34,W
1B3C:  SUBWF  42,W
1B3D:  BTFSC  03.0
1B3E:  GOTO   341
....................          lcd_mode = 2; 
1B3F:  MOVLW  02
1B40:  MOVWF  40
....................           
....................       if (lcd_mode == 0) 
1B41:  MOVF   40,F
1B42:  BTFSS  03.2
1B43:  GOTO   34A
....................          lcd_20x04_8bit_mode_0(); 
1B44:  BCF    0A.4
1B45:  BCF    0A.3
1B46:  GOTO   60A
1B47:  BSF    0A.4
1B48:  BSF    0A.3
1B49:  GOTO   357
....................       else if (lcd_mode == 1) 
1B4A:  DECFSZ 40,W
1B4B:  GOTO   350
....................          lcd_20x04_8bit_mode_1(); 
1B4C:  BCF    0A.4
1B4D:  GOTO   000
1B4E:  BSF    0A.4
1B4F:  GOTO   357
....................       else if (lcd_mode == 2)  
1B50:  MOVF   40,W
1B51:  SUBLW  02
1B52:  BTFSS  03.2
1B53:  GOTO   357
....................          lcd_20x04_8bit_mode_2(); 
1B54:  BCF    0A.4
1B55:  GOTO   296
1B56:  BSF    0A.4
....................       if (oled_mode == 0) 
1B57:  MOVF   3F,F
1B58:  BTFSS  03.2
1B59:  GOTO   375
....................       { 
....................          time_out = 0; 
1B5A:  BCF    25.1
....................          Start_signal(); 
1B5B:  BCF    0A.4
1B5C:  BCF    0A.3
1B5D:  GOTO   677
1B5E:  BSF    0A.4
1B5F:  BSF    0A.3
....................          if(check_response())     
1B60:  BCF    0A.4
1B61:  BCF    0A.3
1B62:  GOTO   690
1B63:  BSF    0A.4
1B64:  BSF    0A.3
1B65:  MOVF   78,F
1B66:  BTFSC  03.2
1B67:  GOTO   36B
....................             dht11_read(); 
1B68:  BCF    0A.4
1B69:  GOTO   6E8
1B6A:  BSF    0A.4
....................          eeprom_write_data(); 
1B6B:  BCF    0A.3
1B6C:  GOTO   000
1B6D:  BSF    0A.3
....................          nhiet_do_vuot_nguong(); 
1B6E:  BCF    0A.3
1B6F:  GOTO   038
1B70:  BSF    0A.3
....................          do_am_vuot_nguong(); 
1B71:  BCF    0A.3
1B72:  GOTO   130
1B73:  BSF    0A.3
....................       } 
1B74:  GOTO   3E4
....................       else if (oled_mode == 1) 
1B75:  DECFSZ 3F,W
1B76:  GOTO   37E
....................       { 
....................          setting_high_T_mode_1(); 
1B77:  BCF    0A.3
1B78:  GOTO   22C
1B79:  BSF    0A.3
....................          oled_128x64_mode_1(); 
1B7A:  BCF    0A.3
1B7B:  GOTO   253
1B7C:  BSF    0A.3
....................       } 
1B7D:  GOTO   3E4
....................       else if (oled_mode == 2) 
1B7E:  MOVF   3F,W
1B7F:  SUBLW  02
1B80:  BTFSS  03.2
1B81:  GOTO   389
....................       { 
....................          setting_high_RH_mode_2(); 
1B82:  BCF    0A.3
1B83:  GOTO   29B
1B84:  BSF    0A.3
....................          oled_128x64_mode_2(); 
1B85:  BCF    0A.3
1B86:  GOTO   2C2
1B87:  BSF    0A.3
....................       } 
1B88:  GOTO   3E4
....................       else if (oled_mode == 3) 
1B89:  MOVF   3F,W
1B8A:  SUBLW  03
1B8B:  BTFSS  03.2
1B8C:  GOTO   3B6
....................       {  
....................          mang_nhiet_do_oled_mode_3(); 
1B8D:  GOTO   000
....................          if(slot_read < 14) 
1B8E:  MOVF   45,W
1B8F:  SUBLW  0D
1B90:  BTFSS  03.0
1B91:  GOTO   3B5
....................          { 
....................             T_read[slot_read] = eeprom_read(slot_read); 
1B92:  MOVLW  46
1B93:  ADDWF  45,W
1B94:  MOVWF  78
1B95:  CLRF   7A
1B96:  BTFSC  03.0
1B97:  INCF   7A,F
1B98:  MOVF   78,W
1B99:  BSF    03.5
1B9A:  MOVWF  44
1B9B:  MOVF   7A,W
1B9C:  MOVWF  45
1B9D:  BCF    03.5
1B9E:  MOVF   45,W
1B9F:  BSF    03.5
1BA0:  MOVWF  47
1BA1:  BCF    0A.4
1BA2:  BCF    0A.3
1BA3:  BCF    03.5
1BA4:  CALL   7D8
1BA5:  BSF    0A.4
1BA6:  BSF    0A.3
1BA7:  BSF    03.5
1BA8:  MOVF   44,W
1BA9:  MOVWF  04
1BAA:  BCF    03.7
1BAB:  BTFSC  45.0
1BAC:  BSF    03.7
1BAD:  MOVF   78,W
1BAE:  MOVWF  00
....................             slot_read++; 
1BAF:  BCF    03.5
1BB0:  INCF   45,F
....................             if(slot_read == 14)  slot_read = 0; 
1BB1:  MOVF   45,W
1BB2:  SUBLW  0E
1BB3:  BTFSC  03.2
1BB4:  CLRF   45
....................          } 
....................       } 
1BB5:  GOTO   3E4
....................       else if (oled_mode == 4) 
1BB6:  MOVF   3F,W
1BB7:  SUBLW  04
1BB8:  BTFSS  03.2
1BB9:  GOTO   3E4
....................       { 
....................          mang_do_am_oled_mode_4(); 
1BBA:  GOTO   14B
....................          if(slot_read < 14) 
1BBB:  MOVF   45,W
1BBC:  SUBLW  0D
1BBD:  BTFSS  03.0
1BBE:  GOTO   3E4
....................          { 
....................             RH_read[slot_read] = eeprom_read(slot_read+32); 
1BBF:  MOVLW  A0
1BC0:  ADDWF  45,W
1BC1:  MOVWF  78
1BC2:  CLRF   7A
1BC3:  BTFSC  03.0
1BC4:  INCF   7A,F
1BC5:  MOVF   78,W
1BC6:  BSF    03.5
1BC7:  MOVWF  44
1BC8:  MOVF   7A,W
1BC9:  MOVWF  45
1BCA:  MOVLW  20
1BCB:  BCF    03.5
1BCC:  ADDWF  45,W
1BCD:  BSF    03.5
1BCE:  MOVWF  46
1BCF:  MOVWF  47
1BD0:  BCF    0A.4
1BD1:  BCF    0A.3
1BD2:  BCF    03.5
1BD3:  CALL   7D8
1BD4:  BSF    0A.4
1BD5:  BSF    0A.3
1BD6:  BSF    03.5
1BD7:  MOVF   44,W
1BD8:  MOVWF  04
1BD9:  BCF    03.7
1BDA:  BTFSC  45.0
1BDB:  BSF    03.7
1BDC:  MOVF   78,W
1BDD:  MOVWF  00
....................             slot_read++; 
1BDE:  BCF    03.5
1BDF:  INCF   45,F
....................             if(slot_read == 14)  slot_read = 0; 
1BE0:  MOVF   45,W
1BE1:  SUBLW  0E
1BE2:  BTFSC  03.2
1BE3:  CLRF   45
....................          } 
....................       }        
....................       if (T_ng > T_max) output_high(pin_c0); 
1BE4:  MOVF   32,W
1BE5:  SUBWF  43,W
1BE6:  BTFSC  03.0
1BE7:  GOTO   3EF
1BE8:  BCF    20.0
1BE9:  MOVF   20,W
1BEA:  BSF    03.5
1BEB:  MOVWF  07
1BEC:  BCF    03.5
1BED:  BSF    07.0
1BEE:  GOTO   3F5
....................       else output_low(pin_c0); 
1BEF:  BCF    20.0
1BF0:  MOVF   20,W
1BF1:  BSF    03.5
1BF2:  MOVWF  07
1BF3:  BCF    03.5
1BF4:  BCF    07.0
....................       if (RH_ng > RH_max)   
1BF5:  MOVF   34,W
1BF6:  SUBWF  42,W
1BF7:  BTFSC  03.0
1BF8:  GOTO   41A
....................       { 
....................          output_high(pin_c1); delay(50); 
1BF9:  BCF    20.1
1BFA:  MOVF   20,W
1BFB:  BSF    03.5
1BFC:  MOVWF  07
1BFD:  BCF    03.5
1BFE:  BSF    07.1
1BFF:  BSF    03.5
1C00:  CLRF   46
1C01:  MOVLW  32
1C02:  MOVWF  45
1C03:  BCF    0A.4
1C04:  BCF    0A.3
1C05:  BCF    03.5
1C06:  CALL   654
1C07:  BSF    0A.4
1C08:  BSF    0A.3
....................          output_low(pin_c1);  delay(50); 
1C09:  BCF    20.1
1C0A:  MOVF   20,W
1C0B:  BSF    03.5
1C0C:  MOVWF  07
1C0D:  BCF    03.5
1C0E:  BCF    07.1
1C0F:  BSF    03.5
1C10:  CLRF   46
1C11:  MOVLW  32
1C12:  MOVWF  45
1C13:  BCF    0A.4
1C14:  BCF    0A.3
1C15:  BCF    03.5
1C16:  CALL   654
1C17:  BSF    0A.4
1C18:  BSF    0A.3
....................       } 
1C19:  GOTO   42A
....................       else  
....................       {   
....................          output_low(pin_c1);  delay(100); 
1C1A:  BCF    20.1
1C1B:  MOVF   20,W
1C1C:  BSF    03.5
1C1D:  MOVWF  07
1C1E:  BCF    03.5
1C1F:  BCF    07.1
1C20:  BSF    03.5
1C21:  CLRF   46
1C22:  MOVLW  64
1C23:  MOVWF  45
1C24:  BCF    0A.4
1C25:  BCF    0A.3
1C26:  BCF    03.5
1C27:  CALL   654
1C28:  BSF    0A.4
1C29:  BSF    0A.3
....................       } 
1C2A:  BSF    03.5
1C2B:  GOTO   320
....................    } 
.................... } 
....................  
1C2C:  SLEEP

Configuration Fuses:
   Word  1: 2CC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
